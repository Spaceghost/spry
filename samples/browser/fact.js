/* Generated by the Nim Compiler v0.14.3 */
/*   (c) 2016 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI52858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52854 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52856 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3260 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3226 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3228 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52860 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52841 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI52838 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48068 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52806 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52843 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48076 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52851 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48166 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI48169 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48172 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48080 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI52798 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI52834 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48181 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48179 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48164 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48175 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48119 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48117 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48225 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48078 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI41002 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI48211 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI48208 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI48205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48199 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48194 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48192 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48138 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48143 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48141 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48134 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3246 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3248 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48147 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48018 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI48149 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33987 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI48154 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48152 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48145 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48156 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48004 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48127 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48132 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48136 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI50498 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI48161 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI48159 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI48158 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48185 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48189 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI48188 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI48196 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48074 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI48123 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI48016 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI52665 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3238 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3285 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3224 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3236 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3240 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3240 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3240.node = NNI3240;
var NNI3236 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3236.node = NNI3236;
NTI3285.base = NTI3224;
var NNI3224 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3285, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3224.node = NNI3224;
var NNI3208 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3208.node = NNI3208;
NTI3224.base = NTI3208;
NTI3236.base = NTI3224;
NTI3240.base = NTI3236;
var NNI3238 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3238.node = NNI3238;
NTI3238.base = NTI3236;
var NNI48196 = {kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null};
NTI48196.node = NNI48196;
NTI48189.base = NTI48016;
var NNI48188 = {kind: 1, offset: "nodes", len: 0, typ: NTI48189, name: "nodes", sons: null};
NTI48188.node = NNI48188;
var NNI48185 = {kind: 1, offset: "commentend", len: 0, typ: NTI138, name: "commentEnd", sons: null};
NTI48185.node = NNI48185;
NTI48185.base = NTI48123;
NTI48188.base = NTI48185;
NTI48196.base = NTI48188;
NTI48074.base = NTI48196;
var NNI48123 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "comment", len: 0, typ: NTI138, name: "comment", sons: null}, 
{kind: 1, offset: "tags", len: 0, typ: NTI48074, name: "tags", sons: null}]};
NTI48123.node = NNI48123;
NTI48123.base = NTI3208;
NTI48016.base = NTI48123;
NTI52665.base = NTI48016;
NTI48159.base = NTI138;
NTI48161.base = NTI48016;
var NNI48158 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "keys", len: 0, typ: NTI48159, name: "keys", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI48161, name: "args", sons: null}]};
NTI48158.node = NNI48158;
NTI48158.base = NTI48123;
NTI50498.base = NTI48016;
var NNI48136 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48136.node = NNI48136;
var NNI48132 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48132.node = NNI48132;
var NNI48127 = {kind: 1, offset: "word", len: 0, typ: NTI138, name: "word", sons: null};
NTI48127.node = NNI48127;
NTI48127.base = NTI48123;
NTI48132.base = NTI48127;
NTI48136.base = NTI48132;
var NNI48004 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48004.node = NNI48004;
NTI48004.base = NTI3224;
var NNI48156 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48156.node = NNI48156;
var NNI48130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48130.node = NNI48130;
NTI48130.base = NTI48127;
NTI48156.base = NTI48130;
var NNI48145 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48145.node = NNI48145;
NTI48145.base = NTI48132;
var NNI48152 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48152.node = NNI48152;
NTI48152.base = NTI48130;
var NNI48154 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48154.node = NNI48154;
NTI48154.base = NTI48130;
NTI33987.base = NTI138;
NTI48018.base = NTI48127;
var NNI48149 = {kind: 1, offset: "module", len: 0, typ: NTI48018, name: "module", sons: null};
NTI48149.node = NNI48149;
var NNI48147 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48147.node = NNI48147;
NTI48147.base = NTI48130;
NTI48149.base = NTI48147;
var NNI3248 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3248.node = NNI3248;
var NNI3246 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3246.node = NNI3246;
NTI3246.base = NTI3224;
NTI3248.base = NTI3246;
var NNI48134 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48134.node = NNI48134;
NTI48134.base = NTI48127;
var NNI48141 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48141.node = NNI48141;
NTI48141.base = NTI48132;
var NNI48143 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48143.node = NNI48143;
NTI48143.base = NTI48132;
var NNI48138 = {kind: 1, offset: "module", len: 0, typ: NTI48018, name: "module", sons: null};
NTI48138.node = NNI48138;
NTI48138.base = NTI48136;
var NNI48192 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48192.node = NNI48192;
NTI48192.base = NTI48188;
var NNI48194 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48194.node = NNI48194;
NTI48194.base = NTI48188;
var NNI48225 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI48016, name: "key", sons: null}, 
{kind: 1, offset: "val", len: 0, typ: NTI48016, name: "val", sons: null}]};
NTI48225.node = NNI48225;
NTI48225.base = NTI48123;
NTI48078.base = NTI48225;
var NNI48211 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI41002, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI48016, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI48078, name: "Field2", sons: null}]};
NTI48211.node = NNI48211;
NTI48208.base = NTI48211;
var NNI48205 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI48208, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI48205.node = NNI48205;
var NNI48199 = {kind: 1, offset: "bindings", len: 0, typ: NTI48205, name: "bindings", sons: null};
NTI48199.node = NNI48199;
NTI48199.base = NTI48185;
var NNI48121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48121.node = NNI48121;
var NNI48114 = {kind: 1, offset: "token", len: 0, typ: NTI138, name: "token", sons: null};
NTI48114.node = NNI48114;
NTI48114.base = NTI3208;
NTI48121.base = NTI48114;
var NNI48117 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48117.node = NNI48117;
NTI48117.base = NTI48114;
var NNI48119 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48119.node = NNI48119;
NTI48119.base = NTI48114;
var NNI48177 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48177.node = NNI48177;
var NNI48175 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48175.node = NNI48175;
var NNI48164 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48164.node = NNI48164;
NTI48164.base = NTI48123;
NTI48175.base = NTI48164;
NTI48177.base = NTI48175;
var NNI48179 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48179.node = NNI48179;
NTI48179.base = NTI48175;
var NNI48183 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48183.node = NNI48183;
NTI48183.base = NTI48164;
var NNI48181 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48181.node = NNI48181;
NTI48181.base = NTI48164;
var NNI52834 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "prok", len: 0, typ: NTI52798, name: "prok", sons: null}, 
{kind: 1, offset: "infix", len: 0, typ: NTI130, name: "infix", sons: null}]};
NTI52834.node = NNI52834;
NTI52834.base = NTI48123;
var NNI48080 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI48080.node = NNI48080;
NTI48080.base = NTI3224;
var NNI48172 = {kind: 1, offset: "value", len: 0, typ: NTI138, name: "value", sons: null};
NTI48172.node = NNI48172;
NTI48172.base = NTI48164;
var NNI48169 = {kind: 1, offset: "value", len: 0, typ: NTI124, name: "value", sons: null};
NTI48169.node = NNI48169;
NTI48169.base = NTI48164;
var NNI48166 = {kind: 1, offset: "value", len: 0, typ: NTI104, name: "value", sons: null};
NTI48166.node = NNI48166;
NTI48166.base = NTI48164;
NTI48076.base = NTI48199;
var NNI52851 = {kind: 1, offset: "locals", len: 0, typ: NTI48076, name: "locals", sons: null};
NTI52851.node = NNI52851;
NTI52806.base = NTI52843;
NTI48068.base = NTI48188;
var NNI52843 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "last", len: 0, typ: NTI48016, name: "last", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI48016, name: "self", sons: null}, 
{kind: 1, offset: "returned", len: 0, typ: NTI130, name: "returned", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI52806, name: "parent", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI48068, name: "body", sons: null}]};
NTI52843.node = NNI52843;
NTI52843.base = NTI48123;
NTI52851.base = NTI52843;
var NNI52838 = {kind: 1, offset: "parent", len: 0, typ: NTI52806, name: "parent", sons: null};
NTI52838.node = NNI52838;
NTI52838.base = NTI48196;
var NNI52841 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI52841.node = NNI52841;
NTI52841.base = NTI52838;
var NNI52860 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI52860.node = NNI52860;
NTI52860.base = NTI52851;
var NNI3228 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3228.node = NNI3228;
var NNI3226 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3226.node = NNI3226;
NTI3226.base = NTI3224;
NTI3228.base = NTI3226;
var NNI3260 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3260.node = NNI3260;
NTI3260.base = NTI3224;
var NNI52856 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI52856.node = NNI52856;
NTI52856.base = NTI52843;
var NNI52854 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI52854.node = NNI52854;
NTI52854.base = NTI52851;
var NNI52858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI52858.node = NNI52858;
NTI52858.base = NTI52851;
function makeNimstrLit(c_13203) {

    var ln = c_13203.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13203.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_18315, src_18316, ti_18317) {

var result_18629 = null;
switch (ti_18317.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_18298(ti_18317))) {
result_18629 = src_18316;
}
else {
result_18629 = [src_18316[0], src_18316[1]];}


break;
case 19:       if (dest_18315 === null || dest_18315 === undefined) {
        dest_18315 = {};
      }
      else {
        for (var key in dest_18315) { delete dest_18315[key]; }
      }
      for (var key in src_18316) { dest_18315[key] = src_18316[key]; }
      result_18629 = dest_18315;
    
break;
case 18: case 17: if (!((ti_18317.base == null))) {
result_18629 = nimCopy(dest_18315, src_18316, ti_18317.base);
}
else {
if ((ti_18317.kind == 17)) {
result_18629 = (dest_18315 === null || dest_18315 === undefined) ? {m_type: ti_18317} : dest_18315;}
else {
result_18629 = (dest_18315 === null || dest_18315 === undefined) ? {} : dest_18315;}
}
nimCopyAux(result_18629, src_18316, ti_18317.node);

break;
case 24: case 4: case 27: case 16:       if (src_18316 === null) {
        result_18629 = null;
      }
      else {
        if (dest_18315 === null || dest_18315 === undefined) {
          dest_18315 = new Array(src_18316.length);
        }
        else {
          dest_18315.length = src_18316.length;
        }
        result_18629 = dest_18315;
        for (var i = 0; i < src_18316.length; ++i) {
          result_18629[i] = nimCopy(result_18629[i], src_18316[i], ti_18317.base);
        }
      }
    
break;
case 28:       if (src_18316 !== null) {
        result_18629 = src_18316.slice(0);
      }
    
break;
default: 
result_18629 = src_18316;
break;
}
return result_18629;
}
function eqStrings(a_15803, b_15804) {

    if (a_15803 == b_15804) return true;
    if ((!a_15803) || (!b_15804)) return false;
    var alen = a_15803.length;
    if (alen != b_15804.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_15803[i] != b_15804[i]) return false;
    return true;
  }
function toJSStr(s_13603) {

    var len = s_13603.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_13603[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_13603[i] < 128)
        asciiPart[i] = fcc(s_13603[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_12206, ename_12207) {

e_12206.name = ename_12207;
if ((excHandler == 0)) {
unhandledException(e_12206);
}

throw e_12206;}
function isObj(obj_18875, subclass_18876) {

var result_18877 = false;
BeforeRet: do {
var x_18878 = obj_18875;
if ((x_18878 == subclass_18876)) {
result_18877 = true;
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!!((x_18878 == subclass_18876))) break L2;
if ((x_18878 == null)) {
result_18877 = false;
break BeforeRet;
}

x_18878 = x_18878.base;
}
} while(false);
result_18877 = true;
break BeforeRet;
} while (false); 
return result_18877;
}
function mnewString(len_13803) {

      var result = new Array(len_13803+1);
      result[0] = 0;
      result[len_13803] = 0;
      return result;
    }
function addChar(x_18916, c_18917) {

    x_18916[x_18916.length-1] = c_18917; x_18916.push(0);
  }
function cstrToNimstr(c_13403) {

  var ln = c_13403.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_13403.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function rawEcho() {

var node_16030 = null;
node_16030 = document.getElementsByTagName('body')[0];if ((node_16030 === null)) {
var e_16042 = null;
e_16042 = {m_type: NTI3228, parent: null, name: null, message: null, trace: null};
e_16042.message = nimCopy(null, makeNimstrLit("<body> element does not exist yet!"), NTI138);
raiseException(e_16042, "IOError");
}

    for (var i = 0; i < arguments.length; ++i) {
      var x = toJSStr(arguments[i]);
      node_16030.appendChild(document.createTextNode(x));
    }
    node_16030.appendChild(document.createElement("br"));
    }
function nimParseBiggestFloat(s_18930, number_18932, number_18932_Idx, start_18933) {

var result_18934 = 0;
BeforeRet: do {
var esign_18935 = 1.0000000000000000e+00;
var sign_18936 = 1.0000000000000000e+00;
var i_18937 = start_18933;
var exponent_18938 = 0;
var flags_18939 = 0;
number_18932[number_18932_Idx] = 0.0;
if ((s_18930[i_18937] == 43)) {
i_18937 += 1;
}
else {
if ((s_18930[i_18937] == 45)) {
sign_18936 = -1.0000000000000000e+00;
i_18937 += 1;
}
}
if (((s_18930[i_18937] == 78) || (s_18930[i_18937] == 110))) {
if (((s_18930[(i_18937 + 1)] == 65) || (s_18930[(i_18937 + 1)] == 97))) {
if (((s_18930[(i_18937 + 2)] == 78) || (s_18930[(i_18937 + 2)] == 110))) {
if (!((SetConstr([97, 122], [65, 90], [48, 57], 95)[s_18930[(i_18937 + 3)]] != undefined))) {
number_18932[number_18932_Idx] = NaN;
result_18934 = ((i_18937 + 3) - start_18933);
break BeforeRet;
}

}

}

result_18934 = 0;
break BeforeRet;
}

if (((s_18930[i_18937] == 73) || (s_18930[i_18937] == 105))) {
if (((s_18930[(i_18937 + 1)] == 78) || (s_18930[(i_18937 + 1)] == 110))) {
if (((s_18930[(i_18937 + 2)] == 70) || (s_18930[(i_18937 + 2)] == 102))) {
if (!((SetConstr([97, 122], [65, 90], [48, 57], 95)[s_18930[(i_18937 + 3)]] != undefined))) {
number_18932[number_18932_Idx] = (Infinity * sign_18936);
result_18934 = ((i_18937 + 3) - start_18933);
break BeforeRet;
}

}

}

result_18934 = 0;
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!(SetConstr([48, 57])[s_18930[i_18937]] != undefined)) break L2;
flags_18939 = (flags_18939 | 1);
number_18932[number_18932_Idx] = ((number_18932[number_18932_Idx] * 1.0000000000000000e+01) + (s_18930[i_18937] - 48));
i_18937 += 1;
L3: do {
L4: while (true) {
if (!(s_18930[i_18937] == 95)) break L4;
i_18937 += 1;
}
} while(false);
}
} while(false);
if ((s_18930[i_18937] == 46)) {
var hd_19027 = 1.0000000000000000e+00;
i_18937 += 1;
L5: do {
L6: while (true) {
if (!(SetConstr([48, 57])[s_18930[i_18937]] != undefined)) break L6;
flags_18939 = (flags_18939 | 2);
number_18932[number_18932_Idx] = ((number_18932[number_18932_Idx] * 1.0000000000000000e+01) + (s_18930[i_18937] - 48));
hd_19027 = (hd_19027 * 1.0000000000000000e+01);
i_18937 += 1;
L7: do {
L8: while (true) {
if (!(s_18930[i_18937] == 95)) break L8;
i_18937 += 1;
}
} while(false);
}
} while(false);
number_18932[number_18932_Idx] = (number_18932[number_18932_Idx] / hd_19027);
}

if ((flags_18939 == 0)) {
result_18934 = 0;
break BeforeRet;
}

if ((SetConstr(101, 69)[s_18930[i_18937]] != undefined)) {
i_18937 += 1;
if ((s_18930[i_18937] == 43)) {
i_18937 += 1;
}
else {
if ((s_18930[i_18937] == 45)) {
esign_18935 = -1.0000000000000000e+00;
i_18937 += 1;
}
}
if (!((SetConstr([48, 57])[s_18930[i_18937]] != undefined))) {
result_18934 = 0;
break BeforeRet;
}

L9: do {
L10: while (true) {
if (!(SetConstr([48, 57])[s_18930[i_18937]] != undefined)) break L10;
exponent_18938 = (((exponent_18938 * 10) + s_18930[i_18937]) - 48);
i_18937 += 1;
L11: do {
L12: while (true) {
if (!(s_18930[i_18937] == 95)) break L12;
i_18937 += 1;
}
} while(false);
}
} while(false);
}

var hd_19179 = tentothepowerof_18918(exponent_18938);
if ((0.0 < esign_18935)) {
number_18932[number_18932_Idx] = (number_18932[number_18932_Idx] * hd_19179);
}
else {
number_18932[number_18932_Idx] = (number_18932[number_18932_Idx] / hd_19179);
}

number_18932[number_18932_Idx] = (number_18932[number_18932_Idx] * sign_18936);
result_18934 = (i_18937 - start_18933);
} while (false); 
return result_18934;
}
function reraiseException() {

if ((lastJSError == null)) {
var e_12618 = null;
e_12618 = {m_type: NTI3260, parent: null, name: null, message: null, trace: null};
e_12618.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI138);
raiseException(e_12618, "ReraiseError");
}
else {
if ((excHandler == 0)) {
var isnimexception_12801 = false;
isnimexception_12801 = lastJSError.m_type;if (isnimexception_12801) {
unhandledException(lastJSError);
}

}

throw lastJSError;}

}
function addInt(a_16056, b_16057) {

      var result = a_16056 + b_16057;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function subInt(a_16203, b_16204) {

      var result = a_16203 - b_16204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mulInt(a_16403, b_16404) {

      var result = a_16403 * b_16404;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function cmpStrings(a_15603, b_15604) {

    if (a_15603 == b_15604) return 0;
    if (!a_15603) return -1;
    if (!b_15604) return 1;
    for (var i = 0; i < a_15603.length-1; ++i) {
      var result = a_15603[i] - b_15604[i];
      if (result != 0) return result;
    }
    return 0;
  }
var nimvm_5354 = false;
var nim_program_result = 0;
var globalraisehook_10013 = [null];
var localraisehook_10018 = [null];
var outofmemhook_10021 = [null];
function isfatpointer_18298(ti_18300) {

var result_18301 = false;
BeforeRet: do {
result_18301 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_18300.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_18301;
}
function nimCopyAux(dest_18320, src_18321, n_18323) {

switch (n_18323.kind) {
case 0: 
break;
case 1:       dest_18320[n_18323.offset] = nimCopy(dest_18320[n_18323.offset], src_18321[n_18323.offset], n_18323.typ);
    
break;
case 2: L1: do {
var i_18615 = 0;
var HEX3Atmp_18617 = 0;
HEX3Atmp_18617 = (n_18323.len - 1);
var res_18620 = 0;
L2: do {
L3: while (true) {
if (!(res_18620 <= HEX3Atmp_18617)) break L3;
i_18615 = res_18620;
nimCopyAux(dest_18320, src_18321, n_18323.sons[i_18615]);
res_18620 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_18320[n_18323.offset] = nimCopy(dest_18320[n_18323.offset], src_18321[n_18323.offset], n_18323.typ);
      for (var i = 0; i < n_18323.sons.length; ++i) {
        nimCopyAux(dest_18320, src_18321, n_18323.sons[i][1]);
      }
    
break;
}
}
function add_10037(x_10040, x_10040_Idx, y_10041) {

        var len = x_10040[0].length-1;
        for (var i = 0; i < y_10041.length; ++i) {
          x_10040[0][len] = y_10041.charCodeAt(i);
          ++len;
        }
        x_10040[0][len] = 0
      }
function unhandledException(e_12061) {

var Tmp1;
var buf_12201 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_12061.message, null))) Tmp1 = false; else {Tmp1 = !((e_12061.message[0] == 0)); }if (Tmp1) {
if (buf_12201[0] != null) { buf_12201[0] = (buf_12201[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_12201[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_12201[0] != null) { buf_12201[0] = (buf_12201[0].slice(0, -1)).concat(e_12061.message); } else { buf_12201[0] = e_12061.message;};
}
else {
if (buf_12201[0] != null) { buf_12201[0] = (buf_12201[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_12201[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_12201[0] != null) { buf_12201[0] = (buf_12201[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_12201[0] = makeNimstrLit(" [");};
add_10037(buf_12201, 0, e_12061.name);
if (buf_12201[0] != null) { buf_12201[0] = (buf_12201[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_12201[0] = makeNimstrLit("]\x0A");};
alert(toJSStr(buf_12201[0]));
}
function raiseOverflow() {

var e_13010 = null;
e_13010 = {m_type: NTI3240, parent: null, name: null, message: null, trace: null};
e_13010.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
raiseException(e_13010, "OverflowError");
}
function raiseDivByZero() {

var e_13026 = null;
e_13026 = {m_type: NTI3238, parent: null, name: null, message: null, trace: null};
e_13026.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
raiseException(e_13026, "DivByZeroError");
}
var objectid_41233 = /**/[0];
function newseq_48396(len_48400) {

var result_48402 = null;
result_48402 = new Array(len_48400); for (var i=0;i<len_48400;++i) {result_48402[i]=null;}return result_48402;
}
var parserexts_48421 = /**/[newseq_48396(0)];
function newseq_50493(len_50497) {

var result_50499 = null;
result_50499 = new Array(len_50497); for (var i=0;i<len_50497;++i) {result_50499[i]=null;}return result_50499;
}
function newblok_50525() {

var result_50527 = null;
result_50527 = {nodes: newseq_50493(0), m_type: NTI48196, pos: 0, commentend: null, comment: null, tags: null};
return result_50527;
}
function currentkeyword_52137(self_52139) {

var result_52140 = null;
BeforeRet: do {
if (isObj(self_52139.stack[(self_52139.stack != null ? (self_52139.stack.length-1) : -1)].m_type, NTI48158)) {
result_52140 = self_52139.stack[(self_52139.stack != null ? (self_52139.stack.length-1) : -1)];
break BeforeRet;
}
else {
result_52140 = null;
break BeforeRet;
}

} while (false); 
return result_52140;
}
function add_50663(self_50665, n_50666) {

if (self_50665.nodes != null) { self_50665.nodes.push(n_50666); } else { self_50665.nodes = [n_50666]; };
}
function inbalance_52057(self_52059) {

var result_52060 = false;
BeforeRet: do {
result_52060 = ((self_52059.args != null ? self_52059.args.length : 0) == (self_52059.keys != null ? self_52059.keys.length : 0));
break BeforeRet;
} while (false); 
return result_52060;
}
function pop_52160(s_52166, s_52166_Idx) {

var result_52167 = null;
var L_52176 = ((s_52166[s_52166_Idx] != null ? s_52166[s_52166_Idx].length : 0) - 1);
result_52167 = s_52166[s_52166_Idx][L_52176];
s_52166[s_52166_Idx].length = L_52176;
return result_52167;
}
function newevalword_50041(s_50043) {

var result_50044 = null;
result_50044 = {word: s_50043, m_type: NTI48136, comment: null, tags: null};
return result_50044;
}
function nsuJoinSep(a_35442, sep_35443) {

var result_35444 = null;
if ((0 < (a_35442 != null ? a_35442.length : 0))) {
var L_35459 = ((sep_35443 != null ? sep_35443.length-1 : 0) * ((a_35442 != null ? a_35442.length : 0) - 1));
L1: do {
var i_35469 = 0;
var HEX3Atmp_35490 = 0;
HEX3Atmp_35490 = (a_35442 != null ? (a_35442.length-1) : -1);
var res_35493 = 0;
L2: do {
L3: while (true) {
if (!(res_35493 <= HEX3Atmp_35490)) break L3;
i_35469 = res_35493;
L_35459 += (a_35442[i_35469] != null ? a_35442[i_35469].length-1 : 0);
res_35493 += 1;
}
} while(false);
} while(false);
result_35444 = nimCopy(null, mnewString(0), NTI138);
if (result_35444 != null) { result_35444 = (result_35444.slice(0, -1)).concat(a_35442[0]); } else { result_35444 = a_35442[0];};
L4: do {
var i_35488 = 0;
var HEX3Atmp_35498 = 0;
HEX3Atmp_35498 = (a_35442 != null ? (a_35442.length-1) : -1);
var res_35501 = 1;
L5: do {
L6: while (true) {
if (!(res_35501 <= HEX3Atmp_35498)) break L6;
i_35488 = res_35501;
if (result_35444 != null) { result_35444 = (result_35444.slice(0, -1)).concat(sep_35443); } else { result_35444 = sep_35443;};
if (result_35444 != null) { result_35444 = (result_35444.slice(0, -1)).concat(a_35442[i_35488]); } else { result_35444 = a_35442[i_35488];};
res_35501 += 1;
}
} while(false);
} while(false);
}
else {
result_35444 = nimCopy(null, makeNimstrLit(""), NTI138);
}

return result_35444;
}
function add_50683(x_50689, x_50689_Idx, y_50692) {

var xl_50701 = (x_50689[x_50689_Idx] != null ? x_50689[x_50689_Idx].length : 0);
x_50689[x_50689_Idx].length = (xl_50701 + (y_50692 != null ? y_50692.length : 0));
L1: do {
var i_50728 = 0;
var HEX3Atmp_50730 = 0;
HEX3Atmp_50730 = (y_50692 != null ? (y_50692.length-1) : -1);
var res_50733 = 0;
L2: do {
L3: while (true) {
if (!(res_50733 <= HEX3Atmp_50730)) break L3;
i_50728 = res_50733;
x_50689[x_50689_Idx][(xl_50701 + i_50728)] = y_50692[i_50728];
res_50733 += 1;
}
} while(false);
} while(false);
}
function producenodes_52077(self_52079) {

var result_52081 = [null];
result_52081[0] = nimCopy(null, newseq_50493(0), NTI50498);
if (result_52081[0] != null) { result_52081[0].push(newevalword_50041(nsuJoinSep(self_52079.keys, makeNimstrLit("")))); } else { result_52081[0] = [newevalword_50041(nsuJoinSep(self_52079.keys, makeNimstrLit("")))]; };
add_50683(result_52081, 0, self_52079.args);
return result_52081[0];
}
function delete_51078(x_51084, x_51084_Idx, i_51086) {

x_51084[x_51084_Idx].splice(i_51086, 1);}
function removelast_51074(self_51076) {

delete_51078(self_51076, "nodes", (self_51076.nodes != null ? (self_51076.nodes.length-1) : -1));
}
function add_50677(self_50679, n_50681) {

add_50683(self_50679, "nodes", n_50681);
}
function closekeyword_52143(self_52145) {

var keyword_52194 = currentkeyword_52137(self_52145);
pop_52160(self_52145, "stack");
var nodes_52205 = producenodes_52077(keyword_52194);
removelast_51074(self_52145.stack[(self_52145.stack != null ? (self_52145.stack.length-1) : -1)]);
add_50677(self_52145.stack[(self_52145.stack != null ? (self_52145.stack.length-1) : -1)], nodes_52205);
}
function doaddnode_52206(self_52208, node_52209) {

var keyword_52210 = currentkeyword_52137(self_52208);
if ((keyword_52210 === null)) {
add_50663(self_52208.stack[(self_52208.stack != null ? (self_52208.stack.length-1) : -1)], node_52209);
}
else {
if (inbalance_52057(keyword_52210)) {
closekeyword_52143(self_52208);
doaddnode_52206(self_52208, node_52209);
}
else {
if (keyword_52210.args != null) { keyword_52210.args.push(node_52209); } else { keyword_52210.args = [node_52209]; };
}

}

}
function push_52229(self_52231, n_52232) {

if (!(((self_52231.stack != null ? self_52231.stack.length : 0) == 0))) {
doaddnode_52206(self_52231, n_52232);
}

if (self_52231.stack != null) { self_52231.stack.push(n_52232); } else { self_52231.stack = [n_52232]; };
}
function raiseparseexception_49795(msg_49797) {

var e_49801 = null;
e_49801 = {m_type: NTI48004, parent: null, name: null, message: null, trace: null};
e_49801.message = nimCopy(null, msg_49797, NTI138);
raiseException(e_49801, "ParseException");
}
function newgetargword_50434(s_50436) {

var result_50437 = null;
result_50437 = {word: s_50436, m_type: NTI48156, comment: null, tags: null};
return result_50437;
}
function HEX5BHEX5D_19844(s_19846, x_19856) {

var result_19857 = null;
result_19857 = nimCopy(null, (s_19846.slice(x_19856.a, (x_19856.b)+1).concat(0)), NTI138);
return result_19857;
}
function HEX2EHEX2E_35261(a_35265, b_35267) {

var result_35269 = {a: 0, b: 0};
result_35269.a = a_35265;
result_35269.b = b_35267;
return result_35269;
}
function newevalargword_50429(s_50431) {

var result_50432 = null;
result_50432 = {word: s_50431, m_type: NTI48145, comment: null, tags: null};
return result_50432;
}
function newgetselfword_50419(s_50421) {

var result_50422 = null;
result_50422 = {word: s_50421, m_type: NTI48152, comment: null, tags: null};
return result_50422;
}
function newgetouterword_50424(s_50426) {

var result_50427 = null;
result_50427 = {word: s_50426, m_type: NTI48154, comment: null, tags: null};
return result_50427;
}
function preprocesssub_35526(sub_35528, a_35530) {

var m_35531 = (sub_35528 != null ? sub_35528.length-1 : 0);
L1: do {
var i_35542 = 0;
var res_35556 = 0;
L2: do {
L3: while (true) {
if (!(res_35556 <= 255)) break L3;
i_35542 = res_35556;
a_35530[i_35542] = (m_35531 + 1);
res_35556 += 1;
}
} while(false);
} while(false);
L4: do {
var i_35552 = 0;
var HEX3Atmp_35561 = 0;
HEX3Atmp_35561 = (m_35531 - 1);
var res_35564 = 0;
L5: do {
L6: while (true) {
if (!(res_35564 <= HEX3Atmp_35561)) break L6;
i_35552 = res_35564;
a_35530[sub_35528[i_35552]] = (m_35531 - i_35552);
res_35564 += 1;
}
} while(false);
} while(false);
}
function findaux_35568(s_35570, sub_35571, start_35572, a_35573) {

var result_35574 = 0;
BeforeRet: do {
var m_35575 = (sub_35571 != null ? sub_35571.length-1 : 0);
var n_35576 = (s_35570 != null ? s_35570.length-1 : 0);
var j_35577 = start_35572;
L1: do {
L2: while (true) {
if (!(j_35577 <= (n_35576 - m_35575))) break L2;
L3: do {
L4: do {
var k_35588 = 0;
var HEX3Atmp_35600 = 0;
HEX3Atmp_35600 = (m_35575 - 1);
var res_35603 = 0;
L5: do {
L6: while (true) {
if (!(res_35603 <= HEX3Atmp_35600)) break L6;
k_35588 = res_35603;
if (!((sub_35571[k_35588] == s_35570[(k_35588 + j_35577)]))) {
break L3;
}

res_35603 += 1;
}
} while(false);
} while(false);
result_35574 = j_35577;
break BeforeRet;
} while(false);
j_35577 += a_35573[s_35570[(j_35577 + m_35575)]];
}
} while(false);
result_35574 = -1;
break BeforeRet;
} while (false); 
return result_35574;
}
function nsuFindStr(s_35609, sub_35610, start_35611) {

var result_35612 = 0;
var a_35613 = [new Int32Array(256)];
preprocesssub_35526(sub_35610, a_35613[0]);
result_35612 = findaux_35568(s_35609, sub_35610, start_35611, a_35613[0]);
return result_35612;
}
function contains_36051(s_36053, sub_36054) {

var result_36055 = false;
BeforeRet: do {
result_36055 = (0 <= nsuFindStr(s_36053, sub_36054, 0));
break BeforeRet;
} while (false); 
return result_36055;
}
function substreq_33062(s_33064, pos_33065, substr_33066) {

var result_33067 = false;
BeforeRet: do {
var i_33068 = 0;
var length_33069 = (substr_33066 != null ? substr_33066.length-1 : 0);
L1: do {
L2: while (true) {
if (!((i_33068 < length_33069) && (s_33064[(pos_33065 + i_33068)] == substr_33066[i_33068]))) break L2;
i_33068 += 1;
}
} while(false);
result_33067 = (i_33068 == length_33069);
break BeforeRet;
} while (false); 
return result_33067;
}
function nsuSplitString(s_33965, sep_33966, maxsplit_33967) {

var result_33969 = null;
result_33969 = nimCopy(null, [], NTI33987);
L1: do {
var x_33971 = null;
var last_34002 = 0;
var splits_34004 = maxsplit_33967;
if ((0 < (s_33965 != null ? s_33965.length-1 : 0))) {
L2: do {
L3: while (true) {
if (!(last_34002 <= (s_33965 != null ? s_33965.length-1 : 0))) break L3;
var first_34006 = last_34002;
L4: do {
L5: while (true) {
if (!((last_34002 < (s_33965 != null ? s_33965.length-1 : 0)) && !(substreq_33062(s_33965, last_34002, sep_33966)))) break L5;
last_34002 += 1;
}
} while(false);
if ((splits_34004 == 0)) {
last_34002 = (s_33965 != null ? s_33965.length-1 : 0);
}

x_33971 = (s_33965.slice(first_34006, ((last_34002 - 1))+1).concat(0));
if (result_33969 != null) { result_33969.push(x_33971); } else { result_33969 = [x_33971]; };
if ((splits_34004 == 0)) {
break L2;
}

splits_34004 -= 1;
last_34002 += (sep_33966 != null ? sep_33966.length-1 : 0);
}
} while(false);
}

} while(false);
return result_33969;
}
function newgetmoduleword_50413(s_50415) {

var result_50416 = null;
var both_50417 = nsuSplitString(s_50415, makeNimstrLit("::"), -1);
result_50416 = {word: both_50417[1], module: newevalword_50041(both_50417[0]), m_type: NTI48149, comment: null, tags: null};
return result_50416;
}
function newgetword_50408(s_50410) {

var result_50411 = null;
result_50411 = {word: s_50410, m_type: NTI48147, comment: null, tags: null};
return result_50411;
}
function HEX21HEX26_41004(h_41006, val_41007) {

var result_41008 = 0;
result_41008 = ((h_41006 + val_41007) >>> 0);
result_41008 = ((result_41008 + (result_41008 << 10)) >>> 0);
result_41008 = (result_41008 ^ ((result_41008 >>> 0) >>> 6));
return result_41008;
}
function HEX21HEX24_41027(h_41029) {

var result_41030 = 0;
result_41030 = ((h_41029 + (h_41029 << 3)) >>> 0);
result_41030 = (result_41030 ^ ((result_41030 >>> 0) >>> 11));
result_41030 = ((result_41030 + (result_41030 << 15)) >>> 0);
return result_41030;
}
function hash_41827(x_41829) {

var result_41830 = 0;
var h_41831 = 0;
L1: do {
var i_41841 = 0;
var HEX3Atmp_41852 = 0;
HEX3Atmp_41852 = ((x_41829 != null ? x_41829.length-1 : 0) - 1);
var res_41855 = 0;
L2: do {
L3: while (true) {
if (!(res_41855 <= HEX3Atmp_41852)) break L3;
i_41841 = res_41855;
h_41831 = HEX21HEX26_41004(h_41831, x_41829[i_41841]);
res_41855 += 1;
}
} while(false);
} while(false);
result_41830 = HEX21HEX24_41027(h_41831);
return result_41830;
}
function isfilled_44263(hcode_44265) {

var result_44266 = false;
result_44266 = !((hcode_44265 == 0));
return result_44266;
}
function nexttry_44401(h_44403, maxhash_44404) {

var result_44405 = 0;
result_44405 = ((h_44403 + 1) & maxhash_44404);
return result_44405;
}
function rawget_50064(t_50069, key_50071, hc_50073, hc_50073_Idx) {

var Tmp3;
var result_50074 = 0;
BeforeRet: do {
hc_50073[hc_50073_Idx] = hash_41827(key_50071);
if ((hc_50073[hc_50073_Idx] == 0)) {
hc_50073[hc_50073_Idx] = 314159265;
}

var h_50078 = (hc_50073[hc_50073_Idx] & (t_50069.data != null ? (t_50069.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_44263(t_50069.data[h_50078].Field0)) break L2;
if (!(t_50069.data[h_50078].Field0 == hc_50073[hc_50073_Idx])) Tmp3 = false; else {Tmp3 = eqStrings(t_50069.data[h_50078].Field1, key_50071); }if (Tmp3) {
result_50074 = h_50078;
break BeforeRet;
}

h_50078 = nexttry_44401(h_50078, (t_50069.data != null ? (t_50069.data.length-1) : -1));
}
} while(false);
result_50074 = (-1 - h_50078);
} while (false); 
return result_50074;
}
function haskey_50052(t_50058, key_50060) {

var result_50061 = false;
var hc_50062 = [0];
result_50061 = (0 <= rawget_50064(t_50058, key_50060, hc_50062, 0));
return result_50061;
}
function HEX5BHEX5D_50084(t_50091, key_50093) {

var result_50095 = [null, 0];
var hc_50097 = [0];
var index_50099 = rawget_50064(t_50091, key_50093, hc_50097, 0);
if ((0 <= index_50099)) {
result_50095 = t_50091.data[index_50099]; result_50095_Idx = "Field2";
}
else {
var e_50203 = null;
e_50203 = {m_type: NTI3248, parent: null, name: null, message: null, trace: null};
e_50203.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_50093), NTI138);
raiseException(e_50203, "KeyError");
}

return [result_50095, result_50095_Idx];
}
function mustrehash_44268(length_44270, counter_44271) {

var result_44272 = false;
result_44272 = (((length_44270 * 2) < (counter_44271 * 3)) || ((length_44270 - counter_44271) < 4));
return result_44272;
}
function rawgetknownhc_50291(t_50296, key_50298, hc_50300) {

var result_50301 = 0;
BeforeRet: do {
var h_50302 = (hc_50300 & (t_50296.data != null ? (t_50296.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_44263(t_50296.data[h_50302].Field0)) break L2;
if (((t_50296.data[h_50302].Field0 == hc_50300) && eqStrings(t_50296.data[h_50302].Field1, key_50298))) {
result_50301 = h_50302;
break BeforeRet;
}

h_50302 = nexttry_44401(h_50302, (t_50296.data != null ? (t_50296.data.length-1) : -1));
}
} while(false);
result_50301 = (-1 - h_50302);
} while (false); 
return result_50301;
}
function rawinsert_50307(t_50314, data_50318, data_50318_Idx, key_50320, val_50322, hc_50324, h_50326) {

data_50318[data_50318_Idx][h_50326].Field1 = nimCopy(null, key_50320, NTI138);
data_50318[data_50318_Idx][h_50326].Field2 = val_50322;
data_50318[data_50318_Idx][h_50326].Field0 = hc_50324;
}
function enlarge_50238(t_50245) {

var n_50249 = null;
n_50249 = new Array(((t_50245.data != null ? t_50245.data.length : 0) * 2)); for (var i=0;i<((t_50245.data != null ? t_50245.data.length : 0) * 2);++i) {n_50249[i]={Field0: 0, Field1: null, Field2: null};}var Tmp1 = t_50245.data; t_50245.data = n_50249; n_50249 = Tmp1;L2: do {
var i_50289 = 0;
var HEX3Atmp_50330 = 0;
HEX3Atmp_50330 = (n_50249 != null ? (n_50249.length-1) : -1);
var res_50333 = 0;
L3: do {
L4: while (true) {
if (!(res_50333 <= HEX3Atmp_50330)) break L4;
i_50289 = res_50333;
if (isfilled_44263(n_50249[i_50289].Field0)) {
var j_50305 = (-1 - rawgetknownhc_50291(t_50245, n_50249[i_50289].Field1, n_50249[i_50289].Field0));
rawinsert_50307(t_50245, t_50245, "data", n_50249[i_50289].Field1, n_50249[i_50289].Field2, n_50249[i_50289].Field0, j_50305);
}

res_50333 += 1;
}
} while(false);
} while(false);
}
function rawgetdeep_50339(t_50344, key_50346, hc_50348, hc_50348_Idx) {

var result_50349 = 0;
hc_50348[hc_50348_Idx] = hash_41827(key_50346);
if ((hc_50348[hc_50348_Idx] == 0)) {
hc_50348[hc_50348_Idx] = 314159265;
}

var h_50353 = (hc_50348[hc_50348_Idx] & (t_50344.data != null ? (t_50344.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_44263(t_50344.data[h_50353].Field0)) break L2;
h_50353 = nexttry_44401(h_50353, (t_50344.data != null ? (t_50344.data.length-1) : -1));
}
} while(false);
result_50349 = h_50353;
return result_50349;
}
function add_50217(t_50224, key_50226, val_50228) {

if (mustrehash_44268((t_50224.data != null ? t_50224.data.length : 0), t_50224.counter)) {
enlarge_50238(t_50224);
}

var hc_50337 = [0];
var j_50357 = rawgetdeep_50339(t_50224, key_50226, hc_50337, 0);
rawinsert_50307(t_50224, t_50224, "data", key_50226, val_50228, hc_50337[0], j_50357);
t_50224.counter += 1;
}
function neworgetlitword_50046(self_50048, s_50049) {

var Tmp1;
var result_50050 = null;
BeforeRet: do {
if (haskey_50052(self_50048.litwords, s_50049)) {
result_50050 = (Tmp1 = HEX5BHEX5D_50084(self_50048.litwords, s_50049), Tmp1[0][Tmp1[1]]);
break BeforeRet;
}
else {
result_50050 = {word: s_50049, m_type: NTI48134, comment: null, tags: null};
add_50217(self_50048.litwords, s_50049, result_50050);
}

} while (false); 
return result_50050;
}
function newseq_50455(len_50459) {

var result_50461 = null;
result_50461 = new Array(len_50459); for (var i=0;i<len_50459;++i) {result_50461[i]=null;}return result_50461;
}
function newkeyword_50439() {

var result_50441 = null;
result_50441 = {keys: newseq_50455(0), args: newseq_50493(0), m_type: NTI48158, comment: null, tags: null};
return result_50441;
}
function addkey_52029(self_52031, key_52032) {

if (self_52031.keys != null) { self_52031.keys.push(key_52032); } else { self_52031.keys = [key_52032]; };
}
function newevalselfword_50398(s_50400) {

var result_50401 = null;
result_50401 = {word: s_50400, m_type: NTI48141, comment: null, tags: null};
return result_50401;
}
function newevalouterword_50403(s_50405) {

var result_50406 = null;
result_50406 = {word: s_50405, m_type: NTI48143, comment: null, tags: null};
return result_50406;
}
function newevalmoduleword_50392(s_50394) {

var result_50395 = null;
var both_50396 = nsuSplitString(s_50394, makeNimstrLit("::"), -1);
result_50395 = {word: both_50396[1], module: newevalword_50041(both_50396[0]), m_type: NTI48138, comment: null, tags: null};
return result_50395;
}
function newword_52252(self_52254, token_52255) {

var Tmp1;
var Tmp2;
var Tmp3;
var result_52256 = null;
BeforeRet: do {
var len_52257 = (token_52255 != null ? token_52255.length-1 : 0);
var first_52258 = token_52255[0];
if (!(first_52258 == 58)) Tmp1 = false; else {Tmp1 = (1 < len_52257); }if (Tmp1) {
if ((token_52255[1] == 36)) {
if (((token_52255 != null ? token_52255.length-1 : 0) < 3)) {
raiseparseexception_49795(makeNimstrLit("Malformed get argword, missing at least 1 character"));
}

result_52256 = newgetargword_50434(HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(2, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}
else {
result_52256 = newevalargword_50429(HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(1, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}

}

if (!(first_52258 == 36)) Tmp2 = false; else {Tmp2 = (1 < len_52257); }if (Tmp2) {
if ((token_52255[1] == 64)) {
if ((2 < len_52257)) {
result_52256 = newgetselfword_50419(HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(2, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}
else {
raiseparseexception_49795(makeNimstrLit("Malformed self lookup word, missing at least 1 character"));
}

}
else {
if ((token_52255[1] == 46)) {
if ((2 < len_52257)) {
if ((token_52255[2] == 46)) {
if ((3 < len_52257)) {
result_52256 = newgetouterword_50424(HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(3, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}
else {
raiseparseexception_49795(makeNimstrLit("Malformed parent lookup word, missing at least 1 character"));
}

}
else {
raiseparseexception_49795(makeNimstrLit("Malformed parent lookup word, missing at least a ."));
}

}
else {
raiseparseexception_49795(makeNimstrLit("Malformed parent lookup word, missing at least 2 characters"));
}

}
else {
if (contains_36051(token_52255, makeNimstrLit("::"))) {
result_52256 = newgetmoduleword_50413(HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(1, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}
else {
result_52256 = newgetword_50408(HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(1, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}

}
}
}

if ((first_52258 == 39)) {
if ((len_52257 < 2)) {
raiseparseexception_49795(makeNimstrLit("Malformed literal word, missing at least 1 character"));
}
else {
result_52256 = neworgetlitword_50046(self_52254, HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(1, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}

}

if (!(1 < len_52257)) Tmp3 = false; else {Tmp3 = (token_52255[((token_52255 != null ? token_52255.length-1 : 0) - 1)] == 58); }if (Tmp3) {
if ((self_52254 === null)) {
result_52256 = newevalword_50041(token_52255);
break BeforeRet;
}
else {
if ((currentkeyword_52137(self_52254) === null)) {
push_52229(self_52254, newkeyword_50439());
}

if (inbalance_52057(currentkeyword_52137(self_52254))) {
addkey_52029(currentkeyword_52137(self_52254), token_52255);
}
else {
raiseparseexception_49795(makeNimstrLit("Malformed keyword syntax, expecting an argument"));
}

result_52256 = null;
break BeforeRet;
}

}

if ((first_52258 == 64)) {
if ((1 < len_52257)) {
result_52256 = newevalselfword_50398(HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(1, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}
else {
raiseparseexception_49795(makeNimstrLit("Malformed self eval word, missing at least 1 character"));
}

}
else {
if ((first_52258 == 46)) {
if ((1 < len_52257)) {
if ((token_52255[1] == 46)) {
if ((2 < len_52257)) {
result_52256 = newevalouterword_50403(HEX5BHEX5D_19844(token_52255, HEX2EHEX2E_35261(2, ((token_52255 != null ? token_52255.length-1 : 0) - 1))));
break BeforeRet;
}
else {
raiseparseexception_49795(makeNimstrLit("Malformed parent eval word, missing at least 1 character"));
}

}
else {
raiseparseexception_49795(makeNimstrLit("Malformed parent eval word, missing a ."));
}

}
else {
raiseparseexception_49795(makeNimstrLit("Malformed parent eval word, missing at least 2 characters"));
}

}
else {
if (contains_36051(token_52255, makeNimstrLit("::"))) {
result_52256 = newevalmoduleword_50392(token_52255);
break BeforeRet;
}
else {
result_52256 = newevalword_50041(token_52255);
break BeforeRet;
}

}
}
} while (false); 
return result_52256;
}
function newwordorvalue_52370(self_52372) {

var result_52373 = null;
BeforeRet: do {
var token_52374 = nimCopy(null, self_52372.token, NTI138);
var ws_52375 = nimCopy(null, self_52372.ws, NTI138);
self_52372.token = nimCopy(null, makeNimstrLit(""), NTI138);
self_52372.ws = nimCopy(null, makeNimstrLit(""), NTI138);
L1: do {
var p_52602 = null;
var HEX3Atmp_52623 = null;
HEX3Atmp_52623 = self_52372.valueparsers;
var i_52626 = 0;
var L_52628 = (HEX3Atmp_52623 != null ? HEX3Atmp_52623.length : 0);
L2: do {
L3: while (true) {
if (!(i_52626 < L_52628)) break L3;
p_52602 = HEX3Atmp_52623[i_52626];
var valueornil_52603 = parsevalue_51649(p_52602, token_52374);
if (!((valueornil_52603 === null))) {
valueornil_52603.comment = nimCopy(null, ws_52375, NTI138);
result_52373 = valueornil_52603;
break BeforeRet;
}

i_52626 += 1;
}
} while(false);
} while(false);
result_52373 = newword_52252(self_52372, token_52374);
if (!((result_52373 === null))) {
result_52373.comment = nimCopy(null, ws_52375, NTI138);
}

} while (false); 
return result_52373;
}
function addnode_52188(self_52190) {

self_52190.specialchardetected = false;
if ((0 < (self_52190.token != null ? self_52190.token.length-1 : 0))) {
var node_52632 = newwordorvalue_52370(self_52190);
if (!((node_52632 === null))) {
doaddnode_52206(self_52190, node_52632);
}

}

}
function newparen_50563() {

var result_50565 = null;
result_50565 = {nodes: newseq_50493(0), m_type: NTI48192, commentend: null, comment: null, tags: null};
return result_50565;
}
function newcurly_50601() {

var result_50603 = null;
result_50603 = {nodes: newseq_50493(0), m_type: NTI48194, commentend: null, comment: null, tags: null};
return result_50603;
}
function pop_52146(self_52148) {

var result_52149 = null;
if (!((currentkeyword_52137(self_52148) === null))) {
closekeyword_52143(self_52148);
}

result_52149 = pop_52160(self_52148, "stack");
return result_52149;
}
function parse_52642(self_52644, str_52645) {

var Tmp6;
var Tmp9;
var result_52646 = null;
var ch_52647 = 0;
var currentvalueparser_52648 = null;
var pos_52649 = 0;
self_52644.stack = nimCopy(null, [], NTI52665);
self_52644.token = nimCopy(null, makeNimstrLit(""), NTI138);
self_52644.ws = nimCopy(null, makeNimstrLit(""), NTI138);
var blok_52666 = newblok_50525();
push_52229(self_52644, blok_52666);
L1: do {
L2: while (true) {
if (!(pos_52649 < (str_52645 != null ? str_52645.length-1 : 0))) break L2;
ch_52647 = str_52645[pos_52649];
pos_52649 += 1;
if (!((currentvalueparser_52648 === null))) {
var found_52685 = tokenready_51684(currentvalueparser_52648, self_52644.token, ch_52647);
if (!((found_52685 === null))) {
self_52644.token = nimCopy(null, found_52685, NTI138);
addnode_52188(self_52644);
currentvalueparser_52648 = null;
}
else {
if (self_52644.token != null) { addChar(self_52644.token, ch_52647); } else { self_52644.token = [ch_52647, 0]; };
}

}
else {
if (((currentvalueparser_52648 === null) && (SetConstr(32, 9, 11, 13, 10, 12)[ch_52647] != undefined))) {
addnode_52188(self_52644);
if (self_52644.ws != null) { addChar(self_52644.ws, ch_52647); } else { self_52644.ws = [ch_52647, 0]; };
}
else {
var tokenlen_52705 = ((self_52644.token != null ? self_52644.token.length-1 : 0) + 1);
if (((currentvalueparser_52648 === null) && (tokenlen_52705 < 5))) {
L3: do {
var p_52723 = null;
var HEX3Atmp_52788 = null;
HEX3Atmp_52788 = self_52644.valueparsers;
var i_52791 = 0;
var L_52793 = (HEX3Atmp_52788 != null ? HEX3Atmp_52788.length : 0);
L4: do {
L5: while (true) {
if (!(i_52791 < L_52793)) break L5;
p_52723 = HEX3Atmp_52788[i_52791];
if (!(prefixlength_51673(p_52723) == tokenlen_52705)) Tmp6 = false; else {Tmp6 = tokenstart_51695(p_52723, self_52644.token, ch_52647); }if (Tmp6) {
currentvalueparser_52648 = p_52723;
break L3;
}

i_52791 += 1;
}
} while(false);
} while(false);
}

if ((currentvalueparser_52648 === null)) {
switch (ch_52647) {
case 35: addnode_52188(self_52644);
if (self_52644.ws != null) { addChar(self_52644.ws, 35); } else { self_52644.ws = [35, 0]; };
L7: do {
L8: while (true) {
if (!(pos_52649 < (str_52645 != null ? str_52645.length-1 : 0))) Tmp9 = false; else {Tmp9 = !((str_52645[pos_52649] == 10)); }if (!Tmp9) break L8;
if (self_52644.ws != null) { addChar(self_52644.ws, str_52645[pos_52649]); } else { self_52644.ws = [str_52645[pos_52649], 0]; };
pos_52649 += 1;
}
} while(false);

break;
case 40: var n_52741 = newparen_50563();
n_52741.comment = nimCopy(null, self_52644.ws, NTI138);
self_52644.ws = nimCopy(null, makeNimstrLit(""), NTI138);
addnode_52188(self_52644);
push_52229(self_52644, n_52741);

break;
case 91: var n_52742 = newblok_50525();
n_52742.comment = nimCopy(null, self_52644.ws, NTI138);
self_52644.ws = nimCopy(null, makeNimstrLit(""), NTI138);
addnode_52188(self_52644);
push_52229(self_52644, n_52742);

break;
case 123: var n_52743 = newcurly_50601();
n_52743.comment = nimCopy(null, self_52644.ws, NTI138);
self_52644.ws = nimCopy(null, makeNimstrLit(""), NTI138);
addnode_52188(self_52644);
push_52229(self_52644, n_52743);

break;
case 41: addnode_52188(self_52644);
var n_52744 = pop_52146(self_52644);
n_52744.commentend = nimCopy(null, self_52644.ws, NTI138);
self_52644.ws = nimCopy(null, makeNimstrLit(""), NTI138);

break;
case 93: addnode_52188(self_52644);
var n_52745 = pop_52146(self_52644);
n_52745.commentend = nimCopy(null, self_52644.ws, NTI138);
self_52644.ws = nimCopy(null, makeNimstrLit(""), NTI138);

break;
case 125: addnode_52188(self_52644);
var n_52746 = pop_52146(self_52644);
n_52746.commentend = nimCopy(null, self_52644.ws, NTI138);
self_52644.ws = nimCopy(null, makeNimstrLit(""), NTI138);

break;
default: 
if (self_52644.specialchardetected) {
if ((SetConstr(59, 92, 94, 38, 37, 124, 44, 126)[ch_52647] != undefined)) {
if (self_52644.token != null) { addChar(self_52644.token, ch_52647); } else { self_52644.token = [ch_52647, 0]; };
}
else {
addnode_52188(self_52644);
if (self_52644.token != null) { addChar(self_52644.token, ch_52647); } else { self_52644.token = [ch_52647, 0]; };
}

}
else {
if ((SetConstr(59, 92, 94, 38, 37, 124, 44, 126)[ch_52647] != undefined)) {
addnode_52188(self_52644);
self_52644.specialchardetected = true;
if (self_52644.token != null) { addChar(self_52644.token, ch_52647); } else { self_52644.token = [ch_52647, 0]; };
}
else {
if (self_52644.token != null) { addChar(self_52644.token, ch_52647); } else { self_52644.token = [ch_52647, 0]; };
}

}

break;
}
}
else {
if (self_52644.token != null) { addChar(self_52644.token, ch_52647); } else { self_52644.token = [ch_52647, 0]; };
}

}

}

}
} while(false);
addnode_52188(self_52644);
if (!((currentkeyword_52137(self_52644) === null))) {
closekeyword_52143(self_52644);
}

result_52646 = blok_52666.nodes[((blok_52666.nodes != null ? blok_52666.nodes.length : 0) - 1)];
return result_52646;
}
function eval_54198(spry_54200, code_54201) {

var result_54202 = null;
result_54202 = evaldo_52932(parse_52642(spry_54200.parser, code_54201), spry_54200);
return result_54202;
}
function inittable_49816(initialsize_49821) {

var result_49823 = {data: null, counter: 0};
result_49823.counter = 0;
result_49823.data = new Array(initialsize_49821); for (var i=0;i<initialsize_49821;++i) {result_49823.data[i]={Field0: 0, Field1: null, Field2: null};}return result_49823;
}
function newmap_49812() {

var result_49814 = null;
result_49814 = {bindings: inittable_49816(64), m_type: NTI48199, commentend: null, comment: null, tags: null};
return result_49814;
}
function newseq_51759(len_51763) {

var result_51765 = null;
result_51765 = new Array(len_51763); for (var i=0;i<len_51763;++i) {result_51765[i]=null;}return result_51765;
}
function inittable_51785(initialsize_51790) {

var result_51792 = {data: null, counter: 0};
result_51792.counter = 0;
result_51792.data = new Array(initialsize_51790); for (var i=0;i<initialsize_51790;++i) {result_51792.data[i]={Field0: 0, Field1: null, Field2: null};}return result_51792;
}
function newparser_51715() {

var result_51717 = null;
result_51717 = {stack: newseq_50493(0), valueparsers: newseq_51759(0), litwords: inittable_51785(64), token: null, specialchardetected: false, ws: null};
if (result_51717.valueparsers != null) { result_51717.valueparsers.push({m_type: NTI48121, token: null}); } else { result_51717.valueparsers = [{m_type: NTI48121, token: null}]; };
if (result_51717.valueparsers != null) { result_51717.valueparsers.push({m_type: NTI48117, token: null}); } else { result_51717.valueparsers = [{m_type: NTI48117, token: null}]; };
if (result_51717.valueparsers != null) { result_51717.valueparsers.push({m_type: NTI48119, token: null}); } else { result_51717.valueparsers = [{m_type: NTI48119, token: null}]; };
L1: do {
var ex_52002 = null;
var i_52010 = 0;
var L_52012 = (parserexts_48421[0] != null ? parserexts_48421[0].length : 0);
L2: do {
L3: while (true) {
if (!(i_52010 < L_52012)) break L3;
ex_52002 = parserexts_48421[0][i_52010];
ex_52002(result_51717);
i_52010 += 1;
}
} while(false);
} while(false);
return result_51717;
}
function newvalue_50648(v_50650) {

var Tmp1;
var result_50651 = null;
if (v_50650) {
Tmp1 = {m_type: NTI48177, comment: null, tags: null};
}
else {
Tmp1 = {m_type: NTI48179, comment: null, tags: null};
}

result_50651 = Tmp1;
return result_50651;
}
function newnilval_50655() {

var result_50657 = null;
result_50657 = {m_type: NTI48183, comment: null, tags: null};
return result_50657;
}
function newundefval_50659() {

var result_50661 = null;
result_50661 = {m_type: NTI48181, comment: null, tags: null};
return result_50661;
}
function rawget_49308(t_49313, key_49315, hc_49317, hc_49317_Idx) {

var Tmp3;
var result_49318 = 0;
BeforeRet: do {
hc_49317[hc_49317_Idx] = hash_48979(key_49315);
if ((hc_49317[hc_49317_Idx] == 0)) {
hc_49317[hc_49317_Idx] = 314159265;
}

var h_49320 = (hc_49317[hc_49317_Idx] & (t_49313.data != null ? (t_49313.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_44263(t_49313.data[h_49320].Field0)) break L2;
if (!(t_49313.data[h_49320].Field0 == hc_49317[hc_49317_Idx])) Tmp3 = false; else {Tmp3 = HEX3DHEX3D_48989(t_49313.data[h_49320].Field1, key_49315); }if (Tmp3) {
result_49318 = h_49320;
break BeforeRet;
}

h_49320 = nexttry_44401(h_49320, (t_49313.data != null ? (t_49313.data.length-1) : -1));
}
} while(false);
result_49318 = (-1 - h_49320);
} while (false); 
return result_49318;
}
function haskey_49331(t_49337, key_49339) {

var result_49340 = false;
var hc_49341 = [0];
result_49340 = (0 <= rawget_49308(t_49337, key_49339, hc_49341, 0));
return result_49340;
}
function HEX5BHEX5D_49357(t_49364, key_49366) {

var result_49368 = [null, 0];
var hc_49370 = [0];
var index_49372 = rawget_49308(t_49364, key_49366, hc_49370, 0);
if ((0 <= index_49372)) {
result_49368 = t_49364.data[index_49372]; result_49368_Idx = "Field2";
}
else {
var e_49403 = null;
e_49403 = {m_type: NTI3248, parent: null, name: null, message: null, trace: null};
e_49403.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(HEX24_48604(key_49366)), NTI138);
raiseException(e_49403, "KeyError");
}

return [result_49368, result_49368_Idx];
}
function default_49445() {

var result_49451 = null;
return result_49451;
}
function default_49454() {

var result_49460 = null;
return result_49460;
}
function isempty_44259(hcode_44261) {

var result_44262 = false;
result_44262 = (hcode_44261 == 0);
return result_44262;
}
function del_49417(t_49424, key_49426) {

var Tmp6;
var Tmp7;
var Tmp8;
var Tmp9;
var Tmp10;
var hc_49427 = [0];
var i_49441 = rawget_49308(t_49424, key_49426, hc_49427, 0);
var msk_49442 = (t_49424.data != null ? (t_49424.data.length-1) : -1);
if ((0 <= i_49441)) {
t_49424.data[i_49441].Field0 = 0;
t_49424.data[i_49441].Field1 = default_49445();
t_49424.data[i_49441].Field2 = default_49454();
t_49424.counter -= 1;
L1: do {
L2: do {
L3: while (true) {
if (!true) break L3;
var j_49471 = i_49441;
var r_49472 = j_49471;
t_49424.data[i_49441].Field0 = 0;
t_49424.data[i_49441].Field1 = default_49445();
t_49424.data[i_49441].Field2 = default_49454();
L4: do {
L5: while (true) {
if (!true) break L5;
i_49441 = ((i_49441 + 1) & msk_49442);
if (isempty_44259(t_49424.data[i_49441].Field0)) {
break L1;
}

r_49472 = (t_49424.data[i_49441].Field0 & msk_49442);
if (!(r_49472 <= i_49441)) Tmp8 = false; else {Tmp8 = (j_49471 < r_49472); }if (Tmp8) Tmp7 = true; else {if (!(j_49471 < r_49472)) Tmp9 = false; else {Tmp9 = (i_49441 < j_49471); }Tmp7 = Tmp9; }if (Tmp7) Tmp6 = true; else {if (!(i_49441 < j_49471)) Tmp10 = false; else {Tmp10 = (r_49472 <= i_49441); }Tmp6 = Tmp10; }if (!(Tmp6)) {
break L4;
}

}
} while(false);
nimCopy(t_49424.data[j_49471], t_49424.data[i_49441], NTI48211);
}
} while(false);
} while(false);
}

}
function removebinding_49325(self_49327, key_49328) {

var Tmp1;
var result_49329 = null;
if (haskey_49331(self_49327.bindings, key_49328)) {
result_49329 = (Tmp1 = HEX5BHEX5D_49357(self_49327.bindings, key_49328), Tmp1[0][Tmp1[1]]);
del_49417(self_49327.bindings, key_49328);
}

return result_49329;
}
function rawgetknownhc_49702(t_49707, key_49709, hc_49711) {

var result_49712 = 0;
BeforeRet: do {
var h_49713 = (hc_49711 & (t_49707.data != null ? (t_49707.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_44263(t_49707.data[h_49713].Field0)) break L2;
if (((t_49707.data[h_49713].Field0 == hc_49711) && HEX3DHEX3D_48989(t_49707.data[h_49713].Field1, key_49709))) {
result_49712 = h_49713;
break BeforeRet;
}

h_49713 = nexttry_44401(h_49713, (t_49707.data != null ? (t_49707.data.length-1) : -1));
}
} while(false);
result_49712 = (-1 - h_49713);
} while (false); 
return result_49712;
}
function rawinsert_49718(t_49725, data_49729, data_49729_Idx, key_49731, val_49733, hc_49735, h_49737) {

data_49729[data_49729_Idx][h_49737].Field1 = key_49731;
data_49729[data_49729_Idx][h_49737].Field2 = val_49733;
data_49729[data_49729_Idx][h_49737].Field0 = hc_49735;
}
function enlarge_49649(t_49656) {

var n_49660 = null;
n_49660 = new Array(((t_49656.data != null ? t_49656.data.length : 0) * 2)); for (var i=0;i<((t_49656.data != null ? t_49656.data.length : 0) * 2);++i) {n_49660[i]={Field0: 0, Field1: null, Field2: null};}var Tmp1 = t_49656.data; t_49656.data = n_49660; n_49660 = Tmp1;L2: do {
var i_49700 = 0;
var HEX3Atmp_49741 = 0;
HEX3Atmp_49741 = (n_49660 != null ? (n_49660.length-1) : -1);
var res_49744 = 0;
L3: do {
L4: while (true) {
if (!(res_49744 <= HEX3Atmp_49741)) break L4;
i_49700 = res_49744;
if (isfilled_44263(n_49660[i_49700].Field0)) {
var j_49716 = (-1 - rawgetknownhc_49702(t_49656, n_49660[i_49700].Field1, n_49660[i_49700].Field0));
rawinsert_49718(t_49656, t_49656, "data", n_49660[i_49700].Field1, n_49660[i_49700].Field2, n_49660[i_49700].Field0, j_49716);
}

res_49744 += 1;
}
} while(false);
} while(false);
}
function HEX5BHEX5DHEX3D_49613(t_49620, key_49622, val_49624) {

var hc_49625 = [0];
var index_49639 = rawget_49308(t_49620, key_49622, hc_49625, 0);
if ((0 <= index_49639)) {
t_49620.data[index_49639].Field2 = val_49624;
}
else {
if (mustrehash_44268((t_49620.data != null ? t_49620.data.length : 0), t_49620.counter)) {
enlarge_49649(t_49620);
index_49639 = rawgetknownhc_49702(t_49620, key_49622, hc_49625[0]);
}

index_49639 = (-1 - index_49639);
rawinsert_49718(t_49620, t_49620, "data", key_49622, val_49624, hc_49625[0], index_49639);
t_49620.counter += 1;
}

}
function makebinding_49605(self_49607, key_49608, val_49609) {

var result_49610 = null;
BeforeRet: do {
if (isObj(val_49609.m_type, NTI48181)) {
result_49610 = removebinding_49325(self_49607, key_49608);
break BeforeRet;
}

result_49610 = {key: key_49608, val: val_49609, m_type: NTI48225, comment: null, tags: null};
HEX5BHEX5DHEX3D_49613(self_49607.bindings, key_49608, result_49610);
} while (false); 
return result_49610;
}
function makeword_53864(self_53866, word_53867, value_53868) {

makebinding_49605(self_53866.root, newevalword_50041(word_53867), value_53868);
}
function newnimproc_53032(prok_53034, infix_53035) {

var result_53036 = null;
result_53036 = {prok: prok_53034, infix: infix_53035, m_type: NTI52834, comment: null, tags: null};
return result_53036;
}
function argparent_53613(spry_53615) {

var result_53616 = null;
BeforeRet: do {
L1: do {
var activation_53617 = null;
var HEX3Atmp_53619 = null;
HEX3Atmp_53619 = spry_53615.currentactivation;
var activation_53624 = HEX3Atmp_53619;
L2: do {
L3: while (true) {
if (!!(haslocals_53102(activation_53624))) break L3;
activation_53624 = activation_53624.parent;
}
} while(false);
activation_53624 = activation_53624.parent;
L4: do {
L5: while (true) {
if (!!((activation_53624 === null))) break L5;
activation_53617 = activation_53624;
result_53616 = activation_53617;
break BeforeRet;
activation_53624 = activation_53624.parent;
L6: do {
L7: while (true) {
if (!!(haslocals_53102(activation_53624))) break L7;
activation_53624 = activation_53624.parent;
}
} while(false);
}
} while(false);
} while(false);
} while (false); 
return result_53616;
}
function self_53836(spry_53838) {

var result_53839 = null;
if ((spry_53838.currentactivation.self === null)) {
spry_53838.currentactivation.self = spry_53838.undefval;
}

result_53839 = spry_53838.currentactivation.self;
return result_53839;
}
function len_53020(self_53022) {

var result_53023 = 0;
result_53023 = (self_53022.body.nodes != null ? self_53022.body.nodes.length : 0);
return result_53023;
}
function atend_53436(self_53438) {

var result_53439 = false;
result_53439 = (self_53438.pos == len_53020(self_53438));
return result_53439;
}
function raiseruntimeexception_48333(msg_48335) {

var e_48339 = null;
e_48339 = {m_type: NTI48080, parent: null, name: null, message: null, trace: null};
e_48339.message = nimCopy(null, msg_48335, NTI138);
raiseException(e_48339, "RuntimeException");
}
function HEX5BHEX5D_53015(self_53017, i_53018) {

var result_53019 = null;
result_53019 = self_53017.body.nodes[i_53018];
return result_53019;
}
function next_53440(self_53442) {

var result_53443 = null;
if (atend_53436(self_53442)) {
raiseruntimeexception_48333(makeNimstrLit("End of current block, too few arguments?"));
}
else {
result_53443 = HEX5BHEX5D_53015(self_53442, self_53442.pos);
self_53442.pos += 1;
}

return result_53443;
}
function evalarg_53860(spry_53862) {

var result_53863 = null;
result_53863 = eval_52925(next_53440(spry_53862.currentactivation), spry_53862);
return result_53863;
}
function litify_54234(spry_54236, word_54237) {

var result_54238 = null;
result_54238 = neworgetlitword_50046(spry_54236.parser, HEX24_48604(word_54237));
return result_54238;
}
function boolval_53869(val_53871, spry_53872) {

var result_53873 = null;
if (val_53871) {
result_53873 = spry_53872.trueval;
}
else {
result_53873 = spry_53872.falseval;
}

return result_53873;
}
function find_50755(a_50760, item_50762) {

var result_50763 = 0;
BeforeRet: do {
L1: do {
var i_50771 = null;
var i_50784 = 0;
L2: do {
L3: while (true) {
if (!(i_50784 < (a_50760 != null ? a_50760.length : 0))) break L3;
i_50771 = a_50760[i_50784];
if (HEX3DHEX3D_48989(i_50771, item_50762)) {
break BeforeRet;
}

result_50763 += 1;
i_50784 += 1;
}
} while(false);
} while(false);
result_50763 = -1;
} while (false); 
return result_50763;
}
function contains_50745(a_50750, item_50752) {

var result_50753 = false;
BeforeRet: do {
result_50753 = (0 <= find_50755(a_50750, item_50752));
break BeforeRet;
} while (false); 
return result_50753;
}
function contains_50738(self_50740, n_50741) {

var result_50742 = false;
result_50742 = contains_50745(self_50740.nodes, n_50741);
return result_50742;
}
function assign_53820(spry_53822, word_53823, val_53824) {

makebindinginmap_53708(spry_53822, word_53823, val_53824);
}
function arginfix_53825(spry_53827) {

var result_53828 = null;
result_53828 = spry_53827.currentactivation.last;
spry_53827.lastself = result_53828;
return result_53828;
}
function getordefault_49293(t_49299, key_49301) {

var result_49302 = null;
var hc_49304 = [0];
var index_49306 = rawget_49308(t_49299, key_49301, hc_49304, 0);
if ((0 <= index_49306)) {
result_49302 = t_49299.data[index_49306].Field2;
}

return result_49302;
}
function lookup_49287(self_49289, key_49290) {

var result_49291 = null;
result_49291 = getordefault_49293(self_49289.bindings, key_49290);
return result_49291;
}
function lookup_53521(spry_53523, key_53524) {

var result_53525 = null;
BeforeRet: do {
if (isObj(key_53524.m_type, NTI48138)) {
var binding_53527 = lookup_53521(spry_53523, key_53524.module);
if (!((binding_53527 === null))) {
var module_53537 = binding_53527.val;
if (!((module_53537 === null))) {
result_53525 = lookup_49287(module_53537, key_53524);
}

}

}
else {
if (isObj(key_53524.m_type, NTI48149)) {
var binding_53548 = lookup_53521(spry_53523, key_53524.module);
if (!((binding_53548 === null))) {
var module_53558 = binding_53548.val;
if (!((module_53558 === null))) {
result_53525 = lookup_49287(module_53558, key_53524);
}

}

}
else {
L1: do {
var activation_53568 = null;
var HEX3Atmp_53601 = null;
HEX3Atmp_53601 = spry_53523.currentactivation;
var activation_53605 = HEX3Atmp_53601;
L2: do {
L3: while (true) {
if (!!((activation_53605 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(haslocals_53102(activation_53605))) break L5;
activation_53605 = outer_53115(activation_53605);
}
} while(false);
activation_53568 = activation_53605;
var hit_53569 = lookup_53503(activation_53568, key_53524);
if (!((hit_53569 === null))) {
result_53525 = hit_53569;
break BeforeRet;
}

activation_53605 = outer_53115(activation_53605);
}
} while(false);
} while(false);
L6: do {
var map_53587 = null;
var HEX3Atmp_53607 = null;
HEX3Atmp_53607 = spry_53523.modules.nodes;
var i_53610 = 0;
var L_53612 = (HEX3Atmp_53607 != null ? HEX3Atmp_53607.length : 0);
L7: do {
L8: while (true) {
if (!(i_53610 < L_53612)) break L8;
map_53587 = HEX3Atmp_53607[i_53610];
var hit_53588 = lookup_49287(map_53587, key_53524);
if (!((hit_53588 === null))) {
result_53525 = hit_53588;
break BeforeRet;
}

i_53610 += 1;
}
} while(false);
} while(false);
}
}
} while (false); 
return result_53525;
}
function arg_53829(spry_53831) {

var result_53832 = null;
result_53832 = next_53440(spry_53831.currentactivation);
return result_53832;
}
function newvalue_50643(v_50645) {

var result_50646 = null;
result_50646 = {value: v_50645, m_type: NTI48172, comment: null, tags: null};
return result_50646;
}
function newvalue_50638(v_50640) {

var result_50641 = null;
result_50641 = {value: v_50640, m_type: NTI48169, comment: null, tags: null};
return result_50641;
}
function newvalue_50633(v_50635) {

var result_50636 = null;
result_50636 = {value: v_50635, m_type: NTI48166, comment: null, tags: null};
return result_50636;
}
function len_54533(t_54539) {

var result_54540 = 0;
result_54540 = t_54539.counter;
return result_54540;
}
function HEX5BHEX5D_52980(self_52982, key_52983) {

var result_52984 = null;
result_52984 = self_52982.nodes[key_52983.value];
return result_52984;
}
function HEX5BHEX5D_52950(self_52952, key_52953) {

var Tmp1;
var result_52954 = null;
BeforeRet: do {
if (haskey_49331(self_52952.bindings, key_52953)) {
result_52954 = (Tmp1 = HEX5BHEX5D_49357(self_52952.bindings, key_52953), Tmp1[0][Tmp1[1]]).val;
break BeforeRet;
}

} while (false); 
return result_52954;
}
function HEX5BHEX5DHEX3D_53000(self_53002, key_53003, val_53004) {

self_53002.nodes[key_53003.value] = val_53004;
}
function HEX5BHEX5DHEX3D_52995(self_52997, key_52998, val_52999) {

makebinding_49605(self_52997, key_52998, val_52999);
}
function contains_50791(t_50797, key_50799) {

var result_50800 = false;
BeforeRet: do {
result_50800 = haskey_49331(t_50797, key_50799);
break BeforeRet;
} while (false); 
return result_50800;
}
function contains_50785(self_50787, n_50788) {

var result_50789 = false;
result_50789 = contains_50791(self_50787.bindings, n_50788);
return result_50789;
}
function newblok_50519(nodes_50522) {

var result_50523 = null;
result_50523 = {nodes: nodes_50522, m_type: NTI48196, pos: 0, commentend: null, comment: null, tags: null};
return result_50523;
}
function HEX5BHEX5D_54645(s_54650, x_54653) {

var result_54655 = null;
var a_54656 = x_54653.a;
var L_54657 = ((x_54653.b - a_54656) + 1);
result_54655 = new Array(L_54657); for (var i=0;i<L_54657;++i) {result_54655[i]=null;}L1: do {
var i_54685 = 0;
var HEX3Atmp_54687 = 0;
HEX3Atmp_54687 = L_54657 - 1;
var res_54690 = 0;
L2: do {
L3: while (true) {
if (!(res_54690 <= HEX3Atmp_54687)) break L3;
i_54685 = res_54690;
result_54655[i_54685] = s_54650[(i_54685 + a_54656)];
res_54690 += 1;
}
} while(false);
} while(false);
return result_54655;
}
function newparen_50557(nodes_50560) {

var result_50561 = null;
result_50561 = {nodes: nodes_50560, m_type: NTI48192, commentend: null, comment: null, tags: null};
return result_50561;
}
function newcurly_50595(nodes_50598) {

var result_50599 = null;
result_50599 = {nodes: nodes_50598, m_type: NTI48194, commentend: null, comment: null, tags: null};
return result_50599;
}
function HEX5BHEX5D_52990(self_52992, key_52993) {

var result_52994 = null;
result_52994 = self_52992.nodes[key_52993];
return result_52994;
}
function HEX5BHEX5DHEX3D_53010(self_53012, key_53013, val_53014) {

self_53012.nodes[key_53013] = val_53014;
}
function newactivation_53060(body_53062) {

var result_53063 = null;
result_53063 = {body: body_53062, m_type: NTI52851, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, comment: null, tags: null};
return result_53063;
}
function eval_54110(current_54112, spry_54113) {

var Tmp1;
var result_54114 = null;
BeforeRet: do {
current_54112.parent = spry_54113.currentactivation;
if (!(current_54112.self === null)) Tmp1 = false; else {Tmp1 = !((current_54112.parent === null)); }if (Tmp1) {
current_54112.self = current_54112.parent.self;
}

spry_54113.currentactivation = current_54112;
L2: do {
L3: while (true) {
if (!!(atend_53436(current_54112))) break L3;
var next_54132 = next_53440(current_54112);
if (caneval_53903(next_54132, spry_54113)) {
current_54112.last = eval_52925(next_54132, spry_54113);
if (current_54112.returned) {
doreturn_53467(spry_54113.currentactivation, spry_54113);
result_54114 = current_54112.last;
break BeforeRet;
}

}
else {
current_54112.last = next_54132;
}

}
} while(false);
if (isObj(current_54112.last.m_type, NTI48225)) {
current_54112.last = current_54112.last.val;
}

spry_54113.lastself = spry_54113.currentactivation.self;
spry_54113.currentactivation = spry_54113.currentactivation.parent;
result_54114 = current_54112.last;
break BeforeRet;
} while (false); 
return result_54114;
}
function reset_53094(self_53096) {

self_53096.returned = false;
self_53096.pos = 0;
}
function newfunk_53038(body_53040, parent_53041) {

var result_53042 = null;
result_53042 = {nodes: body_53040.nodes, parent: parent_53041, m_type: NTI52838, pos: 0, commentend: null, comment: null, tags: null};
return result_53042;
}
function funk_52908(spry_52910, body_52911) {

var result_53891 = null;
result_53891 = newfunk_53038(body_52911, spry_52910.currentactivation);
return result_53891;
}
function newmeth_53044(body_53046, parent_53047) {

var result_53048 = null;
result_53048 = {nodes: body_53046.nodes, parent: parent_53047, m_type: NTI52841, pos: 0, commentend: null, comment: null, tags: null};
return result_53048;
}
function meth_52912(spry_52914, body_52915) {

var result_53896 = null;
result_53896 = newmeth_53044(body_52915, spry_52914.currentactivation);
return result_53896;
}
function reify_53874(word_53876) {

var result_53877 = null;
result_53877 = newword_52252(null, word_53876.word);
return result_53877;
}
function newrootactivation_53050(root_53052) {

var result_53053 = null;
result_53053 = {body: newblok_50525(), locals: root_53052, m_type: NTI52860, last: null, self: null, returned: false, parent: null, pos: 0, comment: null, tags: null};
return result_53053;
}
function evalrootdo_54203(self_54205, spry_54206) {

var Tmp1;
var result_54207 = null;
spry_54206.lastself = spry_54206.currentactivation.self;
spry_54206.currentactivation = spry_54206.currentactivation.parent;
spry_54206.rootactivation.body = self_54205;
spry_54206.rootactivation.pos = 0;
result_54207 = eval_54110(spry_54206.rootactivation, spry_54206);
spry_54206.rootactivation.parent = spry_54206.currentactivation;
if (!(spry_54206.rootactivation.self === null)) Tmp1 = false; else {Tmp1 = !((spry_54206.rootactivation.parent === null)); }if (Tmp1) {
spry_54206.rootactivation.self = spry_54206.rootactivation.parent.self;
}

spry_54206.currentactivation = spry_54206.rootactivation;
return result_54207;
}
function evalroot_52916(spry_52918, code_52919) {

var result_54229 = null;
result_54229 = evalrootdo_54203(parse_52642(spry_52918.parser, code_52919), spry_52918);
return result_54229;
}
function newinterpreter_54239() {

function HEX3Aanonymous_54243(spry_54245) {

var result_54246 = null;
result_54246 = spry_54245.root;
return result_54246;
}
function HEX3Aanonymous_54247(spry_54249) {

var result_54250 = null;
result_54250 = spry_54249.currentactivation;
return result_54250;
}
function HEX3Aanonymous_54251(spry_54253) {

var result_54254 = null;
BeforeRet: do {
L1: do {
var activation_54255 = null;
var HEX3Atmp_54265 = null;
HEX3Atmp_54265 = spry_54253.currentactivation;
var activation_54269 = HEX3Atmp_54265;
L2: do {
L3: while (true) {
if (!!((activation_54269 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(haslocals_53102(activation_54269))) break L5;
activation_54269 = outer_53115(activation_54269);
}
} while(false);
activation_54255 = activation_54269;
if ((activation_54255.locals === null)) {
activation_54255.locals = newmap_49812();
}

result_54254 = activation_54255.locals;
break BeforeRet;
activation_54269 = outer_53115(activation_54269);
}
} while(false);
} while(false);
} while (false); 
return result_54254;
}
function HEX3Aanonymous_54270(spry_54272) {

var result_54273 = null;
var act_54274 = argparent_53613(spry_54272);
if (!((act_54274 === null))) {
result_54273 = act_54274.last;
if ((result_54273 === null)) {
spry_54272.currentactivation.self = spry_54272.nilval;
result_54273 = spry_54272.nilval;
}

}

return result_54273;
}
function HEX3Aanonymous_54292(spry_54294) {

var result_54295 = null;
result_54295 = self_53836(spry_54294);
return result_54295;
}
function HEX3Aanonymous_54296(spry_54298) {

var result_54299 = null;
result_54299 = spry_54298.lastself;
if ((result_54299 === null)) {
result_54299 = spry_54298.nilval;
}

return result_54299;
}
function HEX3Aanonymous_54308(spry_54310) {

var result_54311 = null;
spry_54310.lastself = spry_54310.currentactivation.last;
result_54311 = eval_52925(spry_54310.lastself, spry_54310);
var tag_54312 = evalarg_53860(spry_54310);
if ((result_54311.tags === null)) {
result_54311.tags = newblok_50525();
}

if (isObj(tag_54312.m_type, NTI48134)) {
add_50663(result_54311.tags, tag_54312);
}
else {
add_50663(result_54311.tags, litify_54234(spry_54310, tag_54312));
}

return result_54311;
}
function HEX3Aanonymous_54323(spry_54325) {

var result_54326 = null;
BeforeRet: do {
spry_54325.lastself = spry_54325.currentactivation.last;
var node_54327 = eval_52925(spry_54325.lastself, spry_54325);
var tag_54328 = evalarg_53860(spry_54325);
if ((node_54327.tags === null)) {
result_54326 = spry_54325.falseval;
break BeforeRet;
}

if (isObj(tag_54328.m_type, NTI48134)) {
result_54326 = boolval_53869(contains_50738(node_54327.tags, tag_54328), spry_54325);
break BeforeRet;
}
else {
result_54326 = boolval_53869(contains_50738(node_54327.tags, litify_54234(spry_54325, tag_54328)), spry_54325);
break BeforeRet;
}

} while (false); 
return result_54326;
}
function HEX3Aanonymous_54339(spry_54341) {

var result_54342 = null;
BeforeRet: do {
spry_54341.lastself = spry_54341.currentactivation.last;
var node_54343 = eval_52925(spry_54341.lastself, spry_54341);
if ((node_54343.tags === null)) {
result_54342 = spry_54341.emptyblok;
break BeforeRet;
}

result_54342 = node_54343.tags;
break BeforeRet;
} while (false); 
return result_54342;
}
function HEX3Aanonymous_54352(spry_54354) {

var result_54355 = null;
spry_54354.lastself = spry_54354.currentactivation.last;
result_54355 = eval_52925(spry_54354.lastself, spry_54354);
result_54355.tags = evalarg_53860(spry_54354);
return result_54355;
}
function HEX3Aanonymous_54356(spry_54358) {

var result_54359 = null;
result_54359 = evalarg_53860(spry_54358);
assign_53820(spry_54358, arginfix_53825(spry_54358), result_54359);
return result_54359;
}
function HEX3Aanonymous_54360(spry_54362) {

var result_54363 = null;
result_54363 = evalarg_53860(spry_54362);
spry_54362.lastself = spry_54362.currentactivation.last;
assign_53820(spry_54362, eval_52925(spry_54362.lastself, spry_54362), result_54363);
return result_54363;
}
function HEX3Aanonymous_54364(spry_54366) {

var result_54367 = null;
BeforeRet: do {
var binding_54368 = lookup_53521(spry_54366, arg_53829(spry_54366));
if ((binding_54368 === null)) {
result_54367 = spry_54366.falseval;
break BeforeRet;
}

result_54367 = spry_54366.trueval;
break BeforeRet;
} while (false); 
return result_54367;
}
function HEX3Aanonymous_54377(spry_54379) {

var result_54380 = null;
spry_54379.lastself = spry_54379.currentactivation.last;
result_54380 = newvalue_50648(!(isObj(eval_52925(spry_54379.lastself, spry_54379).m_type, NTI48181)));
return result_54380;
}
function HEX3Aanonymous_54383(spry_54385) {

var result_54386 = null;
spry_54385.lastself = spry_54385.currentactivation.last;
result_54386 = HEX2B_53160(eval_52925(spry_54385.lastself, spry_54385), evalarg_53860(spry_54385));
return result_54386;
}
function HEX3Aanonymous_54387(spry_54389) {

var result_54390 = null;
spry_54389.lastself = spry_54389.currentactivation.last;
result_54390 = HEX2D_53192(eval_52925(spry_54389.lastself, spry_54389), evalarg_53860(spry_54389));
return result_54390;
}
function HEX3Aanonymous_54391(spry_54393) {

var result_54394 = null;
spry_54393.lastself = spry_54393.currentactivation.last;
result_54394 = HEX2A_53224(eval_52925(spry_54393.lastself, spry_54393), evalarg_53860(spry_54393));
return result_54394;
}
function HEX3Aanonymous_54395(spry_54397) {

var result_54398 = null;
spry_54397.lastself = spry_54397.currentactivation.last;
result_54398 = HEX2F_53256(eval_52925(spry_54397.lastself, spry_54397), evalarg_53860(spry_54397));
return result_54398;
}
function HEX3Aanonymous_54399(spry_54401) {

var result_54402 = null;
spry_54401.lastself = spry_54401.currentactivation.last;
result_54402 = HEX3C_53288(eval_52925(spry_54401.lastself, spry_54401), evalarg_53860(spry_54401));
return result_54402;
}
function HEX3Aanonymous_54403(spry_54405) {

var result_54406 = null;
spry_54405.lastself = spry_54405.currentactivation.last;
result_54406 = HEX3C_53288(evalarg_53860(spry_54405), eval_52925(spry_54405.lastself, spry_54405));
return result_54406;
}
function HEX3Aanonymous_54407(spry_54409) {

var result_54410 = null;
spry_54409.lastself = spry_54409.currentactivation.last;
result_54410 = HEX3CHEX3D_53325(eval_52925(spry_54409.lastself, spry_54409), evalarg_53860(spry_54409));
return result_54410;
}
function HEX3Aanonymous_54411(spry_54413) {

var result_54414 = null;
spry_54413.lastself = spry_54413.currentactivation.last;
result_54414 = HEX3CHEX3D_53325(evalarg_53860(spry_54413), eval_52925(spry_54413.lastself, spry_54413));
return result_54414;
}
function HEX3Aanonymous_54415(spry_54417) {

var result_54418 = null;
spry_54417.lastself = spry_54417.currentactivation.last;
result_54418 = eq_53362(eval_52925(spry_54417.lastself, spry_54417), evalarg_53860(spry_54417));
return result_54418;
}
function HEX3Aanonymous_54419(spry_54421) {

var result_54422 = null;
spry_54421.lastself = spry_54421.currentactivation.last;
result_54422 = newvalue_50648((eval_52925(spry_54421.lastself, spry_54421) == evalarg_53860(spry_54421)));
return result_54422;
}
function HEX3Aanonymous_54434(spry_54436) {

var result_54437 = null;
spry_54436.lastself = spry_54436.currentactivation.last;
result_54437 = newvalue_50648(!(value_49054(eq_53362(eval_52925(spry_54436.lastself, spry_54436), evalarg_53860(spry_54436)))));
return result_54437;
}
function HEX3Aanonymous_54438(spry_54440) {

var result_54441 = null;
spry_54440.lastself = spry_54440.currentactivation.last;
result_54441 = newvalue_50648(!((eval_52925(spry_54440.lastself, spry_54440) == evalarg_53860(spry_54440))));
return result_54441;
}
function HEX3Aanonymous_54453(spry_54455) {

var result_54456 = null;
spry_54455.lastself = spry_54455.currentactivation.last;
result_54456 = newvalue_50648(!(value_49054(eval_52925(spry_54455.lastself, spry_54455))));
return result_54456;
}
function HEX3Aanonymous_54457(spry_54459) {

var Tmp1;
var result_54460 = null;
spry_54459.lastself = spry_54459.currentactivation.last;
var arg1_54461 = value_49054(eval_52925(spry_54459.lastself, spry_54459));
var arg2_54462 = arg_53829(spry_54459);
if (!arg1_54461) Tmp1 = false; else {Tmp1 = value_49054(eval_52925(arg2_54462, spry_54459)); }result_54460 = newvalue_50648(Tmp1);
return result_54460;
}
function HEX3Aanonymous_54463(spry_54465) {

var Tmp1;
var result_54466 = null;
spry_54465.lastself = spry_54465.currentactivation.last;
var arg1_54467 = value_49054(eval_52925(spry_54465.lastself, spry_54465));
var arg2_54468 = arg_53829(spry_54465);
if (arg1_54467) Tmp1 = true; else {Tmp1 = value_49054(eval_52925(arg2_54468, spry_54465)); }result_54466 = newvalue_50648(Tmp1);
return result_54466;
}
function HEX3Aanonymous_54469(spry_54471) {

var result_54472 = null;
BeforeRet: do {
spry_54471.lastself = spry_54471.currentactivation.last;
var val_54473 = eval_52925(spry_54471.lastself, spry_54471);
if (isObj(val_54473.m_type, NTI48172)) {
result_54472 = HEX26_53411(val_54473, evalarg_53860(spry_54471));
break BeforeRet;
}
else {
if (isObj(val_54473.m_type, NTI48196)) {
result_54472 = concat_50819(val_54473, evalarg_53860(spry_54471).nodes);
break BeforeRet;
}
else {
if (isObj(val_54473.m_type, NTI48192)) {
result_54472 = concat_50819(val_54473, evalarg_53860(spry_54471).nodes);
break BeforeRet;
}
else {
if (isObj(val_54473.m_type, NTI48194)) {
result_54472 = concat_50819(val_54473, evalarg_53860(spry_54471).nodes);
break BeforeRet;
}
}}}
} while (false); 
return result_54472;
}
function HEX3Aanonymous_54482(spry_54484) {

var result_54485 = null;
spry_54484.lastself = spry_54484.currentactivation.last;
result_54485 = newvalue_50643(print_49245(eval_52925(spry_54484.lastself, spry_54484)));
return result_54485;
}
function HEX3Aanonymous_54486(spry_54488) {

var result_54489 = null;
spry_54488.lastself = spry_54488.currentactivation.last;
result_54489 = newvalue_50643(commented_48613(eval_52925(spry_54488.lastself, spry_54488)));
return result_54489;
}
function HEX3Aanonymous_54490(spry_54492) {

var result_54493 = null;
BeforeRet: do {
spry_54492.lastself = spry_54492.currentactivation.last;
var val_54494 = eval_52925(spry_54492.lastself, spry_54492);
if (isObj(val_54494.m_type, NTI48169)) {
result_54493 = val_54494;
break BeforeRet;
}
else {
if (isObj(val_54494.m_type, NTI48166)) {
result_54493 = newvalue_50638(val_54494.value);
break BeforeRet;
}
else {
raiseruntimeexception_48333(makeNimstrLit("Can not convert to float"));
}
}
} while (false); 
return result_54493;
}
function HEX3Aanonymous_54499(spry_54501) {

var result_54502 = null;
BeforeRet: do {
spry_54501.lastself = spry_54501.currentactivation.last;
var val_54503 = eval_52925(spry_54501.lastself, spry_54501);
if (isObj(val_54503.m_type, NTI48166)) {
result_54502 = val_54503;
break BeforeRet;
}
else {
if (isObj(val_54503.m_type, NTI48169)) {
result_54502 = newvalue_50633(Math.floor(val_54503.value));
break BeforeRet;
}
else {
raiseruntimeexception_48333(makeNimstrLit("Can not convert to int"));
}
}
} while (false); 
return result_54502;
}
function HEX3Aanonymous_54508(spry_54510) {

var result_54511 = null;
result_54511 = newvalue_50643(HEX24_48604(evalarg_53860(spry_54510)));
return result_54511;
}
function HEX3Aanonymous_54512(spry_54514) {

var result_54515 = null;
result_54515 = parse_52642(spry_54514.parser, evalarg_53860(spry_54514).value);
return result_54515;
}
function HEX3Aanonymous_54516(spry_54518) {

var result_54519 = null;
BeforeRet: do {
spry_54518.lastself = spry_54518.currentactivation.last;
var comp_54520 = eval_52925(spry_54518.lastself, spry_54518);
if (isObj(comp_54520.m_type, NTI48172)) {
result_54519 = newvalue_50633((comp_54520.value != null ? comp_54520.value.length-1 : 0));
}
else {
if (isObj(comp_54520.m_type, NTI48188)) {
spry_54518.lastself = spry_54518.currentactivation.last;
result_54519 = newvalue_50633((eval_52925(spry_54518.lastself, spry_54518).nodes != null ? eval_52925(spry_54518.lastself, spry_54518).nodes.length : 0));
break BeforeRet;
}
else {
if (isObj(comp_54520.m_type, NTI48199)) {
spry_54518.lastself = spry_54518.currentactivation.last;
result_54519 = newvalue_50633(len_54533(eval_52925(spry_54518.lastself, spry_54518).bindings));
break BeforeRet;
}
}}
} while (false); 
return result_54519;
}
function HEX3Aanonymous_54544(spry_54546) {

var result_54547 = null;
BeforeRet: do {
spry_54546.lastself = spry_54546.currentactivation.last;
var comp_54548 = eval_52925(spry_54546.lastself, spry_54546);
if (isObj(comp_54548.m_type, NTI48188)) {
result_54547 = HEX5BHEX5D_52980(comp_54548, evalarg_53860(spry_54546));
break BeforeRet;
}
else {
if (isObj(comp_54548.m_type, NTI48199)) {
var hit_54551 = HEX5BHEX5D_52950(comp_54548, evalarg_53860(spry_54546));
if ((hit_54551 === null)) {
result_54547 = spry_54546.undefval;
break BeforeRet;
}
else {
result_54547 = hit_54551;
break BeforeRet;
}

}
}
} while (false); 
return result_54547;
}
function HEX3Aanonymous_54562(spry_54564) {

var result_54565 = null;
BeforeRet: do {
spry_54564.lastself = spry_54564.currentactivation.last;
var comp_54566 = eval_52925(spry_54564.lastself, spry_54564);
var key_54567 = evalarg_53860(spry_54564);
var val_54568 = evalarg_53860(spry_54564);
if (isObj(comp_54566.m_type, NTI48188)) {
HEX5BHEX5DHEX3D_53000(comp_54566, key_54567, val_54568);
}
else {
if (isObj(comp_54566.m_type, NTI48199)) {
HEX5BHEX5DHEX3D_52995(comp_54566, key_54567, val_54568);
}
}
result_54565 = comp_54566;
break BeforeRet;
} while (false); 
return result_54565;
}
function HEX3Aanonymous_54573(spry_54575) {

var Tmp1;
var result_54576 = null;
spry_54575.lastself = spry_54575.currentactivation.last;
var comp_54577 = eval_52925(spry_54575.lastself, spry_54575);
var word_54578 = arg_53829(spry_54575);
var hit_54579 = HEX5BHEX5D_52950(comp_54577, word_54578);
if ((hit_54579 === null)) {
Tmp1 = spry_54575.undefval;
}
else {
Tmp1 = hit_54579;
}

result_54576 = Tmp1;
return result_54576;
}
function HEX3Aanonymous_54588(spry_54590) {

var result_54591 = null;
BeforeRet: do {
spry_54590.lastself = spry_54590.currentactivation.last;
var comp_54592 = eval_52925(spry_54590.lastself, spry_54590);
var word_54593 = arg_53829(spry_54590);
var val_54594 = evalarg_53860(spry_54590);
HEX5BHEX5DHEX3D_52995(comp_54592, word_54593, val_54594);
result_54591 = comp_54592;
break BeforeRet;
} while (false); 
return result_54591;
}
function HEX3Aanonymous_54595(spry_54597) {

var result_54598 = null;
BeforeRet: do {
spry_54597.lastself = spry_54597.currentactivation.last;
var comp_54599 = eval_52925(spry_54597.lastself, spry_54597);
var key_54600 = evalarg_53860(spry_54597);
if (isObj(comp_54599.m_type, NTI48188)) {
result_54598 = newvalue_50648(contains_50738(comp_54599, key_54600));
break BeforeRet;
}
else {
if (isObj(comp_54599.m_type, NTI48199)) {
result_54598 = newvalue_50648(contains_50785(comp_54599, key_54600));
break BeforeRet;
}
}
result_54598 = comp_54599;
break BeforeRet;
} while (false); 
return result_54598;
}
function HEX3Aanonymous_54605(spry_54607) {

var result_54608 = null;
spry_54607.lastself = spry_54607.currentactivation.last;
result_54608 = eval_52925(spry_54607.lastself, spry_54607);
var comp_54609 = result_54608;
add_50663(comp_54609, evalarg_53860(spry_54607));
return result_54608;
}
function HEX3Aanonymous_54610(spry_54612) {

var result_54613 = null;
spry_54612.lastself = spry_54612.currentactivation.last;
result_54613 = eval_52925(spry_54612.lastself, spry_54612);
var comp_54614 = result_54613;
removelast_51074(comp_54614);
return result_54613;
}
function HEX3Aanonymous_54615(spry_54617) {

var result_54618 = null;
spry_54617.lastself = spry_54617.currentactivation.last;
var comp_54619 = eval_52925(spry_54617.lastself, spry_54617);
var frm_54620 = evalarg_53860(spry_54617).value;
var to_54621 = evalarg_53860(spry_54617).value;
if (isObj(comp_54619.m_type, NTI48172)) {
result_54618 = newvalue_50643(HEX5BHEX5D_19844(comp_54619.value, HEX2EHEX2E_35261(frm_54620, to_54621)));
}
else {
if (isObj(comp_54619.m_type, NTI48196)) {
result_54618 = newblok_50519(HEX5BHEX5D_54645(comp_54619.nodes, HEX2EHEX2E_35261(frm_54620, to_54621)));
}
else {
if (isObj(comp_54619.m_type, NTI48192)) {
result_54618 = newparen_50557(HEX5BHEX5D_54645(comp_54619.nodes, HEX2EHEX2E_35261(frm_54620, to_54621)));
}
else {
if (isObj(comp_54619.m_type, NTI48194)) {
result_54618 = newcurly_50595(HEX5BHEX5D_54645(comp_54619.nodes, HEX2EHEX2E_35261(frm_54620, to_54621)));
}
}}}
if (!((comp_54619.tags === null))) {
result_54618.tags = comp_54619.tags;
}

return result_54618;
}
function HEX3Aanonymous_54753(spry_54755) {

var result_54756 = null;
spry_54755.lastself = spry_54755.currentactivation.last;
eval_52925(spry_54755.lastself, spry_54755).pos = 0;
return result_54756;
}
function HEX3Aanonymous_54757(spry_54759) {

var result_54760 = null;
spry_54759.lastself = spry_54759.currentactivation.last;
result_54760 = newvalue_50633(eval_52925(spry_54759.lastself, spry_54759).pos);
return result_54760;
}
function HEX3Aanonymous_54761(spry_54763) {

var result_54764 = null;
spry_54763.lastself = spry_54763.currentactivation.last;
result_54764 = eval_52925(spry_54763.lastself, spry_54763);
var comp_54765 = result_54764;
comp_54765.pos = evalarg_53860(spry_54763).value;
return result_54764;
}
function HEX3Aanonymous_54766(spry_54768) {

var result_54769 = null;
spry_54768.lastself = spry_54768.currentactivation.last;
var comp_54770 = eval_52925(spry_54768.lastself, spry_54768);
result_54769 = HEX5BHEX5D_52990(comp_54770, comp_54770.pos);
return result_54769;
}
function HEX3Aanonymous_54771(spry_54773) {

var result_54774 = null;
spry_54773.lastself = spry_54773.currentactivation.last;
result_54774 = eval_52925(spry_54773.lastself, spry_54773);
var comp_54775 = result_54774;
HEX5BHEX5DHEX3D_53010(comp_54775, comp_54775.pos, evalarg_53860(spry_54773));
return result_54774;
}
function HEX3Aanonymous_54776(spry_54778) {

var result_54779 = null;
BeforeRet: do {
spry_54778.lastself = spry_54778.currentactivation.last;
var comp_54780 = eval_52925(spry_54778.lastself, spry_54778);
if ((comp_54780.pos == (comp_54780.nodes != null ? comp_54780.nodes.length : 0))) {
result_54779 = spry_54778.undefval;
break BeforeRet;
}

result_54779 = HEX5BHEX5D_52990(comp_54780, comp_54780.pos);
comp_54780.pos += 1;
} while (false); 
return result_54779;
}
function HEX3Aanonymous_54798(spry_54800) {

var result_54801 = null;
BeforeRet: do {
spry_54800.lastself = spry_54800.currentactivation.last;
var comp_54802 = eval_52925(spry_54800.lastself, spry_54800);
if ((comp_54802.pos == 0)) {
result_54801 = spry_54800.undefval;
break BeforeRet;
}

comp_54802.pos -= 1;
result_54801 = HEX5BHEX5D_52990(comp_54802, comp_54802.pos);
} while (false); 
return result_54801;
}
function HEX3Aanonymous_54812(spry_54814) {

var result_54815 = null;
spry_54814.lastself = spry_54814.currentactivation.last;
var comp_54816 = eval_52925(spry_54814.lastself, spry_54814);
result_54815 = newvalue_50648((comp_54816.pos == (comp_54816.nodes != null ? comp_54816.nodes.length : 0)));
return result_54815;
}
function HEX3Aanonymous_54825(spry_54827) {

var result_54828 = null;
spry_54827.lastself = spry_54827.currentactivation.last;
result_54828 = HEX5BHEX5D_52990(eval_52925(spry_54827.lastself, spry_54827), 0);
return result_54828;
}
function HEX3Aanonymous_54829(spry_54831) {

var result_54832 = null;
spry_54831.lastself = spry_54831.currentactivation.last;
result_54832 = HEX5BHEX5D_52990(eval_52925(spry_54831.lastself, spry_54831), 1);
return result_54832;
}
function HEX3Aanonymous_54833(spry_54835) {

var result_54836 = null;
spry_54835.lastself = spry_54835.currentactivation.last;
result_54836 = HEX5BHEX5D_52990(eval_52925(spry_54835.lastself, spry_54835), 2);
return result_54836;
}
function HEX3Aanonymous_54837(spry_54839) {

var result_54840 = null;
spry_54839.lastself = spry_54839.currentactivation.last;
result_54840 = HEX5BHEX5D_52990(eval_52925(spry_54839.lastself, spry_54839), 3);
return result_54840;
}
function HEX3Aanonymous_54841(spry_54843) {

var result_54844 = null;
spry_54843.lastself = spry_54843.currentactivation.last;
result_54844 = HEX5BHEX5D_52990(eval_52925(spry_54843.lastself, spry_54843), 4);
return result_54844;
}
function HEX3Aanonymous_54845(spry_54847) {

var result_54848 = null;
BeforeRet: do {
spry_54847.lastself = spry_54847.currentactivation.last;
var blk1_54849 = eval_52925(spry_54847.lastself, spry_54847);
var blk2_54850 = evalarg_53860(spry_54847);
var current_54851 = spry_54847.currentactivation;
var orig_54852 = current_54851.body.nodes[0];
var oldpos_54853 = current_54851.pos;
current_54851.pos = 0;
var activation_54854 = newactivation_53060(blk2_54850);
L1: do {
var each_54863 = null;
var HEX3Atmp_54865 = null;
HEX3Atmp_54865 = blk1_54849.nodes;
var i_54868 = 0;
var L_54870 = (HEX3Atmp_54865 != null ? HEX3Atmp_54865.length : 0);
L2: do {
L3: while (true) {
if (!(i_54868 < L_54870)) break L3;
each_54863 = HEX3Atmp_54865[i_54868];
current_54851.body.nodes[0] = each_54863;
eval_54110(activation_54854, spry_54847);
reset_53094(activation_54854);
current_54851.pos = 0;
if (current_54851.returned) {
current_54851.body.nodes[0] = orig_54852;
current_54851.pos = oldpos_54853;
result_54848 = current_54851.last;
break BeforeRet;
}

i_54868 += 1;
}
} while(false);
} while(false);
current_54851.body.nodes[0] = orig_54852;
current_54851.pos = oldpos_54853;
result_54848 = blk1_54849;
break BeforeRet;
} while (false); 
return result_54848;
}
function HEX3Aanonymous_54871(spry_54873) {

var result_54874 = null;
BeforeRet: do {
spry_54873.lastself = spry_54873.currentactivation.last;
var blk_54875 = eval_52925(spry_54873.lastself, spry_54873);
var sum_54876 = 0;
var sum2_54877 = 0.0;
var foundfloat_54878 = false;
L1: do {
var each_54887 = null;
var HEX3Atmp_54896 = null;
HEX3Atmp_54896 = blk_54875.nodes;
var i_54899 = 0;
var L_54901 = (HEX3Atmp_54896 != null ? HEX3Atmp_54896.length : 0);
L2: do {
L3: while (true) {
if (!(i_54899 < L_54901)) break L3;
each_54887 = HEX3Atmp_54896[i_54899];
if (isObj(each_54887.m_type, NTI48166)) {
sum_54876 = (sum_54876 + each_54887.value);
}
else {
if (isObj(each_54887.m_type, NTI48169)) {
foundfloat_54878 = true;
sum2_54877 = (sum2_54877 + each_54887.value);
}
else {
raiseruntimeexception_48333(makeNimstrLit("Block contained something other than an int or float, can not sum."));
}
}
i_54899 += 1;
}
} while(false);
} while(false);
if (foundfloat_54878) {
result_54874 = newvalue_50638((sum2_54877 + sum_54876));
break BeforeRet;
}
else {
result_54874 = newvalue_50633(sum_54876);
break BeforeRet;
}

} while (false); 
return result_54874;
}
function HEX3Aanonymous_54903(spry_54905) {

var result_54906 = null;
result_54906 = funk_52908(spry_54905, evalarg_53860(spry_54905));
return result_54906;
}
function HEX3Aanonymous_54907(spry_54909) {

var result_54910 = null;
result_54910 = meth_52912(spry_54909, evalarg_53860(spry_54909));
return result_54910;
}
function HEX3Aanonymous_54911(spry_54913) {

var result_54914 = null;
result_54914 = evaldo_52932(evalarg_53860(spry_54913), spry_54913);
return result_54914;
}
function HEX3Aanonymous_54915(spry_54917) {

var result_54918 = null;
result_54918 = arg_53829(spry_54917);
return result_54918;
}
function HEX3Aanonymous_54919(spry_54921) {

var result_54922 = null;
result_54922 = evalarg_53860(spry_54921);
return result_54922;
}
function HEX3Aanonymous_54923(spry_54925) {

var result_54926 = null;
result_54926 = eval_52925(evalarg_53860(spry_54925), spry_54925);
return result_54926;
}
function HEX3Aanonymous_54927(spry_54929) {

var result_54930 = null;
result_54930 = reify_53874(evalarg_53860(spry_54929));
return result_54930;
}
function HEX3Aanonymous_54931(spry_54933) {

var result_54934 = null;
result_54934 = litify_54234(spry_54933, evalarg_53860(spry_54933));
return result_54934;
}
function HEX3Aanonymous_54935(spry_54937) {

var result_54938 = null;
result_54938 = neworgetlitword_50046(spry_54937.parser, HEX24_48604(arg_53829(spry_54937)));
return result_54938;
}
function HEX3Aanonymous_54939(spry_54941) {

var result_54942 = null;
result_54942 = neworgetlitword_50046(spry_54941.parser, evalarg_53860(spry_54941).value);
return result_54942;
}
function HEX3Aanonymous_54943(spry_54945) {

var result_54946 = null;
result_54946 = newword_52252(null, evalarg_53860(spry_54945).value);
return result_54946;
}
function HEX3Aanonymous_54947(spry_54949) {

var result_54950 = null;
spry_54949.lastself = spry_54949.currentactivation.last;
result_54950 = clone_51615(eval_52925(spry_54949.lastself, spry_54949));
return result_54950;
}
function HEX3Aanonymous_54951(spry_54953) {

var result_54954 = null;
result_54954 = evalarg_53860(spry_54953);
spry_54953.currentactivation.returned = true;
return result_54954;
}
function HEX3Aanonymous_54955(spry_54957) {

var result_54958 = null;
BeforeRet: do {
spry_54957.lastself = spry_54957.currentactivation.last;
if (value_49054(eval_52925(spry_54957.lastself, spry_54957))) {
result_54958 = evaldo_52932(evalarg_53860(spry_54957), spry_54957);
break BeforeRet;
}
else {
arg_53829(spry_54957);
result_54958 = spry_54957.nilval;
break BeforeRet;
}

} while (false); 
return result_54958;
}
function HEX3Aanonymous_54959(spry_54961) {

var result_54962 = null;
BeforeRet: do {
spry_54961.lastself = spry_54961.currentactivation.last;
if (value_49054(eval_52925(spry_54961.lastself, spry_54961))) {
arg_53829(spry_54961);
result_54962 = spry_54961.nilval;
break BeforeRet;
}
else {
result_54962 = evaldo_52932(evalarg_53860(spry_54961), spry_54961);
break BeforeRet;
}

} while (false); 
return result_54962;
}
function HEX3Aanonymous_54963(spry_54965) {

var result_54966 = null;
BeforeRet: do {
spry_54965.lastself = spry_54965.currentactivation.last;
if (value_49054(eval_52925(spry_54965.lastself, spry_54965))) {
var res_54967 = evaldo_52932(evalarg_53860(spry_54965), spry_54965);
arg_53829(spry_54965);
result_54966 = res_54967;
break BeforeRet;
}
else {
arg_53829(spry_54965);
result_54966 = evaldo_52932(evalarg_53860(spry_54965), spry_54965);
break BeforeRet;
}

} while (false); 
return result_54966;
}
function HEX3Aanonymous_54968(spry_54970) {

var result_54971 = null;
BeforeRet: do {
spry_54970.lastself = spry_54970.currentactivation.last;
if (value_49054(eval_52925(spry_54970.lastself, spry_54970))) {
arg_53829(spry_54970);
result_54971 = evaldo_52932(evalarg_53860(spry_54970), spry_54970);
break BeforeRet;
}
else {
var res_54972 = evaldo_52932(evalarg_53860(spry_54970), spry_54970);
arg_53829(spry_54970);
result_54971 = res_54972;
break BeforeRet;
}

} while (false); 
return result_54971;
}
function HEX3Aanonymous_54973(spry_54975) {

var result_54976 = null;
BeforeRet: do {
spry_54975.lastself = spry_54975.currentactivation.last;
var times_54977 = eval_52925(spry_54975.lastself, spry_54975).value;
var fn_54978 = evalarg_53860(spry_54975);
L1: do {
var i_54988 = 0;
var res_54992 = 1;
L2: do {
L3: while (true) {
if (!(res_54992 <= times_54977)) break L3;
i_54988 = res_54992;
result_54976 = evaldo_52932(fn_54978, spry_54975);
if (spry_54975.currentactivation.returned) {
break BeforeRet;
}

res_54992 += 1;
}
} while(false);
} while(false);
} while (false); 
return result_54976;
}
function HEX3Aanonymous_54996(spry_54998) {

var result_54999 = null;
BeforeRet: do {
spry_54998.lastself = spry_54998.currentactivation.last;
var self_55000 = eval_52925(spry_54998.lastself, spry_54998);
var frm_55001 = self_55000.value;
var to_55002 = evalarg_53860(spry_54998).value;
var fn_55003 = evalarg_53860(spry_54998);
var current_55004 = spry_54998.currentactivation;
var orig_55005 = current_55004.body.nodes[0];
var oldpos_55006 = current_55004.pos;
current_55004.pos = 0;
var activation_55007 = newactivation_53060(fn_55003);
L1: do {
var i_55017 = 0;
var res_55021 = frm_55001;
L2: do {
L3: while (true) {
if (!(res_55021 <= to_55002)) break L3;
i_55017 = res_55021;
current_55004.body.nodes[0] = newvalue_50633(i_55017);
eval_54110(activation_55007, spry_54998);
reset_53094(activation_55007);
current_55004.pos = 0;
if (spry_54998.currentactivation.returned) {
current_55004.body.nodes[0] = orig_55005;
current_55004.pos = oldpos_55006;
break BeforeRet;
}

res_55021 += 1;
}
} while(false);
} while(false);
current_55004.body.nodes[0] = orig_55005;
current_55004.pos = oldpos_55006;
result_54999 = self_55000;
break BeforeRet;
} while (false); 
return result_54999;
}
function HEX3Aanonymous_55025(spry_55027) {

var result_55028 = null;
BeforeRet: do {
spry_55027.lastself = spry_55027.currentactivation.last;
var blk1_55029 = eval_52925(spry_55027.lastself, spry_55027);
var blk2_55030 = evalarg_53860(spry_55027);
result_55028 = evaldo_52932(blk1_55029, spry_55027);
if (spry_55027.currentactivation.returned) {
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!value_49054(result_55028)) break L2;
result_55028 = evaldo_52932(blk2_55030, spry_55027);
if (spry_55027.currentactivation.returned) {
break BeforeRet;
}

result_55028 = evaldo_52932(blk1_55029, spry_55027);
if (spry_55027.currentactivation.returned) {
break BeforeRet;
}

}
} while(false);
} while (false); 
return result_55028;
}
function HEX3Aanonymous_55032(spry_55034) {

var result_55035 = null;
BeforeRet: do {
spry_55034.lastself = spry_55034.currentactivation.last;
var blk1_55036 = eval_52925(spry_55034.lastself, spry_55034);
var blk2_55037 = evalarg_53860(spry_55034);
result_55035 = evaldo_52932(blk1_55036, spry_55034);
if (spry_55034.currentactivation.returned) {
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!!(value_49054(result_55035))) break L2;
result_55035 = evaldo_52932(blk2_55037, spry_55034);
if (spry_55034.currentactivation.returned) {
break BeforeRet;
}

result_55035 = evaldo_52932(blk1_55036, spry_55034);
if (spry_55034.currentactivation.returned) {
break BeforeRet;
}

}
} while(false);
} while (false); 
return result_55035;
}
function HEX3Aanonymous_55039(spry_55041) {

var result_55042 = null;
exit(evalarg_53860(spry_55041).value);
return result_55042;
}
var Tmp1;
var result_54241 = null;
var spry_54242 = {root: newmap_49812(), parser: newparser_51715(), currentactivation: null, rootactivation: null, lastself: null, modules: null, trueval: null, falseval: null, undefval: null, nilval: null, emptyblok: null, objecttag: null, moduletag: null};
result_54241 = spry_54242;
spry_54242.trueval = newvalue_50648(true);
spry_54242.falseval = newvalue_50648(false);
spry_54242.nilval = newnilval_50655();
spry_54242.undefval = newundefval_50659();
spry_54242.emptyblok = newblok_50525();
spry_54242.objecttag = neworgetlitword_50046(spry_54242.parser, makeNimstrLit("object"));
spry_54242.moduletag = neworgetlitword_50046(spry_54242.parser, makeNimstrLit("module"));
spry_54242.modules = newblok_50525();
makeword_53864(spry_54242, makeNimstrLit("false"), spry_54242.falseval);
makeword_53864(spry_54242, makeNimstrLit("true"), spry_54242.trueval);
makeword_53864(spry_54242, makeNimstrLit("undef"), spry_54242.undefval);
makeword_53864(spry_54242, makeNimstrLit("nil"), spry_54242.nilval);
makeword_53864(spry_54242, makeNimstrLit("modules"), spry_54242.modules);
makeword_53864(spry_54242, makeNimstrLit("root"), newnimproc_53032(HEX3Aanonymous_54243, false));
makeword_53864(spry_54242, makeNimstrLit("activation"), newnimproc_53032(HEX3Aanonymous_54247, false));
makeword_53864(spry_54242, makeNimstrLit("locals"), newnimproc_53032(HEX3Aanonymous_54251, false));
makeword_53864(spry_54242, makeNimstrLit("node"), newnimproc_53032(HEX3Aanonymous_54270, false));
makeword_53864(spry_54242, makeNimstrLit("self"), newnimproc_53032(HEX3Aanonymous_54292, false));
makeword_53864(spry_54242, makeNimstrLit(";"), newnimproc_53032(HEX3Aanonymous_54296, false));
makeword_53864(spry_54242, makeNimstrLit("tag:"), newnimproc_53032(HEX3Aanonymous_54308, true));
makeword_53864(spry_54242, makeNimstrLit("tag?"), newnimproc_53032(HEX3Aanonymous_54323, true));
makeword_53864(spry_54242, makeNimstrLit("tags"), newnimproc_53032(HEX3Aanonymous_54339, true));
makeword_53864(spry_54242, makeNimstrLit("tags:"), newnimproc_53032(HEX3Aanonymous_54352, true));
makeword_53864(spry_54242, makeNimstrLit("="), newnimproc_53032(HEX3Aanonymous_54356, true));
makeword_53864(spry_54242, makeNimstrLit("set:"), newnimproc_53032(HEX3Aanonymous_54360, true));
makeword_53864(spry_54242, makeNimstrLit("?"), newnimproc_53032(HEX3Aanonymous_54364, false));
makeword_53864(spry_54242, makeNimstrLit("set?"), newnimproc_53032(HEX3Aanonymous_54377, false));
makeword_53864(spry_54242, makeNimstrLit("+"), newnimproc_53032(HEX3Aanonymous_54383, true));
makeword_53864(spry_54242, makeNimstrLit("-"), newnimproc_53032(HEX3Aanonymous_54387, true));
makeword_53864(spry_54242, makeNimstrLit("*"), newnimproc_53032(HEX3Aanonymous_54391, true));
makeword_53864(spry_54242, makeNimstrLit("/"), newnimproc_53032(HEX3Aanonymous_54395, true));
makeword_53864(spry_54242, makeNimstrLit("<"), newnimproc_53032(HEX3Aanonymous_54399, true));
makeword_53864(spry_54242, makeNimstrLit(">"), newnimproc_53032(HEX3Aanonymous_54403, true));
makeword_53864(spry_54242, makeNimstrLit("<="), newnimproc_53032(HEX3Aanonymous_54407, true));
makeword_53864(spry_54242, makeNimstrLit(">="), newnimproc_53032(HEX3Aanonymous_54411, true));
makeword_53864(spry_54242, makeNimstrLit("=="), newnimproc_53032(HEX3Aanonymous_54415, true));
makeword_53864(spry_54242, makeNimstrLit("==="), newnimproc_53032(HEX3Aanonymous_54419, true));
makeword_53864(spry_54242, makeNimstrLit("!="), newnimproc_53032(HEX3Aanonymous_54434, true));
makeword_53864(spry_54242, makeNimstrLit("!=="), newnimproc_53032(HEX3Aanonymous_54438, true));
makeword_53864(spry_54242, makeNimstrLit("not"), newnimproc_53032(HEX3Aanonymous_54453, true));
makeword_53864(spry_54242, makeNimstrLit("and"), newnimproc_53032(HEX3Aanonymous_54457, true));
makeword_53864(spry_54242, makeNimstrLit("or"), newnimproc_53032(HEX3Aanonymous_54463, true));
makeword_53864(spry_54242, makeNimstrLit(","), newnimproc_53032(HEX3Aanonymous_54469, true));
makeword_53864(spry_54242, makeNimstrLit("print"), newnimproc_53032(HEX3Aanonymous_54482, true));
makeword_53864(spry_54242, makeNimstrLit("commented"), newnimproc_53032(HEX3Aanonymous_54486, true));
makeword_53864(spry_54242, makeNimstrLit("asFloat"), newnimproc_53032(HEX3Aanonymous_54490, true));
makeword_53864(spry_54242, makeNimstrLit("asInt"), newnimproc_53032(HEX3Aanonymous_54499, true));
makeword_53864(spry_54242, makeNimstrLit("serialize"), newnimproc_53032(HEX3Aanonymous_54508, false));
makeword_53864(spry_54242, makeNimstrLit("parse"), newnimproc_53032(HEX3Aanonymous_54512, false));
makeword_53864(spry_54242, makeNimstrLit("size"), newnimproc_53032(HEX3Aanonymous_54516, true));
makeword_53864(spry_54242, makeNimstrLit("at:"), newnimproc_53032(HEX3Aanonymous_54544, true));
makeword_53864(spry_54242, makeNimstrLit("at:put:"), newnimproc_53032(HEX3Aanonymous_54562, true));
makeword_53864(spry_54242, makeNimstrLit("get:"), newnimproc_53032(HEX3Aanonymous_54573, true));
makeword_53864(spry_54242, makeNimstrLit("set:to:"), newnimproc_53032(HEX3Aanonymous_54588, true));
makeword_53864(spry_54242, makeNimstrLit("contains:"), newnimproc_53032(HEX3Aanonymous_54595, true));
makeword_53864(spry_54242, makeNimstrLit("add:"), newnimproc_53032(HEX3Aanonymous_54605, true));
makeword_53864(spry_54242, makeNimstrLit("removeLast"), newnimproc_53032(HEX3Aanonymous_54610, true));
makeword_53864(spry_54242, makeNimstrLit("copyFrom:to:"), newnimproc_53032(HEX3Aanonymous_54615, true));
makeword_53864(spry_54242, makeNimstrLit("reset"), newnimproc_53032(HEX3Aanonymous_54753, true));
makeword_53864(spry_54242, makeNimstrLit("pos"), newnimproc_53032(HEX3Aanonymous_54757, true));
makeword_53864(spry_54242, makeNimstrLit("pos:"), newnimproc_53032(HEX3Aanonymous_54761, true));
makeword_53864(spry_54242, makeNimstrLit("read"), newnimproc_53032(HEX3Aanonymous_54766, true));
makeword_53864(spry_54242, makeNimstrLit("write:"), newnimproc_53032(HEX3Aanonymous_54771, true));
makeword_53864(spry_54242, makeNimstrLit("next"), newnimproc_53032(HEX3Aanonymous_54776, true));
makeword_53864(spry_54242, makeNimstrLit("prev"), newnimproc_53032(HEX3Aanonymous_54798, true));
makeword_53864(spry_54242, makeNimstrLit("end?"), newnimproc_53032(HEX3Aanonymous_54812, true));
makeword_53864(spry_54242, makeNimstrLit("first"), newnimproc_53032(HEX3Aanonymous_54825, true));
makeword_53864(spry_54242, makeNimstrLit("second"), newnimproc_53032(HEX3Aanonymous_54829, true));
makeword_53864(spry_54242, makeNimstrLit("third"), newnimproc_53032(HEX3Aanonymous_54833, true));
makeword_53864(spry_54242, makeNimstrLit("fourth"), newnimproc_53032(HEX3Aanonymous_54837, true));
makeword_53864(spry_54242, makeNimstrLit("fifth"), newnimproc_53032(HEX3Aanonymous_54841, true));
makeword_53864(spry_54242, makeNimstrLit("do:"), newnimproc_53032(HEX3Aanonymous_54845, true));
makeword_53864(spry_54242, makeNimstrLit("sum"), newnimproc_53032(HEX3Aanonymous_54871, true));
makeword_53864(spry_54242, makeNimstrLit("func"), newnimproc_53032(HEX3Aanonymous_54903, false));
makeword_53864(spry_54242, makeNimstrLit("method"), newnimproc_53032(HEX3Aanonymous_54907, false));
makeword_53864(spry_54242, makeNimstrLit("do"), newnimproc_53032(HEX3Aanonymous_54911, false));
makeword_53864(spry_54242, makeNimstrLit("$"), newnimproc_53032(HEX3Aanonymous_54915, false));
makeword_53864(spry_54242, makeNimstrLit("eva"), newnimproc_53032(HEX3Aanonymous_54919, false));
makeword_53864(spry_54242, makeNimstrLit("eval"), newnimproc_53032(HEX3Aanonymous_54923, false));
makeword_53864(spry_54242, makeNimstrLit("reify"), newnimproc_53032(HEX3Aanonymous_54927, false));
makeword_53864(spry_54242, makeNimstrLit("litify"), newnimproc_53032(HEX3Aanonymous_54931, false));
makeword_53864(spry_54242, makeNimstrLit("quote"), newnimproc_53032(HEX3Aanonymous_54935, false));
makeword_53864(spry_54242, makeNimstrLit("litword"), newnimproc_53032(HEX3Aanonymous_54939, false));
makeword_53864(spry_54242, makeNimstrLit("word"), newnimproc_53032(HEX3Aanonymous_54943, false));
makeword_53864(spry_54242, makeNimstrLit("clone"), newnimproc_53032(HEX3Aanonymous_54947, true));
makeword_53864(spry_54242, makeNimstrLit("^"), newnimproc_53032(HEX3Aanonymous_54951, false));
makeword_53864(spry_54242, makeNimstrLit("then:"), newnimproc_53032(HEX3Aanonymous_54955, true));
makeword_53864(spry_54242, makeNimstrLit("else:"), newnimproc_53032(HEX3Aanonymous_54959, true));
makeword_53864(spry_54242, makeNimstrLit("then:else:"), newnimproc_53032(HEX3Aanonymous_54963, true));
makeword_53864(spry_54242, makeNimstrLit("else:then:"), newnimproc_53032(HEX3Aanonymous_54968, true));
makeword_53864(spry_54242, makeNimstrLit("timesRepeat:"), newnimproc_53032(HEX3Aanonymous_54973, true));
makeword_53864(spry_54242, makeNimstrLit("to:do:"), newnimproc_53032(HEX3Aanonymous_54996, true));
makeword_53864(spry_54242, makeNimstrLit("whileTrue:"), newnimproc_53032(HEX3Aanonymous_55025, true));
makeword_53864(spry_54242, makeNimstrLit("whileFalse:"), newnimproc_53032(HEX3Aanonymous_55032, true));
makeword_53864(spry_54242, makeNimstrLit("quit"), newnimproc_53032(HEX3Aanonymous_55039, false));
spry_54242.rootactivation = newrootactivation_53050(spry_54242.root);
spry_54242.rootactivation.parent = spry_54242.currentactivation;
if (!(spry_54242.rootactivation.self === null)) Tmp1 = false; else {Tmp1 = !((spry_54242.rootactivation.parent === null)); }if (Tmp1) {
spry_54242.rootactivation.self = spry_54242.rootactivation.parent.self;
}

spry_54242.currentactivation = spry_54242.rootactivation;
evalroot_52916(spry_54242, makeNimstrLit("[\x0A    # Trivial error function\x0A    error = func [echo :msg quit 1]\x0A\x0A    # Trivial assert\x0A    assert = func [:x else: [error \"Oops, assertion failed\"] ^x]\x0A\x0A    # Objects\x0A    object = func [:ts :map\x0A      map tags: ts\x0A      map tag: \'object\x0A      ^ map]\x0A\x0A    # Modules\x0A    module = func [\x0A      object [] :map\x0A      map tag: \'module\x0A      ^ map]\x0A\x0A    # Collections\x0A    sprydo: = method [:fun\x0A      self reset\x0A      [self end?] whileFalse: [do fun (self next)]\x0A    ]\x0A\x0A    detect: = method [:pred\x0A      self reset\x0A      [self end?] whileFalse: [\x0A        n = (self next)\x0A        do pred n then: [^n]]\x0A      ^nil\x0A    ]\x0A\x0A    select: = method [:pred\x0A      result = ([] clone)\x0A      self reset\x0A      [self end?] whileFalse: [\x0A        n = (self next)\x0A        do pred n then: [result add: n]]\x0A      ^result]\x0A  ]"));
return result_54241;
}
function factorial(n_56003) {

var result_56004 = 0;
result_56004 = eval_54198(newinterpreter_54239(), (makeNimstrLit("[\x0A    factorial = func [:n > 0 then: [n * factorial (n - 1)] else: [1]]\x0A    factorial ").slice(0,-1)).concat(cstrToNimstr((n_56003)+"").slice(0,-1),makeNimstrLit("]"))).value;
return result_56004;
}
function HEX24_52934(self_52936) {

var result_52937 = null;
if (self_52936.infix) {
result_52937 = nimCopy(null, makeNimstrLit("primi"), NTI138);
}
else {
result_52937 = nimCopy(null, makeNimstrLit("prim"), NTI138);
}

return result_52937;
}
function HEX24_52946(self_52948) {

var result_52949 = null;
BeforeRet: do {
result_52949 = nimCopy(null, (makeNimstrLit("activation [").slice(0,-1)).concat(HEX24_48604(self_52948.body).slice(0,-1),makeNimstrLit(" ").slice(0,-1),cstrToNimstr((self_52948.pos)+"").slice(0,-1),makeNimstrLit("]")), NTI138);
break BeforeRet;
} while (false); 
return result_52949;
}
function HEX24_48870(self_48872) {

var result_48873 = null;
result_48873 = nimCopy(null, (makeNimstrLit("$@").slice(0,-1)).concat(self_48872.word), NTI138);
return result_48873;
}
function map_48756(data_48762, op_48767) {

var result_48769 = null;
result_48769 = new Array((data_48762 != null ? data_48762.length : 0)); for (var i=0;i<(data_48762 != null ? data_48762.length : 0);++i) {result_48769[i]=null;}L1: do {
var i_48803 = 0;
var HEX3Atmp_48805 = 0;
HEX3Atmp_48805 = ((data_48762 != null ? data_48762.length : 0) - 1);
var res_48808 = 0;
L2: do {
L3: while (true) {
if (!(res_48808 <= HEX3Atmp_48805)) break L3;
i_48803 = res_48808;
result_48769[i_48803] = nimCopy(null, op_48767(data_48762[i_48803]), NTI138);
res_48808 += 1;
}
} while(false);
} while(false);
return result_48769;
}
function HEX24_48740(self_48743) {

function HEX3Aanonymous_48748(n_48750) {

var result_48751 = null;
result_48751 = nimCopy(null, HEX24_48604(n_48750), NTI138);
return result_48751;
}
var result_48744 = null;
result_48744 = nimCopy(null, nsuJoinSep(map_48756(self_48743, HEX3Aanonymous_48748), makeNimstrLit(" ")), NTI138);
return result_48744;
}
function HEX24_52942(self_52944) {

var result_52945 = null;
BeforeRet: do {
result_52945 = nimCopy(null, (makeNimstrLit("method [").slice(0,-1)).concat(HEX24_48740(self_52944.nodes).slice(0,-1),makeNimstrLit("]")), NTI138);
break BeforeRet;
} while (false); 
return result_52945;
}
function HEX24_52938(self_52940) {

var result_52941 = null;
BeforeRet: do {
result_52941 = nimCopy(null, (makeNimstrLit("func [").slice(0,-1)).concat(HEX24_48740(self_52940.nodes).slice(0,-1),makeNimstrLit("]")), NTI138);
break BeforeRet;
} while (false); 
return result_52941;
}
function HEX24_48890(self_48892) {

var result_48893 = null;
result_48893 = nimCopy(null, (makeNimstrLit("[").slice(0,-1)).concat(HEX24_48740(self_48892.nodes).slice(0,-1),makeNimstrLit("]")), NTI138);
return result_48893;
}
function HEX24_48874(self_48876) {

var result_48877 = null;
result_48877 = nimCopy(null, (makeNimstrLit("$..").slice(0,-1)).concat(self_48876.word), NTI138);
return result_48877;
}
function HEX24_48886(self_48888) {

var result_48889 = null;
result_48889 = nimCopy(null, (makeNimstrLit(":$").slice(0,-1)).concat(self_48888.word), NTI138);
return result_48889;
}
function HEX24_48882(self_48884) {

var result_48885 = null;
result_48885 = nimCopy(null, (makeNimstrLit(":").slice(0,-1)).concat(self_48884.word), NTI138);
return result_48885;
}
function HEX24_48878(self_48880) {

var result_48881 = null;
result_48881 = nimCopy(null, (makeNimstrLit("\'").slice(0,-1)).concat(self_48880.word), NTI138);
return result_48881;
}
function HEX24_48854(self_48856) {

var result_48857 = null;
result_48857 = nimCopy(null, (makeNimstrLit("@").slice(0,-1)).concat(self_48856.word), NTI138);
return result_48857;
}
function HEX24_48914(self_48916) {

var result_48917 = null;
result_48917 = nimCopy(null, makeNimstrLit(""), NTI138);
L1: do {
var i_48935 = 0;
var HEX3Atmp_48937 = 0;
HEX3Atmp_48937 = ((self_48916.keys != null ? self_48916.keys.length : 0) - 1);
var res_48940 = 0;
L2: do {
L3: while (true) {
if (!(res_48940 <= HEX3Atmp_48937)) break L3;
i_48935 = res_48940;
result_48917 = nimCopy(null, (result_48917.slice(0,-1)).concat(self_48916.keys[i_48935].slice(0,-1),makeNimstrLit(" ").slice(0,-1),HEX24_48604(self_48916.args[i_48935])), NTI138);
res_48940 += 1;
}
} while(false);
} while(false);
return result_48917;
}
function HEX24_48906(self_48908) {

var result_48909 = null;
result_48909 = nimCopy(null, (makeNimstrLit("{").slice(0,-1)).concat(HEX24_48740(self_48908.nodes).slice(0,-1),makeNimstrLit("}")), NTI138);
return result_48909;
}
function HEX24_48898(self_48900) {

var result_48901 = null;
result_48901 = nimCopy(null, (makeNimstrLit("(").slice(0,-1)).concat(HEX24_48740(self_48900.nodes).slice(0,-1),makeNimstrLit(")")), NTI138);
return result_48901;
}
function HEX24_48716(self_48718) {

var result_48719 = null;
result_48719 = nimCopy(null, cstrToNimstr((self_48718.value)+""), NTI138);
return result_48719;
}
function HEX24_48866(self_48868) {

var result_48869 = null;
result_48869 = nimCopy(null, (makeNimstrLit("$").slice(0,-1)).concat(HEX24_48604(self_48868.module).slice(0,-1),makeNimstrLit("::").slice(0,-1),self_48868.word), NTI138);
return result_48869;
}
function HEX24_48862(self_48864) {

var result_48865 = null;
result_48865 = nimCopy(null, (makeNimstrLit("$").slice(0,-1)).concat(self_48864.word), NTI138);
return result_48865;
}
function HEX24_48858(self_48860) {

var result_48861 = null;
result_48861 = nimCopy(null, (makeNimstrLit("..").slice(0,-1)).concat(self_48860.word), NTI138);
return result_48861;
}
function HEX24_48732(self_48734) {

var result_48735 = null;
result_48735 = nimCopy(null, makeNimstrLit("nil"), NTI138);
return result_48735;
}
function HEX24_48728(self_48730) {

var result_48731 = null;
result_48731 = nimCopy(null, makeNimstrLit("false"), NTI138);
return result_48731;
}
function HEX24_48724(self_48726) {

var result_48727 = null;
result_48727 = nimCopy(null, makeNimstrLit("true"), NTI138);
return result_48727;
}
function nsuToHex(x_34234, len_34235) {

var result_34236 = null;
var n_34238 = x_34234;
result_34236 = nimCopy(null, mnewString(len_34235), NTI138);
L1: do {
var j_34414 = 0;
var HEX3Atmp_34418 = 0;
HEX3Atmp_34418 = (len_34235 - 1);
var res_34421 = HEX3Atmp_34418;
L2: do {
L3: while (true) {
if (!(0 <= res_34421)) break L3;
j_34414 = res_34421;
result_34236[j_34414] = makeNimstrLit("0123456789ABCDEF")[(n_34238 & 15)];
n_34238 = ((n_34238 ) >>> 4);
if (((n_34238 == 0) && (x_34234 < 0))) {
n_34238 = -1;
}

res_34421 -= 1;
}
} while(false);
} while(false);
return result_34236;
}
function nsuEscape(s_36695, prefix_36696, suffix_36697) {

var result_36698 = null;
result_36698 = nimCopy(null, mnewString(0), NTI138);
if (result_36698 != null) { result_36698 = (result_36698.slice(0, -1)).concat(prefix_36696); } else { result_36698 = prefix_36696;};
L1: do {
var c_36700 = 0;
var i_36712 = 0;
var L_36714 = (s_36695 != null ? s_36695.length-1 : 0);
L2: do {
L3: while (true) {
if (!(i_36712 < L_36714)) break L3;
c_36700 = s_36695[i_36712];
switch (c_36700) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 203: case 204: case 205: case 206: case 207: case 208: case 209: case 210: case 211: case 212: case 213: case 214: case 215: case 216: case 217: case 218: case 219: case 220: case 221: case 222: case 223: case 224: case 225: case 226: case 227: case 228: case 229: case 230: case 231: case 232: case 233: case 234: case 235: case 236: case 237: case 238: case 239: case 240: case 241: case 242: case 243: case 244: case 245: case 246: case 247: case 248: case 249: case 250: case 251: case 252: case 253: case 254: case 255: if (result_36698 != null) { result_36698 = (result_36698.slice(0, -1)).concat(makeNimstrLit("\\x")); } else { result_36698 = makeNimstrLit("\\x");};
if (result_36698 != null) { result_36698 = (result_36698.slice(0, -1)).concat(nsuToHex(c_36700, 2)); } else { result_36698 = nsuToHex(c_36700, 2);};

break;
case 92: if (result_36698 != null) { result_36698 = (result_36698.slice(0, -1)).concat(makeNimstrLit("\\\\")); } else { result_36698 = makeNimstrLit("\\\\");};

break;
case 39: if (result_36698 != null) { result_36698 = (result_36698.slice(0, -1)).concat(makeNimstrLit("\\\'")); } else { result_36698 = makeNimstrLit("\\\'");};

break;
case 34: if (result_36698 != null) { result_36698 = (result_36698.slice(0, -1)).concat(makeNimstrLit("\\\"")); } else { result_36698 = makeNimstrLit("\\\"");};

break;
default: 
if (result_36698 != null) { addChar(result_36698, c_36700); } else { result_36698 = [c_36700, 0]; };
break;
}
i_36712 += 1;
}
} while(false);
} while(false);
if (result_36698 != null) { result_36698 = (result_36698.slice(0, -1)).concat(suffix_36697); } else { result_36698 = suffix_36697;};
return result_36698;
}
function HEX24_48720(self_48722) {

var result_48723 = null;
result_48723 = nimCopy(null, nsuEscape(self_48722.value, makeNimstrLit("\""), makeNimstrLit("\"")), NTI138);
return result_48723;
}
function HEX24_48850(self_48852) {

var result_48853 = null;
result_48853 = nimCopy(null, (HEX24_48604(self_48852.module).slice(0,-1)).concat(makeNimstrLit("::").slice(0,-1),self_48852.word), NTI138);
return result_48853;
}
function HEX24_48846(self_48848) {

var result_48849 = null;
result_48849 = nimCopy(null, self_48848.word, NTI138);
return result_48849;
}
function HEX24_48842(self_48844) {

var result_48845 = null;
result_48845 = nimCopy(null, self_48844.word, NTI138);
return result_48845;
}
function HEX24_48617(self_48619) {

var result_48620 = null;
BeforeRet: do {
if ((self_48619.key === null)) {
result_48620 = nimCopy(null, (makeNimstrLit("nil = ").slice(0,-1)).concat(HEX24_48604(self_48619.val)), NTI138);
break BeforeRet;
}

if ((self_48619.val === null)) {
result_48620 = nimCopy(null, (HEX24_48604(self_48619.key).slice(0,-1)).concat(makeNimstrLit(" = nil")), NTI138);
break BeforeRet;
}

result_48620 = nimCopy(null, (HEX24_48604(self_48619.key).slice(0,-1)).concat(makeNimstrLit(" = ").slice(0,-1),HEX24_48604(self_48619.val)), NTI138);
} while (false); 
return result_48620;
}
function HEX24_48736(self_48738) {

var result_48739 = null;
result_48739 = nimCopy(null, makeNimstrLit("undef"), NTI138);
return result_48739;
}
function HEX24_48712(self_48714) {

var result_48715 = null;
result_48715 = nimCopy(null, cstrToNimstr((self_48714.value)+""), NTI138);
return result_48715;
}
function HEX24_48637(self_48639) {

var result_48640 = null;
BeforeRet: do {
result_48640 = nimCopy(null, makeNimstrLit("{"), NTI138);
var first_48641 = true;
L1: do {
var k_48670 = null;
var v_48671 = null;
var HEX3Atmp_48673 = {data: null, counter: 0};
HEX3Atmp_48673 = self_48639.bindings;
L2: do {
var h_48677 = 0;
var HEX3Atmp_48679 = 0;
HEX3Atmp_48679 = (HEX3Atmp_48673.data != null ? (HEX3Atmp_48673.data.length-1) : -1);
var res_48681 = 0;
L3: do {
L4: while (true) {
if (!(res_48681 <= HEX3Atmp_48679)) break L4;
h_48677 = res_48681;
if (isfilled_44263(HEX3Atmp_48673.data[h_48677].Field0)) {
k_48670 = HEX3Atmp_48673.data[h_48677].Field1;
v_48671 = HEX3Atmp_48673.data[h_48677].Field2;
if (first_48641) {
if (result_48640 != null) { result_48640 = (result_48640.slice(0, -1)).concat(HEX24_48604(v_48671)); } else { result_48640 = HEX24_48604(v_48671);};
first_48641 = false;
}
else {
if (result_48640 != null) { result_48640 = (result_48640.slice(0, -1)).concat((makeNimstrLit(" ").slice(0,-1)).concat(HEX24_48604(v_48671))); } else { result_48640 = (makeNimstrLit(" ").slice(0,-1)).concat(HEX24_48604(v_48671));};
}

}

res_48681 += 1;
}
} while(false);
} while(false);
} while(false);
result_48640 = nimCopy(null, (result_48640.slice(0,-1)).concat(makeNimstrLit("}")), NTI138);
break BeforeRet;
} while (false); 
return result_48640;
}
function HEX24_48435(self_48437) {

var result_48438 = null;
rawEcho(makeNimstrLit("repr not available in js"));
return result_48438;
}
function HEX24_48604(self_48437) {

var result_48607 = null;
BeforeRet: do {
if (isObj(self_48437.m_type, NTI52834)) {
result_48607 = HEX24_52934(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI52843)) {
result_48607 = HEX24_52946(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48152)) {
result_48607 = HEX24_48870(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI52841)) {
result_48607 = HEX24_52942(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI52838)) {
result_48607 = HEX24_52938(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48196)) {
result_48607 = HEX24_48890(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48154)) {
result_48607 = HEX24_48874(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48156)) {
result_48607 = HEX24_48886(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48145)) {
result_48607 = HEX24_48882(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48134)) {
result_48607 = HEX24_48878(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48141)) {
result_48607 = HEX24_48854(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48158)) {
result_48607 = HEX24_48914(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48194)) {
result_48607 = HEX24_48906(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48192)) {
result_48607 = HEX24_48898(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48169)) {
result_48607 = HEX24_48716(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48149)) {
result_48607 = HEX24_48866(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48147)) {
result_48607 = HEX24_48862(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48143)) {
result_48607 = HEX24_48858(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48183)) {
result_48607 = HEX24_48732(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48179)) {
result_48607 = HEX24_48728(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48177)) {
result_48607 = HEX24_48724(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48172)) {
result_48607 = HEX24_48720(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48138)) {
result_48607 = HEX24_48850(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48136)) {
result_48607 = HEX24_48846(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48127)) {
result_48607 = HEX24_48842(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48225)) {
result_48607 = HEX24_48617(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48181)) {
result_48607 = HEX24_48736(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48166)) {
result_48607 = HEX24_48712(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48199)) {
result_48607 = HEX24_48637(self_48437);
break BeforeRet;
}
else {
if (isObj(self_48437.m_type, NTI48123)) {
result_48607 = HEX24_48435(self_48437);
break BeforeRet;
}
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
} while (false); 
return result_48607;
}
function commented_48684(self_48686) {

var result_48687 = null;
BeforeRet: do {
if ((self_48686.comment === null)) {
result_48687 = nimCopy(null, makeNimstrLit("{"), NTI138);
}
else {
result_48687 = nimCopy(null, (self_48686.comment.slice(0,-1)).concat(makeNimstrLit("{")), NTI138);
}

var first_48688 = true;
L1: do {
var k_48698 = null;
var v_48699 = null;
var HEX3Atmp_48701 = {data: null, counter: 0};
HEX3Atmp_48701 = self_48686.bindings;
L2: do {
var h_48705 = 0;
var HEX3Atmp_48707 = 0;
HEX3Atmp_48707 = (HEX3Atmp_48701.data != null ? (HEX3Atmp_48701.data.length-1) : -1);
var res_48709 = 0;
L3: do {
L4: while (true) {
if (!(res_48709 <= HEX3Atmp_48707)) break L4;
h_48705 = res_48709;
if (isfilled_44263(HEX3Atmp_48701.data[h_48705].Field0)) {
k_48698 = HEX3Atmp_48701.data[h_48705].Field1;
v_48699 = HEX3Atmp_48701.data[h_48705].Field2;
if (first_48688) {
if (result_48687 != null) { result_48687 = (result_48687.slice(0, -1)).concat(commented_48613(v_48699)); } else { result_48687 = commented_48613(v_48699);};
first_48688 = false;
}
else {
if (result_48687 != null) { result_48687 = (result_48687.slice(0, -1)).concat(commented_48613(v_48699)); } else { result_48687 = commented_48613(v_48699);};
}

}

res_48709 += 1;
}
} while(false);
} while(false);
} while(false);
result_48687 = nimCopy(null, (result_48687.slice(0,-1)).concat(makeNimstrLit("}")), NTI138);
break BeforeRet;
} while (false); 
return result_48687;
}
function commented_48812(self_48815) {

function HEX3Aanonymous_48820(n_48822) {

var result_48823 = null;
result_48823 = nimCopy(null, commented_48613(n_48822), NTI138);
return result_48823;
}
var result_48816 = null;
result_48816 = nimCopy(null, nsuJoinSep(map_48756(self_48815, HEX3Aanonymous_48820), makeNimstrLit("")), NTI138);
return result_48816;
}
function commented_48902(self_48904) {

var result_48905 = null;
if ((self_48904.comment === null)) {
result_48905 = nimCopy(null, makeNimstrLit("("), NTI138);
}
else {
result_48905 = nimCopy(null, (self_48904.comment.slice(0,-1)).concat(makeNimstrLit("(")), NTI138);
}

result_48905 = nimCopy(null, (result_48905.slice(0,-1)).concat(commented_48812(self_48904.nodes)), NTI138);
if ((self_48904.commentend === null)) {
result_48905 = nimCopy(null, (result_48905.slice(0,-1)).concat(makeNimstrLit(")")), NTI138);
}
else {
result_48905 = nimCopy(null, (result_48905.slice(0,-1)).concat(self_48904.commentend.slice(0,-1),makeNimstrLit(")")), NTI138);
}

return result_48905;
}
function commented_48894(self_48896) {

var result_48897 = null;
if ((self_48896.comment === null)) {
result_48897 = nimCopy(null, makeNimstrLit("["), NTI138);
}
else {
result_48897 = nimCopy(null, (self_48896.comment.slice(0,-1)).concat(makeNimstrLit("[")), NTI138);
}

result_48897 = nimCopy(null, (result_48897.slice(0,-1)).concat(commented_48812(self_48896.nodes)), NTI138);
if ((self_48896.commentend === null)) {
result_48897 = nimCopy(null, (result_48897.slice(0,-1)).concat(makeNimstrLit("]")), NTI138);
}
else {
result_48897 = nimCopy(null, (result_48897.slice(0,-1)).concat(self_48896.commentend.slice(0,-1),makeNimstrLit("]")), NTI138);
}

return result_48897;
}
function commented_48944(self_48946) {

var result_48947 = null;
result_48947 = nimCopy(null, makeNimstrLit(""), NTI138);
L1: do {
var i_48965 = 0;
var HEX3Atmp_48967 = 0;
HEX3Atmp_48967 = ((self_48946.keys != null ? self_48946.keys.length : 0) - 1);
var res_48970 = 0;
L2: do {
L3: while (true) {
if (!(res_48970 <= HEX3Atmp_48967)) break L3;
i_48965 = res_48970;
result_48947 = nimCopy(null, (result_48947.slice(0,-1)).concat(self_48946.keys[i_48965].slice(0,-1),commented_48613(self_48946.args[i_48965])), NTI138);
res_48970 += 1;
}
} while(false);
} while(false);
return result_48947;
}
function commented_48910(self_48912) {

var result_48913 = null;
if ((self_48912.comment === null)) {
result_48913 = nimCopy(null, makeNimstrLit("{"), NTI138);
}
else {
result_48913 = nimCopy(null, (self_48912.comment.slice(0,-1)).concat(makeNimstrLit("{")), NTI138);
}

result_48913 = nimCopy(null, (result_48913.slice(0,-1)).concat(commented_48812(self_48912.nodes)), NTI138);
if ((self_48912.commentend === null)) {
result_48913 = nimCopy(null, (result_48913.slice(0,-1)).concat(makeNimstrLit("}")), NTI138);
}
else {
result_48913 = nimCopy(null, (result_48913.slice(0,-1)).concat(self_48912.commentend.slice(0,-1),makeNimstrLit("}")), NTI138);
}

return result_48913;
}
function commented_48608(self_48610) {

var Tmp1;
var result_48611 = null;
if ((self_48610.comment === null)) {
Tmp1 = HEX24_48604(self_48610);
}
else {
Tmp1 = (self_48610.comment.slice(0,-1)).concat(HEX24_48604(self_48610));
}

result_48611 = nimCopy(null, Tmp1, NTI138);
return result_48611;
}
function commented_48613(self_48610) {

var result_48616 = null;
BeforeRet: do {
if (isObj(self_48610.m_type, NTI48199)) {
result_48616 = commented_48684(self_48610);
break BeforeRet;
}
else {
if (isObj(self_48610.m_type, NTI48192)) {
result_48616 = commented_48902(self_48610);
break BeforeRet;
}
else {
if (isObj(self_48610.m_type, NTI48196)) {
result_48616 = commented_48894(self_48610);
break BeforeRet;
}
else {
if (isObj(self_48610.m_type, NTI48158)) {
result_48616 = commented_48944(self_48610);
break BeforeRet;
}
else {
if (isObj(self_48610.m_type, NTI48194)) {
result_48616 = commented_48910(self_48610);
break BeforeRet;
}
else {
if (isObj(self_48610.m_type, NTI48123)) {
result_48616 = commented_48608(self_48610);
break BeforeRet;
}
}}}}}
} while (false); 
return result_48616;
}
function hash_48993(self_48995) {

var result_48996 = 0;
result_48996 = hash_41827(self_48995.word);
return result_48996;
}
function hash_42202(x_42204) {

var result_42205 = 0;
var y_42206 = /**/[(x_42204 + 1.0000000000000000e+00)];
result_42205 = y_42206[0];
return result_42205;
}
function hash_49017(self_49019) {

var result_49020 = 0;
result_49020 = hash_42202(self_49019.value);
return result_49020;
}
function hash_41801(x_41803) {

var result_41804 = 0;
result_41804 = x_41803;
return result_41804;
}
function hash_49006(self_49008) {

var result_49009 = 0;
result_49009 = hash_41801(self_49008.value);
return result_49009;
}
function hash_49041(self_49043) {

var result_49044 = 0;
result_49044 = hash_41801(1);
return result_49044;
}
function hash_49028(self_49030) {

var result_49031 = 0;
result_49031 = hash_41827(self_49030.value);
return result_49031;
}
function hash_49082(self_49084) {

var result_49085 = 0;
result_49085 = hash_41801(1);
return result_49085;
}
function hash_49045(self_49047) {

var result_49048 = 0;
result_49048 = hash_41801(0);
return result_49048;
}
function hash_49111(x_49116) {

var result_49117 = 0;
L1: do {
var it_49143 = null;
var i_49147 = 0;
L2: do {
L3: while (true) {
if (!(i_49147 < (x_49116 != null ? x_49116.length : 0))) break L3;
it_49143 = x_49116[i_49147];
result_49117 = HEX21HEX26_41004(result_49117, hash_48979(it_49143));
i_49147 += 1;
}
} while(false);
} while(false);
result_49117 = HEX21HEX24_41027(result_49117);
return result_49117;
}
function hash_49104(self_49106) {

var result_49107 = 0;
result_49107 = hash_49111(self_49106.nodes);
return result_49107;
}
function hash_49093(self_49095) {

var result_49096 = 0;
result_49096 = hash_41801(2);
return result_49096;
}
function hash_48974(self_48976) {

var result_48977 = 0;
raiseruntimeexception_48333(makeNimstrLit("Nodes need to implement hash"));
return result_48977;
}
function hash_48979(self_48976) {

var result_48982 = 0;
BeforeRet: do {
if (isObj(self_48976.m_type, NTI48127)) {
result_48982 = hash_48993(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48169)) {
result_48982 = hash_49017(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48166)) {
result_48982 = hash_49006(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48177)) {
result_48982 = hash_49041(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48172)) {
result_48982 = hash_49028(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48183)) {
result_48982 = hash_49082(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48179)) {
result_48982 = hash_49045(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48196)) {
result_48982 = hash_49104(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48181)) {
result_48982 = hash_49093(self_48976);
break BeforeRet;
}
else {
if (isObj(self_48976.m_type, NTI48123)) {
result_48982 = hash_48974(self_48976);
break BeforeRet;
}
}}}}}}}}}
} while (false); 
return result_48982;
}
function HEX3DHEX3D_49072(self_49074, other_49075) {

var result_49076 = false;
result_49076 = false;
return result_49076;
}
function HEX3DHEX3D_49067(self_49069, other_49070) {

var result_49071 = false;
result_49071 = true;
return result_49071;
}
function HEX3DHEX3D_49062(self_49064, other_49065) {

var result_49066 = false;
result_49066 = true;
return result_49066;
}
function HEX3DHEX3D_49077(self_49079, other_49080) {

var result_49081 = false;
result_49081 = false;
return result_49081;
}
function HEX3DHEX3D_49021(self_49023, other_49024) {

var Tmp1;
var result_49025 = false;
if (!isObj(other_49024.m_type, NTI48169)) Tmp1 = false; else {Tmp1 = (self_49023.value == other_49024.value); }result_49025 = Tmp1;
return result_49025;
}
function HEX3DHEX3D_49010(self_49012, other_49013) {

var Tmp1;
var result_49014 = false;
if (!isObj(other_49013.m_type, NTI48166)) Tmp1 = false; else {Tmp1 = (self_49012.value == other_49013.value); }result_49014 = Tmp1;
return result_49014;
}
function HEX3DHEX3D_48999(self_49001, other_49002) {

var Tmp1;
var result_49003 = false;
if (!isObj(other_49002.m_type, NTI48127)) Tmp1 = false; else {Tmp1 = eqStrings(self_49001.word, other_49002.word); }result_49003 = Tmp1;
return result_49003;
}
function seqtoptr_49166(x_49171) {

return x_49171}
function HEX3DHEX3D_49155(x_49160, y_49163) {

var result_49164 = false;
BeforeRet: do {
if ((seqtoptr_49166(x_49160) == seqtoptr_49166(y_49163))) {
result_49164 = true;
}
else {
if (((seqtoptr_49166(x_49160) == 0) || (seqtoptr_49166(y_49163) == 0))) {
result_49164 = false;
}
else {
if (((x_49160 != null ? x_49160.length : 0) == (y_49163 != null ? y_49163.length : 0))) {
L1: do {
var i_49230 = 0;
var HEX3Atmp_49232 = 0;
HEX3Atmp_49232 = ((x_49160 != null ? x_49160.length : 0) - 1);
var res_49235 = 0;
L2: do {
L3: while (true) {
if (!(res_49235 <= HEX3Atmp_49232)) break L3;
i_49230 = res_49235;
if (!(HEX3DHEX3D_48989(x_49160[i_49230], y_49163[i_49230]))) {
result_49164 = false;
break BeforeRet;
}

res_49235 += 1;
}
} while(false);
} while(false);
result_49164 = true;
}
}}
} while (false); 
return result_49164;
}
function HEX3DHEX3D_49148(self_49150, other_49151) {

var Tmp1;
var result_49152 = false;
if (!isObj(other_49151.m_type, NTI48196)) Tmp1 = false; else {Tmp1 = HEX3DHEX3D_49155(self_49150.nodes, other_49151.nodes); }result_49152 = Tmp1;
return result_49152;
}
function HEX3DHEX3D_49097(self_49099, other_49100) {

var result_49101 = false;
result_49101 = isObj(other_49100.m_type, NTI48181);
return result_49101;
}
function HEX3DHEX3D_49086(self_49088, other_49089) {

var result_49090 = false;
result_49090 = isObj(other_49089.m_type, NTI48183);
return result_49090;
}
function HEX3DHEX3D_49034(self_49036, other_49037) {

var Tmp1;
var result_49038 = false;
if (!isObj(other_49037.m_type, NTI48172)) Tmp1 = false; else {Tmp1 = eqStrings(self_49036.value, other_49037.value); }result_49038 = Tmp1;
return result_49038;
}
function HEX3DHEX3D_48983(self_48985, other_48986) {

var result_48987 = false;
raiseruntimeexception_48333(makeNimstrLit("Nodes need to implement =="));
return result_48987;
}
function HEX3DHEX3D_48989(self_48985, other_48986) {

var result_48992 = false;
BeforeRet: do {
if ((isObj(self_48985.m_type, NTI48177) & isObj(other_48986.m_type, NTI48179))) {
result_48992 = HEX3DHEX3D_49072(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48179) & isObj(other_48986.m_type, NTI48179))) {
result_48992 = HEX3DHEX3D_49067(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48177) & isObj(other_48986.m_type, NTI48177))) {
result_48992 = HEX3DHEX3D_49062(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48179) & isObj(other_48986.m_type, NTI48177))) {
result_48992 = HEX3DHEX3D_49077(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48169) & isObj(other_48986.m_type, NTI48123))) {
result_48992 = HEX3DHEX3D_49021(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48166) & isObj(other_48986.m_type, NTI48123))) {
result_48992 = HEX3DHEX3D_49010(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48127) & isObj(other_48986.m_type, NTI48123))) {
result_48992 = HEX3DHEX3D_48999(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48196) & isObj(other_48986.m_type, NTI48123))) {
result_48992 = HEX3DHEX3D_49148(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48181) & isObj(other_48986.m_type, NTI48123))) {
result_48992 = HEX3DHEX3D_49097(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48183) & isObj(other_48986.m_type, NTI48123))) {
result_48992 = HEX3DHEX3D_49086(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48172) & isObj(other_48986.m_type, NTI48123))) {
result_48992 = HEX3DHEX3D_49034(self_48985, other_48986);
break BeforeRet;
}
else {
if ((isObj(self_48985.m_type, NTI48123) & isObj(other_48986.m_type, NTI48123))) {
result_48992 = HEX3DHEX3D_48983(self_48985, other_48986);
break BeforeRet;
}
}}}}}}}}}}}
} while (false); 
return result_48992;
}
function value_49058(self_49060) {

var result_49061 = false;
result_49061 = false;
return result_49061;
}
function value_49049(self_49051) {

var result_49052 = false;
result_49052 = true;
return result_49052;
}
function value_49054(self_49051) {

var result_49057 = false;
BeforeRet: do {
if (isObj(self_49051.m_type, NTI48179)) {
result_49057 = value_49058(self_49051);
break BeforeRet;
}
else {
if (isObj(self_49051.m_type, NTI48175)) {
result_49057 = value_49049(self_49051);
break BeforeRet;
}
}
} while (false); 
return result_49057;
}
function print_49253(self_49256) {

function HEX3Aanonymous_49261(n_49263) {

var result_49264 = null;
result_49264 = nimCopy(null, print_49245(n_49263), NTI138);
return result_49264;
}
var result_49257 = null;
result_49257 = nimCopy(null, nsuJoinSep(map_48756(self_49256, HEX3Aanonymous_49261), makeNimstrLit(" ")), NTI138);
return result_49257;
}
function print_49283(self_49285) {

var result_49286 = null;
result_49286 = nimCopy(null, print_49253(self_49285.nodes), NTI138);
return result_49286;
}
function print_49249(self_49251) {

var result_49252 = null;
result_49252 = nimCopy(null, self_49251.value, NTI138);
return result_49252;
}
function print_49240(self_49242) {

var result_49243 = null;
result_49243 = nimCopy(null, HEX24_48604(self_49242), NTI138);
return result_49243;
}
function print_49245(self_49242) {

var result_49248 = null;
BeforeRet: do {
if (isObj(self_49242.m_type, NTI48196)) {
result_49248 = print_49283(self_49242);
break BeforeRet;
}
else {
if (isObj(self_49242.m_type, NTI48172)) {
result_49248 = print_49249(self_49242);
break BeforeRet;
}
else {
if (isObj(self_49242.m_type, NTI48123)) {
result_49248 = print_49240(self_49242);
break BeforeRet;
}
}}
} while (false); 
return result_49248;
}
function concat_50838(seqs_50844) {

var result_50846 = null;
var L_50847 = 0;
L1: do {
var seqitm_50873 = null;
var i_51015 = 0;
L2: do {
L3: while (true) {
if (!(i_51015 < (seqs_50844 != null ? seqs_50844.length : 0))) break L3;
seqitm_50873 = seqs_50844[i_51015];
L_50847 += (seqitm_50873 != null ? seqitm_50873.length : 0);
i_51015 += 1;
}
} while(false);
} while(false);
result_50846 = new Array(L_50847); for (var i=0;i<L_50847;++i) {result_50846[i]=null;}var i_50901 = 0;
L4: do {
var s_50909 = null;
var i_51025 = 0;
L5: do {
L6: while (true) {
if (!(i_51025 < (seqs_50844 != null ? seqs_50844.length : 0))) break L6;
s_50909 = seqs_50844[i_51025];
L7: do {
var itm_51002 = null;
var i_51020 = 0;
var L_51022 = (s_50909 != null ? s_50909.length : 0);
L8: do {
L9: while (true) {
if (!(i_51020 < L_51022)) break L9;
itm_51002 = s_50909[i_51020];
result_50846[i_50901] = itm_51002;
i_50901 += 1;
i_51020 += 1;
}
} while(false);
} while(false);
i_51025 += 1;
}
} while(false);
} while(false);
return result_50846;
}
function concat_51050(self_51052, nodes_51054) {

var result_51055 = null;
result_51055 = newcurly_50595(concat_50838([self_51052.nodes, nodes_51054]));
return result_51055;
}
function concat_51026(self_51028, nodes_51030) {

var result_51031 = null;
result_51031 = newparen_50557(concat_50838([self_51028.nodes, nodes_51030]));
return result_51031;
}
function concat_50823(self_50825, nodes_50827) {

var result_50828 = null;
result_50828 = newblok_50519(concat_50838([self_50825.nodes, nodes_50827]));
return result_50828;
}
function concat_50812(self_50814, nodes_50816) {

var result_50817 = null;
raiseruntimeexception_48333((makeNimstrLit("Should not happen...").slice(0,-1)).concat(HEX24_48604(self_50814).slice(0,-1),makeNimstrLit(" ").slice(0,-1),HEX24_48740(nodes_50816)));
return result_50817;
}
function concat_50819(self_50814, nodes_50816) {

var result_50822 = null;
BeforeRet: do {
if (isObj(self_50814.m_type, NTI48194)) {
result_50822 = concat_51050(self_50814, nodes_50816);
break BeforeRet;
}
else {
if (isObj(self_50814.m_type, NTI48192)) {
result_50822 = concat_51026(self_50814, nodes_50816);
break BeforeRet;
}
else {
if (isObj(self_50814.m_type, NTI48196)) {
result_50822 = concat_50823(self_50814, nodes_50816);
break BeforeRet;
}
else {
if (isObj(self_50814.m_type, NTI48188)) {
result_50822 = concat_50812(self_50814, nodes_50816);
break BeforeRet;
}
}}}
} while (false); 
return result_50822;
}
function clone_51623(self_51625) {

var result_51626 = null;
result_51626 = newvalue_50643(self_51625.value);
return result_51626;
}
function clone_51619(self_51621) {

var result_51622 = null;
result_51622 = self_51621;
return result_51622;
}
function newmap_50012(bindings_50017) {

var result_50018 = null;
result_50018 = newmap_49812();
L1: do {
var key_50028 = null;
var binding_50029 = null;
L2: do {
var h_50034 = 0;
var HEX3Atmp_50036 = 0;
HEX3Atmp_50036 = (bindings_50017.data != null ? (bindings_50017.data.length-1) : -1);
var res_50038 = 0;
L3: do {
L4: while (true) {
if (!(res_50038 <= HEX3Atmp_50036)) break L4;
h_50034 = res_50038;
if (isfilled_44263(bindings_50017.data[h_50034].Field0)) {
key_50028 = bindings_50017.data[h_50034].Field1;
binding_50029 = bindings_50017.data[h_50034].Field2;
makebinding_49605(result_50018, key_50028, binding_50029.val);
}

res_50038 += 1;
}
} while(false);
} while(false);
} while(false);
return result_50018;
}
function clone_51627(self_51629) {

var result_51630 = null;
result_51630 = newmap_50012(self_51629.bindings);
return result_51630;
}
function clone_51639(self_51641) {

var result_51642 = null;
result_51642 = newcurly_50595(self_51641.nodes);
return result_51642;
}
function clone_51635(self_51637) {

var result_51638 = null;
result_51638 = newparen_50557(self_51637.nodes);
return result_51638;
}
function clone_51631(self_51633) {

var result_51634 = null;
result_51634 = newblok_50519(self_51633.nodes);
return result_51634;
}
function clone_51610(self_51612) {

var result_51613 = null;
raiseruntimeexception_48333((makeNimstrLit("Should not happen...").slice(0,-1)).concat(HEX24_48604(self_51612)));
return result_51613;
}
function clone_51615(self_51612) {

var result_51618 = null;
BeforeRet: do {
if (isObj(self_51612.m_type, NTI48172)) {
result_51618 = clone_51623(self_51612);
break BeforeRet;
}
else {
if (isObj(self_51612.m_type, NTI48164)) {
result_51618 = clone_51619(self_51612);
break BeforeRet;
}
else {
if (isObj(self_51612.m_type, NTI48199)) {
result_51618 = clone_51627(self_51612);
break BeforeRet;
}
else {
if (isObj(self_51612.m_type, NTI48194)) {
result_51618 = clone_51639(self_51612);
break BeforeRet;
}
else {
if (isObj(self_51612.m_type, NTI48192)) {
result_51618 = clone_51635(self_51612);
break BeforeRet;
}
else {
if (isObj(self_51612.m_type, NTI48196)) {
result_51618 = clone_51631(self_51612);
break BeforeRet;
}
else {
if (isObj(self_51612.m_type, NTI48123)) {
result_51618 = clone_51610(self_51612);
break BeforeRet;
}
}}}}}}
} while (false); 
return result_51618;
}
function nsuStartsWith(s_35310, prefix_35311) {

var result_35312 = false;
BeforeRet: do {
var i_35313 = 0;
L1: do {
L2: while (true) {
if (!true) break L2;
if ((prefix_35311[i_35313] == 0)) {
result_35312 = true;
break BeforeRet;
}

if (!((s_35310[i_35313] == prefix_35311[i_35313]))) {
result_35312 = false;
break BeforeRet;
}

i_35313 += 1;
}
} while(false);
} while (false); 
return result_35312;
}
function npuParseHex(s_24253, number_24255, number_24255_Idx, start_24256, maxlen_24257) {

var Tmp1;
var result_24258 = 0;
var i_24259 = start_24256;
var founddigit_24260 = false;
if (((s_24253[i_24259] == 48) && ((s_24253[(i_24259 + 1)] == 120) || (s_24253[(i_24259 + 1)] == 88)))) {
i_24259 += 2;
}
else {
if ((s_24253[i_24259] == 35)) {
i_24259 += 1;
}
}
if ((maxlen_24257 == 0)) {
Tmp1 = (s_24253 != null ? s_24253.length-1 : 0);
}
else {
Tmp1 = (i_24259 + maxlen_24257);
}

var last_24279 = Tmp1;
L2: do {
L3: while (true) {
if (!(i_24259 < last_24279)) break L3;
switch (s_24253[i_24259]) {
case 95: 
break;
case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: number_24255[number_24255_Idx] = ((number_24255[number_24255_Idx] << 4) | (s_24253[i_24259] - 48));
founddigit_24260 = true;

break;
case 97: case 98: case 99: case 100: case 101: case 102: number_24255[number_24255_Idx] = ((number_24255[number_24255_Idx] << 4) | ((s_24253[i_24259] - 97) + 10));
founddigit_24260 = true;

break;
case 65: case 66: case 67: case 68: case 69: case 70: number_24255[number_24255_Idx] = ((number_24255[number_24255_Idx] << 4) | ((s_24253[i_24259] - 65) + 10));
founddigit_24260 = true;

break;
default: 
break L2;
break;
}
i_24259 += 1;
}
} while(false);
if (founddigit_24260) {
result_24258 = (i_24259 - start_24256);
}

return result_24258;
}
function nsuEndsWith(s_35331, suffix_35332) {

var result_35333 = false;
BeforeRet: do {
var i_35334 = 0;
var j_35335 = ((s_35331 != null ? s_35331.length-1 : 0) - (suffix_35332 != null ? suffix_35332.length-1 : 0));
L1: do {
L2: while (true) {
if (!((i_35334 + j_35335) < (s_35331 != null ? s_35331.length-1 : 0))) break L2;
if (!((s_35331[(i_35334 + j_35335)] == suffix_35332[i_35334]))) {
result_35333 = false;
break BeforeRet;
}

i_35334 += 1;
}
} while(false);
if ((suffix_35332[i_35334] == 0)) {
result_35333 = true;
break BeforeRet;
}

} while (false); 
return result_35333;
}
function nsuUnescape(s_36717, prefix_36718, suffix_36719) {

var result_36720 = null;
result_36720 = nimCopy(null, mnewString(0), NTI138);
var i_36721 = (prefix_36718 != null ? prefix_36718.length-1 : 0);
if (!(nsuStartsWith(s_36717, prefix_36718))) {
var e_36725 = null;
e_36725 = {m_type: NTI3246, parent: null, name: null, message: null, trace: null};
e_36725.message = nimCopy(null, (makeNimstrLit("String does not start with a prefix of: ").slice(0,-1)).concat(prefix_36718), NTI138);
raiseException(e_36725, "ValueError");
}

L1: do {
L2: while (true) {
if (!true) break L2;
if ((i_36721 == ((s_36717 != null ? s_36717.length-1 : 0) - (suffix_36719 != null ? suffix_36719.length-1 : 0)))) {
break L1;
}

switch (s_36717[i_36721]) {
case 92: switch (s_36717[(i_36721 + 1)]) {
case 120: i_36721 += 2;
var c_36744 = [0];
i_36721 += npuParseHex(s_36717, c_36744, 0, i_36721, 2);
if (result_36720 != null) { addChar(result_36720, c_36744[0]); } else { result_36720 = [c_36744[0], 0]; };
i_36721 -= 2;

break;
case 92: if (result_36720 != null) { addChar(result_36720, 92); } else { result_36720 = [92, 0]; };

break;
case 39: if (result_36720 != null) { addChar(result_36720, 39); } else { result_36720 = [39, 0]; };

break;
case 34: if (result_36720 != null) { addChar(result_36720, 34); } else { result_36720 = [34, 0]; };

break;
default: 
if (result_36720 != null) { result_36720 = (result_36720.slice(0, -1)).concat((makeNimstrLit("\\").slice(0,-1)).concat([s_36717[(i_36721 + 1)], 0])); } else { result_36720 = (makeNimstrLit("\\").slice(0,-1)).concat([s_36717[(i_36721 + 1)], 0]);};
break;
}
i_36721 += 1;

break;
case 0: break L1;

break;
default: 
if (result_36720 != null) { addChar(result_36720, s_36717[i_36721]); } else { result_36720 = [s_36717[i_36721], 0]; };
break;
}
i_36721 += 1;
}
} while(false);
if (!(nsuEndsWith(s_36717, suffix_36719))) {
var e_36785 = null;
e_36785 = {m_type: NTI3246, parent: null, name: null, message: null, trace: null};
e_36785.message = nimCopy(null, (makeNimstrLit("String does not end with a suffix of: ").slice(0,-1)).concat(suffix_36719), NTI138);
raiseException(e_36785, "ValueError");
}

return result_36720;
}
function parsevalue_51663(self_51665, s_51666) {

var Tmp1;
var Tmp2;
var result_51667 = null;
if (!(1 < (s_51666 != null ? s_51666.length-1 : 0))) Tmp2 = false; else {Tmp2 = (s_51666[0] == 34); }if (!Tmp2) Tmp1 = false; else {Tmp1 = (s_51666[((s_51666 != null ? s_51666.length-1 : 0) - 1)] == 34); }if (Tmp1) {
result_51667 = newvalue_50643(nsuUnescape(s_51666, makeNimstrLit("\""), makeNimstrLit("\"")));
}

return result_51667;
}
function nsuIsDigitChar(c_32461) {

var result_32462 = false;
BeforeRet: do {
result_32462 = (SetConstr([48, 57])[c_32461] != undefined);
break BeforeRet;
} while (false); 
return result_32462;
}
function tentothepowerof_18918(b_18920) {

var result_18921 = 0.0;
var b_18922 = b_18920;
var a_18923 = 1.0000000000000000e+01;
result_18921 = 1.0000000000000000e+00;
L1: do {
L2: while (true) {
if (!true) break L2;
if (((b_18922 & 1) == 1)) {
result_18921 = (result_18921 * a_18923);
}

b_18922 = ((b_18922 >>> 0) >>> 1);
if ((b_18922 == 0)) {
break L1;
}

a_18923 = (a_18923 * a_18923);
}
} while(false);
return result_18921;
}
function npuParseFloat(s_25047, number_25049, number_25049_Idx, start_25050) {

var result_25051 = 0;
var bf_25052 = [0.0];
result_25051 = nimParseBiggestFloat(s_25047, bf_25052, 0, start_25050);
if (!((result_25051 == 0))) {
number_25049[number_25049_Idx] = bf_25052[0];
}

return result_25051;
}
function nsuParseFloat(s_34538) {

var Tmp1;
var result_34539 = [0.0];
var L_34541 = npuParseFloat(s_34538, result_34539, 0, 0);
if (!((L_34541 == (s_34538 != null ? s_34538.length-1 : 0)))) Tmp1 = true; else {Tmp1 = (L_34541 == 0); }if (Tmp1) {
var e_34545 = null;
e_34545 = {m_type: NTI3246, parent: null, name: null, message: null, trace: null};
e_34545.message = nimCopy(null, (makeNimstrLit("invalid float: ").slice(0,-1)).concat(s_34538), NTI138);
raiseException(e_34545, "ValueError");
}

return result_34539[0];
}
function parsevalue_51658(self_51660, s_51661) {

var Tmp1;
var result_51662 = null;
BeforeRet: do {
if (!(0 < (s_51661 != null ? s_51661.length-1 : 0))) Tmp1 = false; else {Tmp1 = ((nsuIsDigitChar(s_51661[0]) || (s_51661[0] == 43)) || (s_51661[0] == 45)); }if (Tmp1) {
++excHandler;
try {
result_51662 = newvalue_50638(nsuParseFloat(s_51661));
break BeforeRet;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
if (lastJSError && (isObj(lastJSError.m_type, NTI3246))) {
result_51662 = null;
break BeforeRet;
}
else {
reraiseException();
}
lastJSError = prevJSError;
} finally {
}
}

} while (false); 
return result_51662;
}
function rawparseint_24757(s_24759, b_24761, b_24761_Idx, start_24762) {

var result_24763 = 0;
var sign_24764 = -1;
var i_24765 = start_24762;
if ((s_24759[i_24765] == 43)) {
i_24765 = addInt(i_24765, 1);
}
else {
if ((s_24759[i_24765] == 45)) {
i_24765 = addInt(i_24765, 1);
sign_24764 = 1;
}
}
if ((SetConstr([48, 57])[s_24759[i_24765]] != undefined)) {
b_24761[b_24761_Idx] = 0;
L1: do {
L2: while (true) {
if (!(SetConstr([48, 57])[s_24759[i_24765]] != undefined)) break L2;
b_24761[b_24761_Idx] = subInt(mulInt(b_24761[b_24761_Idx], 10), subInt(s_24759[i_24765], 48));
i_24765 = addInt(i_24765, 1);
L3: do {
L4: while (true) {
if (!(s_24759[i_24765] == 95)) break L4;
i_24765 = addInt(i_24765, 1);
}
} while(false);
}
} while(false);
b_24761[b_24761_Idx] = mulInt(b_24761[b_24761_Idx], sign_24764);
result_24763 = subInt(i_24765, start_24762);
}

return result_24763;
}
function npuParseBiggestInt(s_24846, number_24848, number_24848_Idx, start_24849) {

var result_24850 = 0;
var res_24851 = [0];
result_24850 = rawparseint_24757(s_24846, res_24851, 0, start_24849);
number_24848[number_24848_Idx] = res_24851[0];
return result_24850;
}
function npuParseInt(s_24856, number_24858, number_24858_Idx, start_24859) {

var Tmp1;
var Tmp2;
var result_24860 = 0;
var res_24861 = [0];
result_24860 = npuParseBiggestInt(s_24856, res_24861, 0, start_24859);
if (!true) Tmp1 = false; else {if ((res_24861[0] < -2147483648)) Tmp2 = true; else {Tmp2 = (2147483647 < res_24861[0]); }Tmp1 = Tmp2; }if (Tmp1) {
var e_24871 = null;
e_24871 = {m_type: NTI3240, parent: null, name: null, message: null, trace: null};
e_24871.message = nimCopy(null, makeNimstrLit("overflow"), NTI138);
raiseException(e_24871, "OverflowError");
}
else {
if (!((result_24860 == 0))) {
number_24858[number_24858_Idx] = res_24861[0];
}
}
return result_24860;
}
function nsuParseInt(s_34458) {

var Tmp1;
var result_34459 = [0];
var L_34461 = npuParseInt(s_34458, result_34459, 0, 0);
if (!((L_34461 == (s_34458 != null ? s_34458.length-1 : 0)))) Tmp1 = true; else {Tmp1 = (L_34461 == 0); }if (Tmp1) {
var e_34465 = null;
e_34465 = {m_type: NTI3246, parent: null, name: null, message: null, trace: null};
e_34465.message = nimCopy(null, (makeNimstrLit("invalid integer: ").slice(0,-1)).concat(s_34458), NTI138);
raiseException(e_34465, "ValueError");
}

return result_34459[0];
}
function parsevalue_51653(self_51655, s_51656) {

var Tmp1;
var result_51657 = null;
BeforeRet: do {
if (!(0 < (s_51656 != null ? s_51656.length-1 : 0))) Tmp1 = false; else {Tmp1 = ((nsuIsDigitChar(s_51656[0]) || (s_51656[0] == 43)) || (s_51656[0] == 45)); }if (Tmp1) {
++excHandler;
try {
result_51657 = newvalue_50633(nsuParseInt(s_51656));
break BeforeRet;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
if (lastJSError && (isObj(lastJSError.m_type, NTI3246))) {
result_51657 = null;
break BeforeRet;
}
else {
reraiseException();
}
lastJSError = prevJSError;
} finally {
}
}

} while (false); 
return result_51657;
}
function parsevalue_51643(self_51645, s_51646) {

var result_51647 = null;
return result_51647;
}
function parsevalue_51649(self_51645, s_51646) {

var result_51652 = null;
BeforeRet: do {
if (isObj(self_51645.m_type, NTI48121)) {
result_51652 = parsevalue_51663(self_51645, s_51646);
break BeforeRet;
}
else {
if (isObj(self_51645.m_type, NTI48119)) {
result_51652 = parsevalue_51658(self_51645, s_51646);
break BeforeRet;
}
else {
if (isObj(self_51645.m_type, NTI48117)) {
result_51652 = parsevalue_51653(self_51645, s_51646);
break BeforeRet;
}
else {
if (isObj(self_51645.m_type, NTI48114)) {
result_51652 = parsevalue_51643(self_51645, s_51646);
break BeforeRet;
}
}}}
} while (false); 
return result_51652;
}
function prefixlength_51699(self_51701) {

var result_51702 = 0;
result_51702 = 1;
return result_51702;
}
function prefixlength_51668(self_51670) {

var result_51671 = 0;
result_51671 = 0;
return result_51671;
}
function prefixlength_51673(self_51670) {

var result_51676 = 0;
BeforeRet: do {
if (isObj(self_51670.m_type, NTI48121)) {
result_51676 = prefixlength_51699(self_51670);
break BeforeRet;
}
else {
if (isObj(self_51670.m_type, NTI48114)) {
result_51676 = prefixlength_51668(self_51670);
break BeforeRet;
}
}
} while (false); 
return result_51676;
}
function tokenready_51709(self_51711, token_51712, ch_51713) {

var Tmp1;
var result_51714 = null;
BeforeRet: do {
if (!(ch_51713 == 34)) Tmp1 = false; else {Tmp1 = !((token_51712[((token_51712 != null ? token_51712.length-1 : 0) - 1)] == 92)); }if (Tmp1) {
result_51714 = nimCopy(null, (token_51712.slice(0,-1)).concat([ch_51713, 0]), NTI138);
break BeforeRet;
}
else {
result_51714 = nimCopy(null, null, NTI138);
break BeforeRet;
}

} while (false); 
return result_51714;
}
function tokenready_51677(self_51679, token_51680, ch_51681) {

var result_51682 = null;
return result_51682;
}
function tokenready_51684(self_51679, token_51680, ch_51681) {

var result_51687 = null;
BeforeRet: do {
if (isObj(self_51679.m_type, NTI48121)) {
result_51687 = tokenready_51709(self_51679, token_51680, ch_51681);
break BeforeRet;
}
else {
if (isObj(self_51679.m_type, NTI48114)) {
result_51687 = tokenready_51677(self_51679, token_51680, ch_51681);
break BeforeRet;
}
}
} while (false); 
return result_51687;
}
function tokenstart_51703(self_51705, token_51706, ch_51707) {

var result_51708 = false;
result_51708 = (ch_51707 == 34);
return result_51708;
}
function tokenstart_51688(self_51690, token_51691, ch_51692) {

var result_51693 = false;
result_51693 = false;
return result_51693;
}
function tokenstart_51695(self_51690, token_51691, ch_51692) {

var result_51698 = false;
BeforeRet: do {
if (isObj(self_51690.m_type, NTI48121)) {
result_51698 = tokenstart_51703(self_51690, token_51691, ch_51692);
break BeforeRet;
}
else {
if (isObj(self_51690.m_type, NTI48114)) {
result_51698 = tokenstart_51688(self_51690, token_51691, ch_51692);
break BeforeRet;
}
}
} while (false); 
return result_51698;
}
function haslocals_53106(self_53108) {

var result_53109 = false;
result_53109 = false;
return result_53109;
}
function haslocals_53097(self_53099) {

var result_53100 = false;
result_53100 = true;
return result_53100;
}
function haslocals_53102(self_53099) {

var result_53105 = false;
BeforeRet: do {
if (isObj(self_53099.m_type, NTI52856)) {
result_53105 = haslocals_53106(self_53099);
break BeforeRet;
}
else {
if (isObj(self_53099.m_type, NTI52843)) {
result_53105 = haslocals_53097(self_53099);
break BeforeRet;
}
}
} while (false); 
return result_53105;
}
function outer_53119(self_53121) {

var result_53122 = null;
result_53122 = self_53121.body.parent;
return result_53122;
}
function outer_53110(self_53112) {

var result_53113 = null;
result_53113 = self_53112.parent;
return result_53113;
}
function outer_53115(self_53112) {

var result_53118 = null;
BeforeRet: do {
if (isObj(self_53112.m_type, NTI52854)) {
result_53118 = outer_53119(self_53112);
break BeforeRet;
}
else {
if (isObj(self_53112.m_type, NTI52843)) {
result_53118 = outer_53110(self_53112);
break BeforeRet;
}
}
} while (false); 
return result_53118;
}
function makebinding_53672(self_53674, key_53675, val_53676) {

var result_53677 = null;
if ((self_53674.locals === null)) {
self_53674.locals = newmap_49812();
}

result_53677 = makebinding_49605(self_53674.locals, key_53675, val_53676);
return result_53677;
}
function makebinding_53661(self_53663, key_53664, val_53665) {

var result_53666 = null;
raiseruntimeexception_48333(makeNimstrLit("This activation should not be called with makeBinding"));
return result_53666;
}
function makebinding_53668(self_53663, key_53664, val_53665) {

var result_53671 = null;
BeforeRet: do {
if (isObj(self_53663.m_type, NTI52851)) {
result_53671 = makebinding_53672(self_53663, key_53664, val_53665);
break BeforeRet;
}
else {
if (isObj(self_53663.m_type, NTI52843)) {
result_53671 = makebinding_53661(self_53663, key_53664, val_53665);
break BeforeRet;
}
}
} while (false); 
return result_53671;
}
function makelocalbinding_53792(spry_53794, key_53795, val_53796) {

var result_53797 = null;
BeforeRet: do {
L1: do {
var activation_53798 = null;
var HEX3Atmp_53800 = null;
HEX3Atmp_53800 = spry_53794.currentactivation;
var activation_53804 = HEX3Atmp_53800;
L2: do {
L3: while (true) {
if (!!((activation_53804 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(haslocals_53102(activation_53804))) break L5;
activation_53804 = outer_53115(activation_53804);
}
} while(false);
activation_53798 = activation_53804;
result_53797 = makebinding_53668(activation_53798, key_53795, val_53796);
break BeforeRet;
activation_53804 = outer_53115(activation_53804);
}
} while(false);
} while(false);
} while (false); 
return result_53797;
}
function setlocalbinding_53805(spry_53807, key_53808, value_53809) {

var result_53810 = null;
result_53810 = lookup_53521(spry_53807, key_53808);
if (!((result_53810 === null))) {
result_53810.val = value_53809;
}
else {
result_53810 = makelocalbinding_53792(spry_53807, key_53808, value_53809);
}

return result_53810;
}
function eval_54100(self_54102, spry_54103) {

var result_54104 = null;
result_54104 = next_53440(argparent_53613(spry_54103));
setlocalbinding_53805(spry_54103, self_54102, result_54104);
return result_54104;
}
function newactivation_53055(funk_53057) {

var result_53058 = null;
result_53058 = {body: funk_53057, m_type: NTI52854, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, comment: null, tags: null};
return result_53058;
}
function setself_53848(spry_53850) {

var result_53851 = null;
spry_53850.lastself = spry_53850.currentactivation.last;
result_53851 = eval_52925(spry_53850.lastself, spry_53850);
if ((result_53851 === null)) {
spry_53850.currentactivation.self = spry_53850.nilval;
result_53851 = spry_53850.nilval;
}
else {
spry_53850.currentactivation.self = result_53851;
}

return result_53851;
}
function eval_54141(self_54143, spry_54144) {

var result_54145 = null;
var act_54146 = newactivation_53055(self_54143);
setself_53848(spry_54144);
result_54145 = eval_54110(act_54146, spry_54144);
return result_54145;
}
function eval_54105(self_54107, spry_54108) {

var result_54109 = null;
result_54109 = self_54107.prok(spry_54108);
return result_54109;
}
function newactivation_53065(body_53067) {

var result_53068 = null;
result_53068 = {body: body_53067, m_type: NTI52856, last: null, self: null, returned: false, parent: null, pos: 0, comment: null, tags: null};
return result_53068;
}
function eval_54147(self_54149, spry_54150) {

var result_54151 = null;
result_54151 = eval_54110(newactivation_53065(self_54149), spry_54150);
return result_54151;
}
function eval_54183(self_54185, spry_54186) {

var result_54187 = null;
result_54187 = self_54185;
return result_54187;
}
function eval_54136(self_54138, spry_54139) {

var result_54140 = null;
result_54140 = eval_54110(newactivation_53055(self_54138), spry_54139);
return result_54140;
}
function eval_54178(self_54180, spry_54181) {

var result_54182 = null;
result_54182 = self_54180;
return result_54182;
}
function newactivation_53070(body_53072) {

var result_53073 = null;
result_53073 = {body: body_53072, m_type: NTI52858, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, comment: null, tags: null};
result_53073.locals = newmap_49812();
return result_53073;
}
function eval_54152(self_54154, spry_54155) {

var result_54156 = null;
BeforeRet: do {
var activation_54157 = newactivation_53070(self_54154);
eval_54110(activation_54157, spry_54155);
activation_54157.returned = true;
result_54156 = activation_54157.locals;
break BeforeRet;
} while (false); 
return result_54156;
}
function eval_54188(self_54190, spry_54191) {

var result_54192 = null;
result_54192 = self_54190;
return result_54192;
}
function lookup_53507(self_53509, key_53510) {

var result_53511 = null;
BeforeRet: do {
if (!((self_53509.locals === null))) {
result_53511 = lookup_49287(self_53509.locals, key_53510);
break BeforeRet;
}

} while (false); 
return result_53511;
}
function lookup_53497(self_53499, key_53500) {

var result_53501 = null;
return result_53501;
}
function lookup_53503(self_53499, key_53500) {

var result_53506 = null;
BeforeRet: do {
if (isObj(self_53499.m_type, NTI52851)) {
result_53506 = lookup_53507(self_53499, key_53500);
break BeforeRet;
}
else {
if (isObj(self_53499.m_type, NTI52843)) {
result_53506 = lookup_53497(self_53499, key_53500);
break BeforeRet;
}
}
} while (false); 
return result_53506;
}
function lookupparent_53638(spry_53640, key_53641) {

var result_53642 = null;
BeforeRet: do {
var inparent_53643 = false;
L1: do {
var activation_53644 = null;
var HEX3Atmp_53656 = null;
HEX3Atmp_53656 = spry_53640.currentactivation;
var activation_53660 = HEX3Atmp_53656;
L2: do {
L3: while (true) {
if (!!((activation_53660 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(haslocals_53102(activation_53660))) break L5;
activation_53660 = outer_53115(activation_53660);
}
} while(false);
activation_53644 = activation_53660;
if (inparent_53643) {
var hit_53645 = lookup_53503(activation_53644, key_53641);
if (!((hit_53645 === null))) {
result_53642 = hit_53645;
break BeforeRet;
}

}
else {
inparent_53643 = true;
}

activation_53660 = outer_53115(activation_53660);
}
} while(false);
} while(false);
} while (false); 
return result_53642;
}
function eval_54073(self_54075, spry_54076) {

var Tmp1;
var result_54077 = null;
var hit_54078 = lookupparent_53638(spry_54076, self_54075);
if ((hit_54078 === null)) {
Tmp1 = spry_54076.undefval;
}
else {
Tmp1 = eval_52925(hit_54078.val, spry_54076);
}

result_54077 = Tmp1;
return result_54077;
}
function eval_54193(self_54195, spry_54196) {

var result_54197 = null;
result_54197 = self_54195.val;
return result_54197;
}
function eval_54092(self_54094, spry_54095) {

var result_54096 = null;
var previousactivation_54097 = argparent_53613(spry_54095);
var arg_54098 = next_53440(previousactivation_54097);
var here_54099 = spry_54095.currentactivation;
spry_54095.currentactivation = previousactivation_54097;
result_54096 = eval_52925(arg_54098, spry_54095);
spry_54095.currentactivation = here_54099;
setlocalbinding_53805(spry_54095, self_54094, result_54096);
return result_54096;
}
function eval_54087(self_54089, spry_54090) {

var result_54091 = null;
result_54091 = self_54089;
return result_54091;
}
function lookupself_53625(spry_53627, key_53628) {

var result_53629 = null;
BeforeRet: do {
var self_53630 = spry_53627.currentactivation.self;
if (isObj(self_53630.m_type, NTI48199)) {
result_53629 = lookup_49287(self_53630, key_53628);
break BeforeRet;
}

} while (false); 
return result_53629;
}
function eval_54003(self_54005, spry_54006) {

var Tmp1;
var result_54007 = null;
var hit_54008 = lookupself_53625(spry_54006, self_54005);
if ((hit_54008 === null)) {
Tmp1 = spry_54006.undefval;
}
else {
Tmp1 = hit_54008.val;
}

result_54007 = Tmp1;
return result_54007;
}
function eval_53975(self_53977, spry_53978) {

var Tmp1;
var result_53979 = null;
var hit_53980 = lookup_53521(spry_53978, self_53977);
if ((hit_53980 === null)) {
Tmp1 = spry_53978.undefval;
}
else {
Tmp1 = hit_53980.val;
}

result_53979 = Tmp1;
return result_53979;
}
function eval_53989(self_53991, spry_53992) {

var Tmp1;
var result_53993 = null;
var hit_53994 = lookup_53521(spry_53992, self_53991);
if ((hit_53994 === null)) {
Tmp1 = spry_53992.undefval;
}
else {
Tmp1 = hit_53994.val;
}

result_53993 = Tmp1;
return result_53993;
}
function eval_54017(self_54019, spry_54020) {

var Tmp1;
var result_54021 = null;
var hit_54022 = lookupparent_53638(spry_54020, self_54019);
if ((hit_54022 === null)) {
Tmp1 = spry_54020.undefval;
}
else {
Tmp1 = hit_54022.val;
}

result_54021 = Tmp1;
return result_54021;
}
function eval_54059(self_54061, spry_54062) {

var Tmp1;
var result_54063 = null;
var hit_54064 = lookupself_53625(spry_54062, self_54061);
if ((hit_54064 === null)) {
Tmp1 = spry_54062.undefval;
}
else {
Tmp1 = eval_52925(hit_54064.val, spry_54062);
}

result_54063 = Tmp1;
return result_54063;
}
function eval_54031(self_54033, spry_54034) {

var Tmp1;
var result_54035 = null;
var hit_54036 = lookup_53521(spry_54034, self_54033);
if ((hit_54036 === null)) {
Tmp1 = spry_54034.undefval;
}
else {
Tmp1 = eval_52925(hit_54036.val, spry_54034);
}

result_54035 = Tmp1;
return result_54035;
}
function eval_54045(self_54047, spry_54048) {

var Tmp1;
var result_54049 = null;
var hit_54050 = lookup_53521(spry_54048, self_54047);
if ((hit_54050 === null)) {
Tmp1 = spry_54048.undefval;
}
else {
Tmp1 = eval_52925(hit_54050.val, spry_54048);
}

result_54049 = Tmp1;
return result_54049;
}
function eval_53961(self_53963, spry_53964) {

var result_53965 = null;
BeforeRet: do {
var binding_53966 = lookup_53521(spry_53964, self_53963);
if ((binding_53966 === null)) {
raiseruntimeexception_48333((makeNimstrLit("Word not found: ").slice(0,-1)).concat(HEX24_48604(self_53963)));
}

result_53965 = eval_52925(binding_53966.val, spry_53964);
break BeforeRet;
} while (false); 
return result_53965;
}
function eval_52920(self_52922, spry_52923) {

var result_53960 = null;
raiseruntimeexception_48333((makeNimstrLit("Should not happen ").slice(0,-1)).concat(HEX24_48604(self_52922)));
return result_53960;
}
function eval_52925(self_52922, spry_52923) {

var result_53960 = null;
BeforeRet: do {
if (isObj(self_52922.m_type, NTI48156)) {
result_53960 = eval_54100(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI52841)) {
result_53960 = eval_54141(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI52834)) {
result_53960 = eval_54105(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48192)) {
result_53960 = eval_54147(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48164)) {
result_53960 = eval_54183(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI52838)) {
result_53960 = eval_54136(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48196)) {
result_53960 = eval_54178(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48194)) {
result_53960 = eval_54152(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48199)) {
result_53960 = eval_54188(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48143)) {
result_53960 = eval_54073(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48225)) {
result_53960 = eval_54193(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48145)) {
result_53960 = eval_54092(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48134)) {
result_53960 = eval_54087(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48152)) {
result_53960 = eval_54003(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48149)) {
result_53960 = eval_53975(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48147)) {
result_53960 = eval_53989(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48154)) {
result_53960 = eval_54017(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48141)) {
result_53960 = eval_54059(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48138)) {
result_53960 = eval_54031(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48136)) {
result_53960 = eval_54045(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48127)) {
result_53960 = eval_53961(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48123)) {
result_53960 = eval_52920(self_52922, spry_52923);
break BeforeRet;
}
else {
if (isObj(self_52922.m_type, NTI48123)) {
result_53960 = eval_52920(self_52922, spry_52923);
break BeforeRet;
}
}}}}}}}}}}}}}}}}}}}}}}
} while (false); 
return result_53960;
}
function evaldo_54168(self_54170, spry_54171) {

var result_54172 = null;
result_54172 = eval_54110(newactivation_53065(self_54170), spry_54171);
return result_54172;
}
function evaldo_54163(self_54165, spry_54166) {

var result_54167 = null;
result_54167 = eval_54110(newactivation_53060(self_54165), spry_54166);
return result_54167;
}
function evaldo_54173(self_54175, spry_54176) {

var result_54177 = null;
result_54177 = eval_54110(newactivation_53070(self_54175), spry_54176);
return result_54177;
}
function evaldo_52927(self_52929, spry_52930) {

var result_54162 = null;
raiseruntimeexception_48333(makeNimstrLit("Do only works for sequences"));
return result_54162;
}
function evaldo_52932(self_52929, spry_52930) {

var result_54162 = null;
BeforeRet: do {
if (isObj(self_52929.m_type, NTI48192)) {
result_54162 = evaldo_54168(self_52929, spry_52930);
break BeforeRet;
}
else {
if (isObj(self_52929.m_type, NTI48196)) {
result_54162 = evaldo_54163(self_52929, spry_52930);
break BeforeRet;
}
else {
if (isObj(self_52929.m_type, NTI48194)) {
result_54162 = evaldo_54173(self_52929, spry_52930);
break BeforeRet;
}
else {
if (isObj(self_52929.m_type, NTI48123)) {
result_54162 = evaldo_52927(self_52929, spry_52930);
break BeforeRet;
}
else {
if (isObj(self_52929.m_type, NTI48123)) {
result_54162 = evaldo_52927(self_52929, spry_52930);
break BeforeRet;
}
}}}}
} while (false); 
return result_54162;
}
function HEX2B_53175(a_53177, b_53178) {

var result_53179 = null;
result_53179 = newvalue_50638((a_53177.value + b_53178.value));
return result_53179;
}
function HEX2B_53169(a_53171, b_53172) {

var result_53173 = null;
result_53173 = newvalue_50638((a_53171.value + b_53172.value));
return result_53173;
}
function HEX2B_53164(a_53166, b_53167) {

var result_53168 = null;
result_53168 = newvalue_50633((a_53166.value + b_53167.value));
return result_53168;
}
function HEX2B_53181(a_53183, b_53184) {

var result_53185 = null;
result_53185 = newvalue_50638((a_53183.value + b_53184.value));
return result_53185;
}
function HEX2B_53154(a_53156, b_53157) {

var result_53158 = null;
raiseruntimeexception_48333((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_48604(a_53156).slice(0,-1),makeNimstrLit(" + ").slice(0,-1),HEX24_48604(b_53157)));
return result_53158;
}
function HEX2B_53160(a_53156, b_53157) {

var result_53163 = null;
BeforeRet: do {
if ((isObj(a_53156.m_type, NTI48169) & isObj(b_53157.m_type, NTI48166))) {
result_53163 = HEX2B_53175(a_53156, b_53157);
break BeforeRet;
}
else {
if ((isObj(a_53156.m_type, NTI48166) & isObj(b_53157.m_type, NTI48169))) {
result_53163 = HEX2B_53169(a_53156, b_53157);
break BeforeRet;
}
else {
if ((isObj(a_53156.m_type, NTI48166) & isObj(b_53157.m_type, NTI48166))) {
result_53163 = HEX2B_53164(a_53156, b_53157);
break BeforeRet;
}
else {
if ((isObj(a_53156.m_type, NTI48169) & isObj(b_53157.m_type, NTI48169))) {
result_53163 = HEX2B_53181(a_53156, b_53157);
break BeforeRet;
}
else {
if ((isObj(a_53156.m_type, NTI48123) & isObj(b_53157.m_type, NTI48123))) {
result_53163 = HEX2B_53154(a_53156, b_53157);
break BeforeRet;
}
}}}}
} while (false); 
return result_53163;
}
function HEX2D_53207(a_53209, b_53210) {

var result_53211 = null;
result_53211 = newvalue_50638((a_53209.value - b_53210.value));
return result_53211;
}
function HEX2D_53201(a_53203, b_53204) {

var result_53205 = null;
result_53205 = newvalue_50638((a_53203.value - b_53204.value));
return result_53205;
}
function HEX2D_53196(a_53198, b_53199) {

var result_53200 = null;
result_53200 = newvalue_50633((a_53198.value - b_53199.value));
return result_53200;
}
function HEX2D_53213(a_53215, b_53216) {

var result_53217 = null;
result_53217 = newvalue_50638((a_53215.value - b_53216.value));
return result_53217;
}
function HEX2D_53186(a_53188, b_53189) {

var result_53190 = null;
raiseruntimeexception_48333((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_48604(a_53188).slice(0,-1),makeNimstrLit(" - ").slice(0,-1),HEX24_48604(b_53189)));
return result_53190;
}
function HEX2D_53192(a_53188, b_53189) {

var result_53195 = null;
BeforeRet: do {
if ((isObj(a_53188.m_type, NTI48169) & isObj(b_53189.m_type, NTI48166))) {
result_53195 = HEX2D_53207(a_53188, b_53189);
break BeforeRet;
}
else {
if ((isObj(a_53188.m_type, NTI48166) & isObj(b_53189.m_type, NTI48169))) {
result_53195 = HEX2D_53201(a_53188, b_53189);
break BeforeRet;
}
else {
if ((isObj(a_53188.m_type, NTI48166) & isObj(b_53189.m_type, NTI48166))) {
result_53195 = HEX2D_53196(a_53188, b_53189);
break BeforeRet;
}
else {
if ((isObj(a_53188.m_type, NTI48169) & isObj(b_53189.m_type, NTI48169))) {
result_53195 = HEX2D_53213(a_53188, b_53189);
break BeforeRet;
}
else {
if ((isObj(a_53188.m_type, NTI48123) & isObj(b_53189.m_type, NTI48123))) {
result_53195 = HEX2D_53186(a_53188, b_53189);
break BeforeRet;
}
}}}}
} while (false); 
return result_53195;
}
function HEX2A_53239(a_53241, b_53242) {

var result_53243 = null;
result_53243 = newvalue_50638((a_53241.value * b_53242.value));
return result_53243;
}
function HEX2A_53233(a_53235, b_53236) {

var result_53237 = null;
result_53237 = newvalue_50638((a_53235.value * b_53236.value));
return result_53237;
}
function HEX2A_53228(a_53230, b_53231) {

var result_53232 = null;
result_53232 = newvalue_50633((a_53230.value * b_53231.value));
return result_53232;
}
function HEX2A_53245(a_53247, b_53248) {

var result_53249 = null;
result_53249 = newvalue_50638((a_53247.value * b_53248.value));
return result_53249;
}
function HEX2A_53218(a_53220, b_53221) {

var result_53222 = null;
raiseruntimeexception_48333((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_48604(a_53220).slice(0,-1),makeNimstrLit(" * ").slice(0,-1),HEX24_48604(b_53221)));
return result_53222;
}
function HEX2A_53224(a_53220, b_53221) {

var result_53227 = null;
BeforeRet: do {
if ((isObj(a_53220.m_type, NTI48169) & isObj(b_53221.m_type, NTI48166))) {
result_53227 = HEX2A_53239(a_53220, b_53221);
break BeforeRet;
}
else {
if ((isObj(a_53220.m_type, NTI48166) & isObj(b_53221.m_type, NTI48169))) {
result_53227 = HEX2A_53233(a_53220, b_53221);
break BeforeRet;
}
else {
if ((isObj(a_53220.m_type, NTI48166) & isObj(b_53221.m_type, NTI48166))) {
result_53227 = HEX2A_53228(a_53220, b_53221);
break BeforeRet;
}
else {
if ((isObj(a_53220.m_type, NTI48169) & isObj(b_53221.m_type, NTI48169))) {
result_53227 = HEX2A_53245(a_53220, b_53221);
break BeforeRet;
}
else {
if ((isObj(a_53220.m_type, NTI48123) & isObj(b_53221.m_type, NTI48123))) {
result_53227 = HEX2A_53218(a_53220, b_53221);
break BeforeRet;
}
}}}}
} while (false); 
return result_53227;
}
function HEX2F_53271(a_53273, b_53274) {

var result_53275 = null;
result_53275 = newvalue_50638((a_53273.value / b_53274.value));
return result_53275;
}
function HEX2F_53265(a_53267, b_53268) {

var result_53269 = null;
result_53269 = newvalue_50638((a_53267.value / b_53268.value));
return result_53269;
}
function HEX2F_19807(x_19809, y_19810) {

var result_19811 = 0.0;
result_19811 = (x_19809 / y_19810);
return result_19811;
}
function HEX2F_53260(a_53262, b_53263) {

var result_53264 = null;
result_53264 = newvalue_50638(HEX2F_19807(a_53262.value, b_53263.value));
return result_53264;
}
function HEX2F_53277(a_53279, b_53280) {

var result_53281 = null;
result_53281 = newvalue_50638((a_53279.value / b_53280.value));
return result_53281;
}
function HEX2F_53250(a_53252, b_53253) {

var result_53254 = null;
raiseruntimeexception_48333((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_48604(a_53252).slice(0,-1),makeNimstrLit(" / ").slice(0,-1),HEX24_48604(b_53253)));
return result_53254;
}
function HEX2F_53256(a_53252, b_53253) {

var result_53259 = null;
BeforeRet: do {
if ((isObj(a_53252.m_type, NTI48169) & isObj(b_53253.m_type, NTI48166))) {
result_53259 = HEX2F_53271(a_53252, b_53253);
break BeforeRet;
}
else {
if ((isObj(a_53252.m_type, NTI48166) & isObj(b_53253.m_type, NTI48169))) {
result_53259 = HEX2F_53265(a_53252, b_53253);
break BeforeRet;
}
else {
if ((isObj(a_53252.m_type, NTI48166) & isObj(b_53253.m_type, NTI48166))) {
result_53259 = HEX2F_53260(a_53252, b_53253);
break BeforeRet;
}
else {
if ((isObj(a_53252.m_type, NTI48169) & isObj(b_53253.m_type, NTI48169))) {
result_53259 = HEX2F_53277(a_53252, b_53253);
break BeforeRet;
}
else {
if ((isObj(a_53252.m_type, NTI48123) & isObj(b_53253.m_type, NTI48123))) {
result_53259 = HEX2F_53250(a_53252, b_53253);
break BeforeRet;
}
}}}}
} while (false); 
return result_53259;
}
function HEX3C_53292(a_53294, b_53295) {

var result_53296 = null;
result_53296 = newvalue_50648((a_53294.value < b_53295.value));
return result_53296;
}
function HEX3C_53303(a_53305, b_53306) {

var result_53307 = null;
result_53307 = newvalue_50648((a_53305.value < b_53306.value));
return result_53307;
}
function HEX3C_53297(a_53299, b_53300) {

var result_53301 = null;
result_53301 = newvalue_50648((a_53299.value < b_53300.value));
return result_53301;
}
function HEX3C_53314(a_53316, b_53317) {

var result_53318 = null;
result_53318 = newvalue_50648((cmpStrings(a_53316.value, b_53317.value) < 0));
return result_53318;
}
function HEX3C_53309(a_53311, b_53312) {

var result_53313 = null;
result_53313 = newvalue_50648((a_53311.value < b_53312.value));
return result_53313;
}
function HEX3C_53282(a_53284, b_53285) {

var result_53286 = null;
raiseruntimeexception_48333((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_48604(a_53284).slice(0,-1),makeNimstrLit(" < ").slice(0,-1),HEX24_48604(b_53285)));
return result_53286;
}
function HEX3C_53288(a_53284, b_53285) {

var result_53291 = null;
BeforeRet: do {
if ((isObj(a_53284.m_type, NTI48166) & isObj(b_53285.m_type, NTI48166))) {
result_53291 = HEX3C_53292(a_53284, b_53285);
break BeforeRet;
}
else {
if ((isObj(a_53284.m_type, NTI48169) & isObj(b_53285.m_type, NTI48166))) {
result_53291 = HEX3C_53303(a_53284, b_53285);
break BeforeRet;
}
else {
if ((isObj(a_53284.m_type, NTI48166) & isObj(b_53285.m_type, NTI48169))) {
result_53291 = HEX3C_53297(a_53284, b_53285);
break BeforeRet;
}
else {
if ((isObj(a_53284.m_type, NTI48172) & isObj(b_53285.m_type, NTI48172))) {
result_53291 = HEX3C_53314(a_53284, b_53285);
break BeforeRet;
}
else {
if ((isObj(a_53284.m_type, NTI48169) & isObj(b_53285.m_type, NTI48169))) {
result_53291 = HEX3C_53309(a_53284, b_53285);
break BeforeRet;
}
else {
if ((isObj(a_53284.m_type, NTI48123) & isObj(b_53285.m_type, NTI48123))) {
result_53291 = HEX3C_53282(a_53284, b_53285);
break BeforeRet;
}
}}}}}
} while (false); 
return result_53291;
}
function HEX3CHEX3D_53329(a_53331, b_53332) {

var result_53333 = null;
result_53333 = newvalue_50648((a_53331.value <= b_53332.value));
return result_53333;
}
function HEX3CHEX3D_53340(a_53342, b_53343) {

var result_53344 = null;
result_53344 = newvalue_50648((a_53342.value <= b_53343.value));
return result_53344;
}
function HEX3CHEX3D_53334(a_53336, b_53337) {

var result_53338 = null;
result_53338 = newvalue_50648((a_53336.value <= b_53337.value));
return result_53338;
}
function HEX3CHEX3D_53351(a_53353, b_53354) {

var result_53355 = null;
result_53355 = newvalue_50648((cmpStrings(a_53353.value, b_53354.value) <= 0));
return result_53355;
}
function HEX3CHEX3D_53346(a_53348, b_53349) {

var result_53350 = null;
result_53350 = newvalue_50648((a_53348.value <= b_53349.value));
return result_53350;
}
function HEX3CHEX3D_53319(a_53321, b_53322) {

var result_53323 = null;
raiseruntimeexception_48333((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_48604(a_53321).slice(0,-1),makeNimstrLit(" <= ").slice(0,-1),HEX24_48604(b_53322)));
return result_53323;
}
function HEX3CHEX3D_53325(a_53321, b_53322) {

var result_53328 = null;
BeforeRet: do {
if ((isObj(a_53321.m_type, NTI48166) & isObj(b_53322.m_type, NTI48166))) {
result_53328 = HEX3CHEX3D_53329(a_53321, b_53322);
break BeforeRet;
}
else {
if ((isObj(a_53321.m_type, NTI48169) & isObj(b_53322.m_type, NTI48166))) {
result_53328 = HEX3CHEX3D_53340(a_53321, b_53322);
break BeforeRet;
}
else {
if ((isObj(a_53321.m_type, NTI48166) & isObj(b_53322.m_type, NTI48169))) {
result_53328 = HEX3CHEX3D_53334(a_53321, b_53322);
break BeforeRet;
}
else {
if ((isObj(a_53321.m_type, NTI48172) & isObj(b_53322.m_type, NTI48172))) {
result_53328 = HEX3CHEX3D_53351(a_53321, b_53322);
break BeforeRet;
}
else {
if ((isObj(a_53321.m_type, NTI48169) & isObj(b_53322.m_type, NTI48169))) {
result_53328 = HEX3CHEX3D_53346(a_53321, b_53322);
break BeforeRet;
}
else {
if ((isObj(a_53321.m_type, NTI48123) & isObj(b_53322.m_type, NTI48123))) {
result_53328 = HEX3CHEX3D_53319(a_53321, b_53322);
break BeforeRet;
}
}}}}}
} while (false); 
return result_53328;
}
function eq_53371(a_53373, b_53374) {

var result_53375 = null;
result_53375 = newvalue_50648((a_53373.value == b_53374.value));
return result_53375;
}
function eq_53366(a_53368, b_53369) {

var result_53370 = null;
result_53370 = newvalue_50648((a_53368.value == b_53369.value));
return result_53370;
}
function eq_53377(a_53379, b_53380) {

var result_53381 = null;
result_53381 = newvalue_50648((a_53379.value == b_53380.value));
return result_53381;
}
function eq_53393(a_53395, b_53396) {

var result_53397 = null;
result_53397 = newvalue_50648((value_49054(a_53395) == value_49054(b_53396)));
return result_53397;
}
function eq_53388(a_53390, b_53391) {

var result_53392 = null;
result_53392 = newvalue_50648(eqStrings(a_53390.value, b_53391.value));
return result_53392;
}
function eq_53383(a_53385, b_53386) {

var result_53387 = null;
result_53387 = newvalue_50648((a_53385.value == b_53386.value));
return result_53387;
}
function eq_53398(a_53400, b_53401) {

var Tmp1;
var result_53402 = null;
if (!isObj(b_53401.m_type, NTI48196)) Tmp1 = false; else {Tmp1 = HEX3DHEX3D_48989(a_53400, b_53401); }result_53402 = newvalue_50648(Tmp1);
return result_53402;
}
function eq_53356(a_53358, b_53359) {

var result_53360 = null;
raiseruntimeexception_48333((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_48604(a_53358).slice(0,-1),makeNimstrLit(" == ").slice(0,-1),HEX24_48604(b_53359)));
return result_53360;
}
function eq_53362(a_53358, b_53359) {

var result_53365 = null;
BeforeRet: do {
if ((isObj(a_53358.m_type, NTI48166) & isObj(b_53359.m_type, NTI48169))) {
result_53365 = eq_53371(a_53358, b_53359);
break BeforeRet;
}
else {
if ((isObj(a_53358.m_type, NTI48166) & isObj(b_53359.m_type, NTI48166))) {
result_53365 = eq_53366(a_53358, b_53359);
break BeforeRet;
}
else {
if ((isObj(a_53358.m_type, NTI48169) & isObj(b_53359.m_type, NTI48166))) {
result_53365 = eq_53377(a_53358, b_53359);
break BeforeRet;
}
else {
if ((isObj(a_53358.m_type, NTI48175) & isObj(b_53359.m_type, NTI48175))) {
result_53365 = eq_53393(a_53358, b_53359);
break BeforeRet;
}
else {
if ((isObj(a_53358.m_type, NTI48172) & isObj(b_53359.m_type, NTI48172))) {
result_53365 = eq_53388(a_53358, b_53359);
break BeforeRet;
}
else {
if ((isObj(a_53358.m_type, NTI48169) & isObj(b_53359.m_type, NTI48169))) {
result_53365 = eq_53383(a_53358, b_53359);
break BeforeRet;
}
else {
if ((isObj(a_53358.m_type, NTI48196) & isObj(b_53359.m_type, NTI48123))) {
result_53365 = eq_53398(a_53358, b_53359);
break BeforeRet;
}
else {
if ((isObj(a_53358.m_type, NTI48123) & isObj(b_53359.m_type, NTI48123))) {
result_53365 = eq_53356(a_53358, b_53359);
break BeforeRet;
}
}}}}}}}
} while (false); 
return result_53365;
}
function HEX26_53420(a_53422, b_53423) {

var result_53424 = null;
BeforeRet: do {
add_50677(a_53422, b_53423.nodes);
result_53424 = a_53422;
break BeforeRet;
} while (false); 
return result_53424;
}
function HEX26_53415(a_53417, b_53418) {

var result_53419 = null;
result_53419 = newvalue_50643((a_53417.value.slice(0,-1)).concat(b_53418.value));
return result_53419;
}
function HEX26_53405(a_53407, b_53408) {

var result_53409 = null;
raiseruntimeexception_48333((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_48604(a_53407).slice(0,-1),makeNimstrLit(" & ").slice(0,-1),HEX24_48604(b_53408)));
return result_53409;
}
function HEX26_53411(a_53407, b_53408) {

var result_53414 = null;
BeforeRet: do {
if ((isObj(a_53407.m_type, NTI48188) & isObj(b_53408.m_type, NTI48188))) {
result_53414 = HEX26_53420(a_53407, b_53408);
break BeforeRet;
}
else {
if ((isObj(a_53407.m_type, NTI48172) & isObj(b_53408.m_type, NTI48172))) {
result_53414 = HEX26_53415(a_53407, b_53408);
break BeforeRet;
}
else {
if ((isObj(a_53407.m_type, NTI48123) & isObj(b_53408.m_type, NTI48123))) {
result_53414 = HEX26_53405(a_53407, b_53408);
break BeforeRet;
}
}}
} while (false); 
return result_53414;
}
function doreturn_53469(self_53471, spry_53472) {

spry_53472.currentactivation = self_53471.parent;
}
function doreturn_53453(self_53455, spry_53456) {

spry_53456.currentactivation = self_53455.parent;
if (!((spry_53456.currentactivation === null))) {
spry_53456.currentactivation.returned = true;
}

}
function doreturn_53467(self_53455, spry_53456) {

if (isObj(self_53455.m_type, NTI52854)) {
doreturn_53469(self_53455, spry_53456);
}
else {
if (isObj(self_53455.m_type, NTI52843)) {
doreturn_53453(self_53455, spry_53456);
}
}
}
function isobject_53483(self_53485, spry_53486) {

var Tmp1;
var result_53487 = false;
if (!!((self_53485.tags === null))) Tmp1 = false; else {Tmp1 = contains_50738(self_53485.tags, spry_53486.objecttag); }result_53487 = Tmp1;
return result_53487;
}
function isobject_53473(self_53475, spry_53476) {

var result_53477 = false;
result_53477 = false;
return result_53477;
}
function isobject_53479(self_53475, spry_53476) {

var result_53482 = false;
BeforeRet: do {
if (isObj(self_53475.m_type, NTI48199)) {
result_53482 = isobject_53483(self_53475, spry_53476);
break BeforeRet;
}
else {
if (isObj(self_53475.m_type, NTI48123)) {
result_53482 = isobject_53473(self_53475, spry_53476);
break BeforeRet;
}
}
} while (false); 
return result_53482;
}
function makebindinginmap_53766(spry_53768, key_53769, val_53770) {

var result_53771 = null;
BeforeRet: do {
var binding_53772 = lookup_53521(spry_53768, key_53769.module);
if (!((binding_53772 === null))) {
var module_53782 = binding_53772.val;
if (!((module_53782 === null))) {
result_53771 = makebinding_49605(module_53782, newevalword_50041(key_53769.word), val_53770);
break BeforeRet;
}

}

} while (false); 
return result_53771;
}
function makebindinginmap_53745(spry_53747, key_53748, val_53749) {

var result_53750 = null;
BeforeRet: do {
L1: do {
var activation_53751 = null;
var HEX3Atmp_53761 = null;
HEX3Atmp_53761 = spry_53747.currentactivation;
var activation_53765 = HEX3Atmp_53761;
L2: do {
L3: while (true) {
if (!!((activation_53765 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(haslocals_53102(activation_53765))) break L5;
activation_53765 = outer_53115(activation_53765);
}
} while(false);
activation_53751 = activation_53765;
if ((activation_53751.locals === null)) {
activation_53751.locals = newmap_49812();
}

result_53750 = makebinding_49605(activation_53751.locals, key_53748, val_53749);
break BeforeRet;
activation_53765 = outer_53115(activation_53765);
}
} while(false);
} while(false);
} while (false); 
return result_53750;
}
function makebindinginmap_53712(spry_53714, key_53715, val_53716) {

var result_53717 = null;
BeforeRet: do {
var inparent_53718 = false;
var fallback_53719 = null;
L1: do {
var activation_53720 = null;
var HEX3Atmp_53740 = null;
HEX3Atmp_53740 = spry_53714.currentactivation;
var activation_53744 = HEX3Atmp_53740;
L2: do {
L3: while (true) {
if (!!((activation_53744 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(haslocals_53102(activation_53744))) break L5;
activation_53744 = outer_53115(activation_53744);
}
} while(false);
activation_53720 = activation_53744;
if (inparent_53718) {
fallback_53719 = activation_53720;
if (!((lookup_53503(activation_53720, key_53715) === null))) {
result_53717 = makebinding_49605(activation_53720.locals, newevalword_50041(key_53715.word), val_53716);
break BeforeRet;
}

}
else {
inparent_53718 = true;
}

activation_53744 = outer_53115(activation_53744);
}
} while(false);
} while(false);
if ((fallback_53719.locals === null)) {
fallback_53719.locals = newmap_49812();
}

result_53717 = makebinding_49605(fallback_53719.locals, newevalword_50041(key_53715.word), val_53716);
break BeforeRet;
} while (false); 
return result_53717;
}
function makebindinginmap_53686(spry_53688, key_53689, val_53690) {

var result_53691 = null;
BeforeRet: do {
L1: do {
var activation_53692 = null;
var HEX3Atmp_53702 = null;
HEX3Atmp_53702 = spry_53688.currentactivation;
var activation_53706 = HEX3Atmp_53702;
L2: do {
L3: while (true) {
if (!!((activation_53706 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(haslocals_53102(activation_53706))) break L5;
activation_53706 = outer_53115(activation_53706);
}
} while(false);
activation_53692 = activation_53706;
if ((activation_53692.locals === null)) {
activation_53692.locals = newmap_49812();
}

result_53691 = makebinding_49605(activation_53692.locals, key_53689, val_53690);
break BeforeRet;
activation_53706 = outer_53115(activation_53706);
}
} while(false);
} while(false);
} while (false); 
return result_53691;
}
function makebindinginmap_53708(spry_53688, key_53689, val_53690) {

var result_53711 = null;
BeforeRet: do {
if (isObj(key_53689.m_type, NTI48138)) {
result_53711 = makebindinginmap_53766(spry_53688, key_53689, val_53690);
break BeforeRet;
}
else {
if (isObj(key_53689.m_type, NTI48136)) {
result_53711 = makebindinginmap_53745(spry_53688, key_53689, val_53690);
break BeforeRet;
}
else {
if (isObj(key_53689.m_type, NTI48143)) {
result_53711 = makebindinginmap_53712(spry_53688, key_53689, val_53690);
break BeforeRet;
}
else {
if (isObj(key_53689.m_type, NTI48123)) {
result_53711 = makebindinginmap_53686(spry_53688, key_53689, val_53690);
break BeforeRet;
}
}}}
} while (false); 
return result_53711;
}
function caneval_53926(self_53928, spry_53929) {

var result_53930 = false;
result_53930 = true;
return result_53930;
}
function caneval_53921(self_53923, spry_53924) {

var result_53925 = false;
BeforeRet: do {
result_53925 = caneval_53903(self_53923.val, spry_53924);
break BeforeRet;
} while (false); 
return result_53925;
}
function caneval_53907(self_53909, spry_53910) {

var result_53911 = false;
BeforeRet: do {
var binding_53912 = lookup_53521(spry_53910, self_53909);
if ((binding_53912 === null)) {
result_53911 = false;
break BeforeRet;
}
else {
result_53911 = caneval_53903(binding_53912.val, spry_53910);
break BeforeRet;
}

} while (false); 
return result_53911;
}
function caneval_53931(self_53933, spry_53934) {

var result_53935 = false;
result_53935 = true;
return result_53935;
}
function caneval_53946(self_53948, spry_53949) {

var result_53950 = false;
result_53950 = true;
return result_53950;
}
function caneval_53941(self_53943, spry_53944) {

var result_53945 = false;
result_53945 = true;
return result_53945;
}
function caneval_53936(self_53938, spry_53939) {

var result_53940 = false;
result_53940 = true;
return result_53940;
}
function caneval_53951(self_53953, spry_53954) {

var result_53955 = false;
result_53955 = true;
return result_53955;
}
function caneval_53897(self_53899, spry_53900) {

var result_53901 = false;
result_53901 = false;
return result_53901;
}
function caneval_53903(self_53899, spry_53900) {

var result_53906 = false;
BeforeRet: do {
if (isObj(self_53899.m_type, NTI52838)) {
result_53906 = caneval_53926(self_53899, spry_53900);
break BeforeRet;
}
else {
if (isObj(self_53899.m_type, NTI48225)) {
result_53906 = caneval_53921(self_53899, spry_53900);
break BeforeRet;
}
else {
if (isObj(self_53899.m_type, NTI48136)) {
result_53906 = caneval_53907(self_53899, spry_53900);
break BeforeRet;
}
else {
if (isObj(self_53899.m_type, NTI52834)) {
result_53906 = caneval_53931(self_53899, spry_53900);
break BeforeRet;
}
else {
if (isObj(self_53899.m_type, NTI48192)) {
result_53906 = caneval_53946(self_53899, spry_53900);
break BeforeRet;
}
else {
if (isObj(self_53899.m_type, NTI48156)) {
result_53906 = caneval_53941(self_53899, spry_53900);
break BeforeRet;
}
else {
if (isObj(self_53899.m_type, NTI48145)) {
result_53906 = caneval_53936(self_53899, spry_53900);
break BeforeRet;
}
else {
if (isObj(self_53899.m_type, NTI48194)) {
result_53906 = caneval_53951(self_53899, spry_53900);
break BeforeRet;
}
else {
if (isObj(self_53899.m_type, NTI48123)) {
result_53906 = caneval_53897(self_53899, spry_53900);
break BeforeRet;
}
}}}}}}}}
} while (false); 
return result_53906;
}
