/* Generated by the Nim Compiler v0.14.3 */
/*   (c) 2016 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI55650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3460 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI69004 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51055 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI55629 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51143 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51141 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI35187 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51154 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51152 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51145 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51156 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI53498 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51161 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51159 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51158 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55456 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51166 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI51169 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51193 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51191 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51172 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51147 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51149 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI51138 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51081 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55627 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55648 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55586 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI55624 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI55596 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI55635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI55643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51132 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51136 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51127 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51134 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3448 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51181 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51179 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51164 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51175 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51118 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51224 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51079 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI51185 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51188 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51187 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI51195 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51075 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI51124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI44002 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI51210 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI51207 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51204 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51198 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51115 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI59004 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3485 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3436 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
var NNI3436 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3436.node = NNI3436;
NTI3485.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3485, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3436.base = NTI3424;
NTI3440.base = NTI3436;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3436;
var NNI59004 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI59004.node = NNI59004;
var NNI51115 = {kind: 1, offset: "token", len: 0, typ: NTI138, name: "token", sons: null};
NTI51115.node = NNI51115;
NTI51115.base = NTI3408;
NTI59004.base = NTI51115;
var NNI51195 = {kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null};
NTI51195.node = NNI51195;
NTI51188.base = NTI51017;
var NNI51187 = {kind: 1, offset: "nodes", len: 0, typ: NTI51188, name: "nodes", sons: null};
NTI51187.node = NNI51187;
var NNI51185 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51185.node = NNI51185;
NTI51185.base = NTI51124;
NTI51187.base = NTI51185;
NTI51195.base = NTI51187;
NTI51075.base = NTI51195;
var NNI51124 = {kind: 1, offset: "tags", len: 0, typ: NTI51075, name: "tags", sons: null};
NTI51124.node = NNI51124;
NTI51124.base = NTI3408;
NTI51017.base = NTI51124;
var NNI51224 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI51017, name: "key", sons: null}, 
{kind: 1, offset: "val", len: 0, typ: NTI51017, name: "val", sons: null}]};
NTI51224.node = NNI51224;
NTI51224.base = NTI51124;
NTI51079.base = NTI51224;
var NNI51210 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44002, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI51017, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI51079, name: "Field2", sons: null}]};
NTI51210.node = NNI51210;
NTI51207.base = NTI51210;
var NNI51204 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI51207, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI51204.node = NNI51204;
var NNI51198 = {kind: 1, offset: "bindings", len: 0, typ: NTI51204, name: "bindings", sons: null};
NTI51198.node = NNI51198;
NTI51198.base = NTI51185;
var NNI51122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51122.node = NNI51122;
NTI51122.base = NTI51115;
var NNI51118 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51118.node = NNI51118;
NTI51118.base = NTI51115;
var NNI51120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51120.node = NNI51120;
NTI51120.base = NTI51115;
var NNI51177 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51177.node = NNI51177;
var NNI51175 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51175.node = NNI51175;
var NNI51164 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51164.node = NNI51164;
NTI51164.base = NTI51124;
NTI51175.base = NTI51164;
NTI51177.base = NTI51175;
var NNI51179 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51179.node = NNI51179;
NTI51179.base = NTI51175;
var NNI51183 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51183.node = NNI51183;
NTI51183.base = NTI51164;
var NNI51181 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51181.node = NNI51181;
NTI51181.base = NTI51164;
var NNI3448 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3448.node = NNI3448;
var NNI3446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3446.node = NNI3446;
NTI3446.base = NTI3424;
NTI3448.base = NTI3446;
var NNI51134 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51134.node = NNI51134;
var NNI51127 = {kind: 1, offset: "word", len: 0, typ: NTI138, name: "word", sons: null};
NTI51127.node = NNI51127;
NTI51127.base = NTI51124;
NTI51134.base = NTI51127;
var NNI51136 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51136.node = NNI51136;
var NNI51132 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51132.node = NNI51132;
NTI51132.base = NTI51127;
NTI51136.base = NTI51132;
var NNI55652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI55652.node = NNI55652;
NTI51077.base = NTI51198;
var NNI55643 = {kind: 1, offset: "locals", len: 0, typ: NTI51077, name: "locals", sons: null};
NTI55643.node = NNI55643;
NTI55596.base = NTI55635;
NTI51069.base = NTI51187;
var NNI55635 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "last", len: 0, typ: NTI51017, name: "last", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI51017, name: "self", sons: null}, 
{kind: 1, offset: "returned", len: 0, typ: NTI130, name: "returned", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI55596, name: "parent", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI51069, name: "body", sons: null}]};
NTI55635.node = NNI55635;
NTI55635.base = NTI51124;
NTI55643.base = NTI55635;
NTI55652.base = NTI55643;
var NNI55624 = {kind: 1, offset: "primitive", len: 0, typ: NTI55586, name: "primitive", sons: null};
NTI55624.node = NNI55624;
NTI55624.base = NTI51124;
var NNI55648 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI55648.node = NNI55648;
NTI55648.base = NTI55635;
var NNI55646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI55646.node = NNI55646;
NTI55646.base = NTI55643;
var NNI55627 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI55627.node = NNI55627;
NTI55627.base = NTI55624;
var NNI51081 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51081.node = NNI51081;
NTI51081.base = NTI3424;
NTI51019.base = NTI51127;
var NNI51138 = {kind: 1, offset: "module", len: 0, typ: NTI51019, name: "module", sons: null};
NTI51138.node = NNI51138;
NTI51138.base = NTI51136;
var NNI51149 = {kind: 1, offset: "module", len: 0, typ: NTI51019, name: "module", sons: null};
NTI51149.node = NNI51149;
var NNI51147 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51147.node = NNI51147;
var NNI51130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51130.node = NNI51130;
NTI51130.base = NTI51127;
NTI51147.base = NTI51130;
NTI51149.base = NTI51147;
var NNI51172 = {kind: 1, offset: "value", len: 0, typ: NTI138, name: "value", sons: null};
NTI51172.node = NNI51172;
NTI51172.base = NTI51164;
var NNI51191 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51191.node = NNI51191;
NTI51191.base = NTI51187;
var NNI51193 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51193.node = NNI51193;
NTI51193.base = NTI51187;
var NNI51169 = {kind: 1, offset: "value", len: 0, typ: NTI124, name: "value", sons: null};
NTI51169.node = NNI51169;
NTI51169.base = NTI51164;
var NNI51166 = {kind: 1, offset: "value", len: 0, typ: NTI104, name: "value", sons: null};
NTI51166.node = NNI51166;
NTI51166.base = NTI51164;
NTI55456.base = NTI51017;
NTI51159.base = NTI138;
NTI51161.base = NTI51017;
var NNI51158 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "keys", len: 0, typ: NTI51159, name: "keys", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI51161, name: "args", sons: null}]};
NTI51158.node = NNI51158;
NTI51158.base = NTI51124;
NTI53498.base = NTI51017;
var NNI51005 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51005.node = NNI51005;
NTI51005.base = NTI3424;
var NNI51156 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51156.node = NNI51156;
NTI51156.base = NTI51130;
var NNI51145 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51145.node = NNI51145;
NTI51145.base = NTI51132;
var NNI51152 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51152.node = NNI51152;
NTI51152.base = NTI51130;
var NNI51154 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51154.node = NNI51154;
NTI51154.base = NTI51130;
NTI35187.base = NTI138;
var NNI51141 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51141.node = NNI51141;
NTI51141.base = NTI51132;
var NNI51143 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI51143.node = NNI51143;
NTI51143.base = NTI51132;
NTI51055.base = NTI51172;
var NNI55629 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI55596, name: "parent", sons: null}, 
{kind: 1, offset: "source", len: 0, typ: NTI51055, name: "source", sons: null}]};
NTI55629.node = NNI55629;
NTI55629.base = NTI51195;
var NNI55633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI55633.node = NNI55633;
NTI55633.base = NTI55629;
var NNI69004 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI69004.node = NNI69004;
NTI69004.base = NTI55633;
var NNI3428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3428.node = NNI3428;
var NNI3426 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3426.node = NNI3426;
NTI3426.base = NTI3424;
NTI3428.base = NTI3426;
var NNI3460 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3460.node = NNI3460;
NTI3460.base = NTI3424;
var NNI55650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI55650.node = NNI55650;
NTI55650.base = NTI55643;
function makeNimstrLit(c_13603) {

    var ln = c_13603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_18715, src_18716, ti_18717) {

var result_19029 = null;
switch (ti_18717.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_18698(ti_18717))) {
result_19029 = src_18716;
}
else {
result_19029 = [src_18716[0], src_18716[1]];}


break;
case 19:       if (dest_18715 === null || dest_18715 === undefined) {
        dest_18715 = {};
      }
      else {
        for (var key in dest_18715) { delete dest_18715[key]; }
      }
      for (var key in src_18716) { dest_18715[key] = src_18716[key]; }
      result_19029 = dest_18715;
    
break;
case 18: case 17: if (!((ti_18717.base == null))) {
result_19029 = nimCopy(dest_18715, src_18716, ti_18717.base);
}
else {
if ((ti_18717.kind == 17)) {
result_19029 = (dest_18715 === null || dest_18715 === undefined) ? {m_type: ti_18717} : dest_18715;}
else {
result_19029 = (dest_18715 === null || dest_18715 === undefined) ? {} : dest_18715;}
}
nimCopyAux(result_19029, src_18716, ti_18717.node);

break;
case 24: case 4: case 27: case 16:       if (src_18716 === null) {
        result_19029 = null;
      }
      else {
        if (dest_18715 === null || dest_18715 === undefined) {
          dest_18715 = new Array(src_18716.length);
        }
        else {
          dest_18715.length = src_18716.length;
        }
        result_19029 = dest_18715;
        for (var i = 0; i < src_18716.length; ++i) {
          result_19029[i] = nimCopy(result_19029[i], src_18716[i], ti_18717.base);
        }
      }
    
break;
case 28:       if (src_18716 !== null) {
        result_19029 = src_18716.slice(0);
      }
    
break;
default: 
result_19029 = src_18716;
break;
}
return result_19029;
}
function eqStrings(a_16203, b_16204) {

    if (a_16203 == b_16204) return true;
    if ((!a_16203) || (!b_16204)) return false;
    var alen = a_16203.length;
    if (alen != b_16204.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16203[i] != b_16204[i]) return false;
    return true;
  }
function toJSStr(s_14003) {

    var len = s_14003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_14003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_14003[i] < 128)
        asciiPart[i] = fcc(s_14003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_12606, ename_12607) {

e_12606.name = ename_12607;
if ((excHandler == 0)) {
unhandledException(e_12606);
}

throw e_12606;}
function isObj(obj_19275, subclass_19276) {

var result_19277 = false;
BeforeRet: do {
var x_19278 = obj_19275;
if ((x_19278 == subclass_19276)) {
result_19277 = true;
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!!((x_19278 == subclass_19276))) break L2;
if ((x_19278 == null)) {
result_19277 = false;
break BeforeRet;
}

x_19278 = x_19278.base;
}
} while(false);
result_19277 = true;
break BeforeRet;
} while (false); 
return result_19277;
}
function mnewString(len_14203) {

      var result = new Array(len_14203+1);
      result[0] = 0;
      result[len_14203] = 0;
      return result;
    }
function addChar(x_19316, c_19317) {

    x_19316[x_19316.length-1] = c_19317; x_19316.push(0);
  }
function rawEcho() {

var node_16430 = null;
node_16430 = document.getElementsByTagName('body')[0];if ((node_16430 === null)) {
var e_16442 = null;
e_16442 = {m_type: NTI3428, parent: null, name: null, message: null, trace: null};
e_16442.message = nimCopy(null, makeNimstrLit("<body> element does not exist yet!"), NTI138);
raiseException(e_16442, "IOError");
}

    for (var i = 0; i < arguments.length; ++i) {
      var x = toJSStr(arguments[i]);
      node_16430.appendChild(document.createTextNode(x));
    }
    node_16430.appendChild(document.createElement("br"));
    }
function cstrToNimstr(c_13803) {

  var ln = c_13803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_13803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function nimParseBiggestFloat(s_19330, number_19332, number_19332_Idx, start_19333) {

var result_19334 = 0;
BeforeRet: do {
var esign_19335 = 1.0000000000000000e+00;
var sign_19336 = 1.0000000000000000e+00;
var i_19337 = start_19333;
var exponent_19338 = 0;
var flags_19339 = 0;
number_19332[number_19332_Idx] = 0.0;
if ((s_19330[i_19337] == 43)) {
i_19337 += 1;
}
else {
if ((s_19330[i_19337] == 45)) {
sign_19336 = -1.0000000000000000e+00;
i_19337 += 1;
}
}
if (((s_19330[i_19337] == 78) || (s_19330[i_19337] == 110))) {
if (((s_19330[(i_19337 + 1)] == 65) || (s_19330[(i_19337 + 1)] == 97))) {
if (((s_19330[(i_19337 + 2)] == 78) || (s_19330[(i_19337 + 2)] == 110))) {
if (!((SetConstr([97, 122], [65, 90], [48, 57], 95)[s_19330[(i_19337 + 3)]] != undefined))) {
number_19332[number_19332_Idx] = NaN;
result_19334 = ((i_19337 + 3) - start_19333);
break BeforeRet;
}

}

}

result_19334 = 0;
break BeforeRet;
}

if (((s_19330[i_19337] == 73) || (s_19330[i_19337] == 105))) {
if (((s_19330[(i_19337 + 1)] == 78) || (s_19330[(i_19337 + 1)] == 110))) {
if (((s_19330[(i_19337 + 2)] == 70) || (s_19330[(i_19337 + 2)] == 102))) {
if (!((SetConstr([97, 122], [65, 90], [48, 57], 95)[s_19330[(i_19337 + 3)]] != undefined))) {
number_19332[number_19332_Idx] = (Infinity * sign_19336);
result_19334 = ((i_19337 + 3) - start_19333);
break BeforeRet;
}

}

}

result_19334 = 0;
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!(SetConstr([48, 57])[s_19330[i_19337]] != undefined)) break L2;
flags_19339 = (flags_19339 | 1);
number_19332[number_19332_Idx] = ((number_19332[number_19332_Idx] * 1.0000000000000000e+01) + (s_19330[i_19337] - 48));
i_19337 += 1;
L3: do {
L4: while (true) {
if (!(s_19330[i_19337] == 95)) break L4;
i_19337 += 1;
}
} while(false);
}
} while(false);
if ((s_19330[i_19337] == 46)) {
var hd_19427 = 1.0000000000000000e+00;
i_19337 += 1;
L5: do {
L6: while (true) {
if (!(SetConstr([48, 57])[s_19330[i_19337]] != undefined)) break L6;
flags_19339 = (flags_19339 | 2);
number_19332[number_19332_Idx] = ((number_19332[number_19332_Idx] * 1.0000000000000000e+01) + (s_19330[i_19337] - 48));
hd_19427 = (hd_19427 * 1.0000000000000000e+01);
i_19337 += 1;
L7: do {
L8: while (true) {
if (!(s_19330[i_19337] == 95)) break L8;
i_19337 += 1;
}
} while(false);
}
} while(false);
number_19332[number_19332_Idx] = (number_19332[number_19332_Idx] / hd_19427);
}

if ((flags_19339 == 0)) {
result_19334 = 0;
break BeforeRet;
}

if ((SetConstr(101, 69)[s_19330[i_19337]] != undefined)) {
i_19337 += 1;
if ((s_19330[i_19337] == 43)) {
i_19337 += 1;
}
else {
if ((s_19330[i_19337] == 45)) {
esign_19335 = -1.0000000000000000e+00;
i_19337 += 1;
}
}
if (!((SetConstr([48, 57])[s_19330[i_19337]] != undefined))) {
result_19334 = 0;
break BeforeRet;
}

L9: do {
L10: while (true) {
if (!(SetConstr([48, 57])[s_19330[i_19337]] != undefined)) break L10;
exponent_19338 = (((exponent_19338 * 10) + s_19330[i_19337]) - 48);
i_19337 += 1;
L11: do {
L12: while (true) {
if (!(s_19330[i_19337] == 95)) break L12;
i_19337 += 1;
}
} while(false);
}
} while(false);
}

var hd_19579 = tentothepowerof_19318(exponent_19338);
if ((0.0 < esign_19335)) {
number_19332[number_19332_Idx] = (number_19332[number_19332_Idx] * hd_19579);
}
else {
number_19332[number_19332_Idx] = (number_19332[number_19332_Idx] / hd_19579);
}

number_19332[number_19332_Idx] = (number_19332[number_19332_Idx] * sign_19336);
result_19334 = (i_19337 - start_19333);
} while (false); 
return result_19334;
}
function reraiseException() {

if ((lastJSError == null)) {
var e_13018 = null;
e_13018 = {m_type: NTI3460, parent: null, name: null, message: null, trace: null};
e_13018.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI138);
raiseException(e_13018, "ReraiseError");
}
else {
if ((excHandler == 0)) {
var isnimexception_13201 = false;
isnimexception_13201 = lastJSError.m_type;if (isnimexception_13201) {
unhandledException(lastJSError);
}

}

throw lastJSError;}

}
function addInt(a_16456, b_16457) {

      var result = a_16456 + b_16457;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function subInt(a_16603, b_16604) {

      var result = a_16603 - b_16604;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mulInt(a_16803, b_16804) {

      var result = a_16803 * b_16804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function cmpStrings(a_16003, b_16004) {

    if (a_16003 == b_16004) return 0;
    if (!a_16003) return -1;
    if (!b_16004) return 1;
    for (var i = 0; i < a_16003.length-1; ++i) {
      var result = a_16003[i] - b_16004[i];
      if (result != 0) return result;
    }
    return 0;
  }
var nimvm_5554 = false;
var nim_program_result = 0;
var globalraisehook_10413 = [null];
var localraisehook_10418 = [null];
var outofmemhook_10421 = [null];
function isfatpointer_18698(ti_18700) {

var result_18701 = false;
BeforeRet: do {
result_18701 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_18700.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_18701;
}
function nimCopyAux(dest_18720, src_18721, n_18723) {

switch (n_18723.kind) {
case 0: 
break;
case 1:       dest_18720[n_18723.offset] = nimCopy(dest_18720[n_18723.offset], src_18721[n_18723.offset], n_18723.typ);
    
break;
case 2: L1: do {
var i_19015 = 0;
var HEX3Atmp_19017 = 0;
HEX3Atmp_19017 = (n_18723.len - 1);
var res_19020 = 0;
L2: do {
L3: while (true) {
if (!(res_19020 <= HEX3Atmp_19017)) break L3;
i_19015 = res_19020;
nimCopyAux(dest_18720, src_18721, n_18723.sons[i_19015]);
res_19020 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_18720[n_18723.offset] = nimCopy(dest_18720[n_18723.offset], src_18721[n_18723.offset], n_18723.typ);
      for (var i = 0; i < n_18723.sons.length; ++i) {
        nimCopyAux(dest_18720, src_18721, n_18723.sons[i][1]);
      }
    
break;
}
}
function add_10437(x_10440, x_10440_Idx, y_10441) {

        var len = x_10440[0].length-1;
        for (var i = 0; i < y_10441.length; ++i) {
          x_10440[0][len] = y_10441.charCodeAt(i);
          ++len;
        }
        x_10440[0][len] = 0
      }
function unhandledException(e_12461) {

var Tmp1;
var buf_12601 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_12461.message, null))) Tmp1 = false; else {Tmp1 = !((e_12461.message[0] == 0)); }if (Tmp1) {
if (buf_12601[0] != null) { buf_12601[0] = (buf_12601[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_12601[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_12601[0] != null) { buf_12601[0] = (buf_12601[0].slice(0, -1)).concat(e_12461.message); } else { buf_12601[0] = e_12461.message;};
}
else {
if (buf_12601[0] != null) { buf_12601[0] = (buf_12601[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_12601[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_12601[0] != null) { buf_12601[0] = (buf_12601[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_12601[0] = makeNimstrLit(" [");};
add_10437(buf_12601, 0, e_12461.name);
if (buf_12601[0] != null) { buf_12601[0] = (buf_12601[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_12601[0] = makeNimstrLit("]\x0A");};
alert(toJSStr(buf_12601[0]));
}
function raiseOverflow() {

var e_13410 = null;
e_13410 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13410.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
raiseException(e_13410, "OverflowError");
}
function raiseDivByZero() {

var e_13426 = null;
e_13426 = {m_type: NTI3438, parent: null, name: null, message: null, trace: null};
e_13426.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
raiseException(e_13426, "DivByZeroError");
}
var objectid_44233 = /**/[0];
function newseq_51393(len_51397) {

var result_51399 = null;
result_51399 = new Array(len_51397); for (var i=0;i<len_51397;++i) {result_51399[i]=null;}return result_51399;
}
var parserexts_51418 = /**/[newseq_51393(0)];
function addparserextension_51419(ext_51421) {

if (parserexts_51418[0] != null) { parserexts_51418[0].push(ext_51421); } else { parserexts_51418[0] = [ext_51421]; };
}
function extendparser_59069(p_59071) {

if (p_59071.valueparsers != null) { p_59071.valueparsers.push({m_type: NTI59004, token: null}); } else { p_59071.valueparsers = [{m_type: NTI59004, token: null}]; };
}
addparserextension_51419(extendparser_59069);
var state_61605 = /**/[{a0: 1773455756, a1: 4275166512}];
function gettime_64038() {

var result_64613 = null;
BeforeRet: do {
result_64613 = new Date();
break BeforeRet;
} while (false); 
return result_64613;
}
var startmilsecs_64664 = /**/[gettime_64038()];
function inittable_52816(initialsize_52821) {

var result_52823 = {data: null, counter: 0};
result_52823.counter = 0;
result_52823.data = new Array(initialsize_52821); for (var i=0;i<initialsize_52821;++i) {result_52823.data[i]={Field0: 0, Field1: null, Field2: null};}return result_52823;
}
function newmap_52812() {

var result_52814 = null;
result_52814 = {bindings: inittable_52816(64), m_type: NTI51198, tags: null};
return result_52814;
}
function newseq_53493(len_53497) {

var result_53499 = null;
result_53499 = new Array(len_53497); for (var i=0;i<len_53497;++i) {result_53499[i]=null;}return result_53499;
}
function newseq_54759(len_54763) {

var result_54765 = null;
result_54765 = new Array(len_54763); for (var i=0;i<len_54763;++i) {result_54765[i]=null;}return result_54765;
}
function inittable_54785(initialsize_54790) {

var result_54792 = {data: null, counter: 0};
result_54792.counter = 0;
result_54792.data = new Array(initialsize_54790); for (var i=0;i<initialsize_54790;++i) {result_54792.data[i]={Field0: 0, Field1: null, Field2: null};}return result_54792;
}
function newparser_54715() {

var result_54717 = null;
result_54717 = {stack: newseq_53493(0), valueparsers: newseq_54759(0), litwords: inittable_54785(64), token: null, specialchardetected: false, ws: null};
if (result_54717.valueparsers != null) { result_54717.valueparsers.push({m_type: NTI51122, token: null}); } else { result_54717.valueparsers = [{m_type: NTI51122, token: null}]; };
if (result_54717.valueparsers != null) { result_54717.valueparsers.push({m_type: NTI51118, token: null}); } else { result_54717.valueparsers = [{m_type: NTI51118, token: null}]; };
if (result_54717.valueparsers != null) { result_54717.valueparsers.push({m_type: NTI51120, token: null}); } else { result_54717.valueparsers = [{m_type: NTI51120, token: null}]; };
L1: do {
var ex_55002 = null;
var i_55010 = 0;
var L_55012 = (parserexts_51418[0] != null ? parserexts_51418[0].length : 0);
L2: do {
L3: while (true) {
if (!(i_55010 < L_55012)) break L3;
ex_55002 = parserexts_51418[0][i_55010];
ex_55002(result_54717);
i_55010 += 1;
}
} while(false);
} while(false);
return result_54717;
}
function newvalue_53648(v_53650) {

var Tmp1;
var result_53651 = null;
if (v_53650) {
Tmp1 = {m_type: NTI51177, tags: null};
}
else {
Tmp1 = {m_type: NTI51179, tags: null};
}

result_53651 = Tmp1;
return result_53651;
}
function newnilval_53655() {

var result_53657 = null;
result_53657 = {m_type: NTI51183, tags: null};
return result_53657;
}
function newundefval_53659() {

var result_53661 = null;
result_53661 = {m_type: NTI51181, tags: null};
return result_53661;
}
function newblok_53525() {

var result_53527 = null;
result_53527 = {nodes: newseq_53493(0), m_type: NTI51195, pos: 0, tags: null};
return result_53527;
}
function HEX21HEX26_44004(h_44006, val_44007) {

var result_44008 = 0;
result_44008 = ((h_44006 + val_44007) >>> 0);
result_44008 = ((result_44008 + (result_44008 << 10)) >>> 0);
result_44008 = (result_44008 ^ ((result_44008 >>> 0) >>> 6));
return result_44008;
}
function HEX21HEX24_44027(h_44029) {

var result_44030 = 0;
result_44030 = ((h_44029 + (h_44029 << 3)) >>> 0);
result_44030 = (result_44030 ^ ((result_44030 >>> 0) >>> 11));
result_44030 = ((result_44030 + (result_44030 << 15)) >>> 0);
return result_44030;
}
function hash_44827(x_44829) {

var result_44830 = 0;
var h_44831 = 0;
L1: do {
var i_44841 = 0;
var HEX3Atmp_44852 = 0;
HEX3Atmp_44852 = ((x_44829 != null ? x_44829.length-1 : 0) - 1);
var res_44855 = 0;
L2: do {
L3: while (true) {
if (!(res_44855 <= HEX3Atmp_44852)) break L3;
i_44841 = res_44855;
h_44831 = HEX21HEX26_44004(h_44831, x_44829[i_44841]);
res_44855 += 1;
}
} while(false);
} while(false);
result_44830 = HEX21HEX24_44027(h_44831);
return result_44830;
}
function isfilled_47463(hcode_47465) {

var result_47466 = false;
result_47466 = !((hcode_47465 == 0));
return result_47466;
}
function nexttry_47601(h_47603, maxhash_47604) {

var result_47605 = 0;
result_47605 = ((h_47603 + 1) & maxhash_47604);
return result_47605;
}
function rawget_53064(t_53069, key_53071, hc_53073, hc_53073_Idx) {

var Tmp3;
var result_53074 = 0;
BeforeRet: do {
hc_53073[hc_53073_Idx] = hash_44827(key_53071);
if ((hc_53073[hc_53073_Idx] == 0)) {
hc_53073[hc_53073_Idx] = 314159265;
}

var h_53078 = (hc_53073[hc_53073_Idx] & (t_53069.data != null ? (t_53069.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_47463(t_53069.data[h_53078].Field0)) break L2;
if (!(t_53069.data[h_53078].Field0 == hc_53073[hc_53073_Idx])) Tmp3 = false; else {Tmp3 = eqStrings(t_53069.data[h_53078].Field1, key_53071); }if (Tmp3) {
result_53074 = h_53078;
break BeforeRet;
}

h_53078 = nexttry_47601(h_53078, (t_53069.data != null ? (t_53069.data.length-1) : -1));
}
} while(false);
result_53074 = (-1 - h_53078);
} while (false); 
return result_53074;
}
function haskey_53052(t_53058, key_53060) {

var result_53061 = false;
var hc_53062 = [0];
result_53061 = (0 <= rawget_53064(t_53058, key_53060, hc_53062, 0));
return result_53061;
}
function HEX5BHEX5D_53084(t_53091, key_53093) {

var result_53095 = [null, 0];
var result_53095_Idx = 0;
var hc_53097 = [0];
var index_53099 = rawget_53064(t_53091, key_53093, hc_53097, 0);
if ((0 <= index_53099)) {
result_53095 = t_53091.data[index_53099]; result_53095_Idx = "Field2";
}
else {
var e_53203 = null;
e_53203 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null};
e_53203.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_53093), NTI138);
raiseException(e_53203, "KeyError");
}

return [result_53095, result_53095_Idx];
}
function mustrehash_47468(length_47470, counter_47471) {

var result_47472 = false;
result_47472 = (((length_47470 * 2) < (counter_47471 * 3)) || ((length_47470 - counter_47471) < 4));
return result_47472;
}
function rawgetknownhc_53291(t_53296, key_53298, hc_53300) {

var result_53301 = 0;
BeforeRet: do {
var h_53302 = (hc_53300 & (t_53296.data != null ? (t_53296.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_47463(t_53296.data[h_53302].Field0)) break L2;
if (((t_53296.data[h_53302].Field0 == hc_53300) && eqStrings(t_53296.data[h_53302].Field1, key_53298))) {
result_53301 = h_53302;
break BeforeRet;
}

h_53302 = nexttry_47601(h_53302, (t_53296.data != null ? (t_53296.data.length-1) : -1));
}
} while(false);
result_53301 = (-1 - h_53302);
} while (false); 
return result_53301;
}
function rawinsert_53307(t_53314, data_53318, data_53318_Idx, key_53320, val_53322, hc_53324, h_53326) {

data_53318[data_53318_Idx][h_53326].Field1 = nimCopy(null, key_53320, NTI138);
data_53318[data_53318_Idx][h_53326].Field2 = val_53322;
data_53318[data_53318_Idx][h_53326].Field0 = hc_53324;
}
function enlarge_53238(t_53245) {

var n_53249 = null;
n_53249 = new Array(((t_53245.data != null ? t_53245.data.length : 0) * 2)); for (var i=0;i<((t_53245.data != null ? t_53245.data.length : 0) * 2);++i) {n_53249[i]={Field0: 0, Field1: null, Field2: null};}var Tmp1 = t_53245.data; t_53245.data = n_53249; n_53249 = Tmp1;L2: do {
var i_53289 = 0;
var HEX3Atmp_53330 = 0;
HEX3Atmp_53330 = (n_53249 != null ? (n_53249.length-1) : -1);
var res_53333 = 0;
L3: do {
L4: while (true) {
if (!(res_53333 <= HEX3Atmp_53330)) break L4;
i_53289 = res_53333;
if (isfilled_47463(n_53249[i_53289].Field0)) {
var j_53305 = (-1 - rawgetknownhc_53291(t_53245, n_53249[i_53289].Field1, n_53249[i_53289].Field0));
rawinsert_53307(t_53245, t_53245, "data", n_53249[i_53289].Field1, n_53249[i_53289].Field2, n_53249[i_53289].Field0, j_53305);
}

res_53333 += 1;
}
} while(false);
} while(false);
}
function rawgetdeep_53339(t_53344, key_53346, hc_53348, hc_53348_Idx) {

var result_53349 = 0;
hc_53348[hc_53348_Idx] = hash_44827(key_53346);
if ((hc_53348[hc_53348_Idx] == 0)) {
hc_53348[hc_53348_Idx] = 314159265;
}

var h_53353 = (hc_53348[hc_53348_Idx] & (t_53344.data != null ? (t_53344.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_47463(t_53344.data[h_53353].Field0)) break L2;
h_53353 = nexttry_47601(h_53353, (t_53344.data != null ? (t_53344.data.length-1) : -1));
}
} while(false);
result_53349 = h_53353;
return result_53349;
}
function add_53217(t_53224, key_53226, val_53228) {

if (mustrehash_47468((t_53224.data != null ? t_53224.data.length : 0), t_53224.counter)) {
enlarge_53238(t_53224);
}

var hc_53337 = [0];
var j_53357 = rawgetdeep_53339(t_53224, key_53226, hc_53337, 0);
rawinsert_53307(t_53224, t_53224, "data", key_53226, val_53228, hc_53337[0], j_53357);
t_53224.counter += 1;
}
function neworgetlitword_53046(self_53048, s_53049) {

var Tmp1;
var result_53050 = null;
BeforeRet: do {
if (haskey_53052(self_53048.litwords, s_53049)) {
result_53050 = (Tmp1 = HEX5BHEX5D_53084(self_53048.litwords, s_53049), Tmp1[0][Tmp1[1]]);
break BeforeRet;
}
else {
result_53050 = {word: s_53049, m_type: NTI51134, tags: null};
add_53217(self_53048.litwords, s_53049, result_53050);
}

} while (false); 
return result_53050;
}
function rawget_52199(t_52204, key_52206, hc_52208, hc_52208_Idx) {

var Tmp3;
var result_52209 = 0;
BeforeRet: do {
hc_52208[hc_52208_Idx] = hash_51870(key_52206);
if ((hc_52208[hc_52208_Idx] == 0)) {
hc_52208[hc_52208_Idx] = 314159265;
}

var h_52211 = (hc_52208[hc_52208_Idx] & (t_52204.data != null ? (t_52204.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_47463(t_52204.data[h_52211].Field0)) break L2;
if (!(t_52204.data[h_52211].Field0 == hc_52208[hc_52208_Idx])) Tmp3 = false; else {Tmp3 = HEX3DHEX3D_51880(t_52204.data[h_52211].Field1, key_52206); }if (Tmp3) {
result_52209 = h_52211;
break BeforeRet;
}

h_52211 = nexttry_47601(h_52211, (t_52204.data != null ? (t_52204.data.length-1) : -1));
}
} while(false);
result_52209 = (-1 - h_52211);
} while (false); 
return result_52209;
}
function haskey_52222(t_52228, key_52230) {

var result_52231 = false;
var hc_52232 = [0];
result_52231 = (0 <= rawget_52199(t_52228, key_52230, hc_52232, 0));
return result_52231;
}
function HEX5BHEX5D_52248(t_52255, key_52257) {

var result_52259 = [null, 0];
var result_52259_Idx = 0;
var hc_52261 = [0];
var index_52263 = rawget_52199(t_52255, key_52257, hc_52261, 0);
if ((0 <= index_52263)) {
result_52259 = t_52255.data[index_52263]; result_52259_Idx = "Field2";
}
else {
var e_52403 = null;
e_52403 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null};
e_52403.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(HEX24_51604(key_52257)), NTI138);
raiseException(e_52403, "KeyError");
}

return [result_52259, result_52259_Idx];
}
function default_52445() {

var result_52451 = null;
return result_52451;
}
function default_52454() {

var result_52460 = null;
return result_52460;
}
function isempty_47459(hcode_47461) {

var result_47462 = false;
result_47462 = (hcode_47461 == 0);
return result_47462;
}
function del_52417(t_52424, key_52426) {

var Tmp6;
var Tmp7;
var Tmp8;
var Tmp9;
var Tmp10;
var hc_52427 = [0];
var i_52441 = rawget_52199(t_52424, key_52426, hc_52427, 0);
var msk_52442 = (t_52424.data != null ? (t_52424.data.length-1) : -1);
if ((0 <= i_52441)) {
t_52424.data[i_52441].Field0 = 0;
t_52424.data[i_52441].Field1 = default_52445();
t_52424.data[i_52441].Field2 = default_52454();
t_52424.counter -= 1;
L1: do {
L2: do {
L3: while (true) {
if (!true) break L3;
var j_52471 = i_52441;
var r_52472 = j_52471;
t_52424.data[i_52441].Field0 = 0;
t_52424.data[i_52441].Field1 = default_52445();
t_52424.data[i_52441].Field2 = default_52454();
L4: do {
L5: while (true) {
if (!true) break L5;
i_52441 = ((i_52441 + 1) & msk_52442);
if (isempty_47459(t_52424.data[i_52441].Field0)) {
break L1;
}

r_52472 = (t_52424.data[i_52441].Field0 & msk_52442);
if (!(r_52472 <= i_52441)) Tmp8 = false; else {Tmp8 = (j_52471 < r_52472); }if (Tmp8) Tmp7 = true; else {if (!(j_52471 < r_52472)) Tmp9 = false; else {Tmp9 = (i_52441 < j_52471); }Tmp7 = Tmp9; }if (Tmp7) Tmp6 = true; else {if (!(i_52441 < j_52471)) Tmp10 = false; else {Tmp10 = (r_52472 <= i_52441); }Tmp6 = Tmp10; }if (!(Tmp6)) {
break L4;
}

}
} while(false);
nimCopy(t_52424.data[j_52471], t_52424.data[i_52441], NTI51210);
}
} while(false);
} while(false);
}

}
function removebinding_52216(self_52218, key_52219) {

var Tmp1;
var result_52220 = null;
if (haskey_52222(self_52218.bindings, key_52219)) {
result_52220 = (Tmp1 = HEX5BHEX5D_52248(self_52218.bindings, key_52219), Tmp1[0][Tmp1[1]]);
del_52417(self_52218.bindings, key_52219);
}

return result_52220;
}
function rawgetknownhc_52702(t_52707, key_52709, hc_52711) {

var result_52712 = 0;
BeforeRet: do {
var h_52713 = (hc_52711 & (t_52707.data != null ? (t_52707.data.length-1) : -1));
L1: do {
L2: while (true) {
if (!isfilled_47463(t_52707.data[h_52713].Field0)) break L2;
if (((t_52707.data[h_52713].Field0 == hc_52711) && HEX3DHEX3D_51880(t_52707.data[h_52713].Field1, key_52709))) {
result_52712 = h_52713;
break BeforeRet;
}

h_52713 = nexttry_47601(h_52713, (t_52707.data != null ? (t_52707.data.length-1) : -1));
}
} while(false);
result_52712 = (-1 - h_52713);
} while (false); 
return result_52712;
}
function rawinsert_52718(t_52725, data_52729, data_52729_Idx, key_52731, val_52733, hc_52735, h_52737) {

data_52729[data_52729_Idx][h_52737].Field1 = key_52731;
data_52729[data_52729_Idx][h_52737].Field2 = val_52733;
data_52729[data_52729_Idx][h_52737].Field0 = hc_52735;
}
function enlarge_52649(t_52656) {

var n_52660 = null;
n_52660 = new Array(((t_52656.data != null ? t_52656.data.length : 0) * 2)); for (var i=0;i<((t_52656.data != null ? t_52656.data.length : 0) * 2);++i) {n_52660[i]={Field0: 0, Field1: null, Field2: null};}var Tmp1 = t_52656.data; t_52656.data = n_52660; n_52660 = Tmp1;L2: do {
var i_52700 = 0;
var HEX3Atmp_52741 = 0;
HEX3Atmp_52741 = (n_52660 != null ? (n_52660.length-1) : -1);
var res_52744 = 0;
L3: do {
L4: while (true) {
if (!(res_52744 <= HEX3Atmp_52741)) break L4;
i_52700 = res_52744;
if (isfilled_47463(n_52660[i_52700].Field0)) {
var j_52716 = (-1 - rawgetknownhc_52702(t_52656, n_52660[i_52700].Field1, n_52660[i_52700].Field0));
rawinsert_52718(t_52656, t_52656, "data", n_52660[i_52700].Field1, n_52660[i_52700].Field2, n_52660[i_52700].Field0, j_52716);
}

res_52744 += 1;
}
} while(false);
} while(false);
}
function HEX5BHEX5DHEX3D_52613(t_52620, key_52622, val_52624) {

var hc_52625 = [0];
var index_52639 = rawget_52199(t_52620, key_52622, hc_52625, 0);
if ((0 <= index_52639)) {
t_52620.data[index_52639].Field2 = val_52624;
}
else {
if (mustrehash_47468((t_52620.data != null ? t_52620.data.length : 0), t_52620.counter)) {
enlarge_52649(t_52620);
index_52639 = rawgetknownhc_52702(t_52620, key_52622, hc_52625[0]);
}

index_52639 = (-1 - index_52639);
rawinsert_52718(t_52620, t_52620, "data", key_52622, val_52624, hc_52625[0], index_52639);
t_52620.counter += 1;
}

}
function makebinding_52605(self_52607, key_52608, val_52609) {

var result_52610 = null;
BeforeRet: do {
if (isObj(val_52609.m_type, NTI51181)) {
result_52610 = removebinding_52216(self_52607, key_52608);
break BeforeRet;
}

result_52610 = {key: key_52608, val: val_52609, m_type: NTI51224, tags: null};
HEX5BHEX5DHEX3D_52613(self_52607.bindings, key_52608, result_52610);
} while (false); 
return result_52610;
}
function newevalword_53041(s_53043) {

var result_53044 = null;
result_53044 = {word: s_53043, m_type: NTI51136, tags: null};
return result_53044;
}
function makeword_56691(self_56693, word_56694, value_56695) {

makebinding_52605(self_56693.root, newevalword_53041(word_56694), value_56695);
}
function newrootactivation_55852(root_55854) {

var result_55855 = null;
result_55855 = {body: newblok_53525(), locals: root_55854, m_type: NTI55652, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};
return result_55855;
}
function newinterpreter_57105() {

var Tmp1;
var result_57107 = null;
var spry_57108 = {root: newmap_52812(), parser: newparser_54715(), currentactivation: null, rootactivation: null, lastself: null, modules: null, trueval: null, falseval: null, undefval: null, nilval: null, emptyblok: null, objecttag: null, moduletag: null};
result_57107 = spry_57108;
spry_57108.trueval = newvalue_53648(true);
spry_57108.falseval = newvalue_53648(false);
spry_57108.nilval = newnilval_53655();
spry_57108.undefval = newundefval_53659();
spry_57108.emptyblok = newblok_53525();
spry_57108.objecttag = neworgetlitword_53046(spry_57108.parser, makeNimstrLit("object"));
spry_57108.moduletag = neworgetlitword_53046(spry_57108.parser, makeNimstrLit("module"));
spry_57108.modules = newblok_53525();
makeword_56691(spry_57108, makeNimstrLit("false"), spry_57108.falseval);
makeword_56691(spry_57108, makeNimstrLit("true"), spry_57108.trueval);
makeword_56691(spry_57108, makeNimstrLit("undef"), spry_57108.undefval);
makeword_56691(spry_57108, makeNimstrLit("nil"), spry_57108.nilval);
makeword_56691(spry_57108, makeNimstrLit("modules"), spry_57108.modules);
spry_57108.rootactivation = newrootactivation_55852(spry_57108.root);
spry_57108.rootactivation.parent = spry_57108.currentactivation;
if (!(spry_57108.rootactivation.self === null)) Tmp1 = false; else {Tmp1 = !((spry_57108.rootactivation.parent === null)); }if (Tmp1) {
spry_57108.rootactivation.self = spry_57108.rootactivation.parent.self;
}

spry_57108.currentactivation = spry_57108.rootactivation;
return result_57107;
}
var spry_75001 = /**/[newinterpreter_57105()];
function newprimfunc_55830(primitive_55832) {

var result_55833 = null;
result_55833 = {primitive: primitive_55832, m_type: NTI55624, tags: null};
return result_55833;
}
function argparent_56427(spry_56429) {

var result_56430 = null;
BeforeRet: do {
L1: do {
var activation_56431 = null;
var HEX3Atmp_56433 = null;
HEX3Atmp_56433 = spry_56429.currentactivation;
var activation_56438 = HEX3Atmp_56433;
L2: do {
L3: while (true) {
if (!!(!(isObj(activation_56438.m_type, NTI55648)))) break L3;
activation_56438 = activation_56438.parent;
}
} while(false);
activation_56438 = activation_56438.parent;
L4: do {
L5: while (true) {
if (!!((activation_56438 === null))) break L5;
activation_56431 = activation_56438;
result_56430 = activation_56431;
break BeforeRet;
activation_56438 = activation_56438.parent;
L6: do {
L7: while (true) {
if (!!(!(isObj(activation_56438.m_type, NTI55648)))) break L7;
activation_56438 = activation_56438.parent;
}
} while(false);
}
} while(false);
} while(false);
} while (false); 
return result_56430;
}
function self_56663(spry_56665) {

var result_56666 = null;
if ((spry_56665.currentactivation.self === null)) {
spry_56665.currentactivation.self = spry_56665.undefval;
}

result_56666 = spry_56665.currentactivation.self;
return result_56666;
}
function newprimmeth_55835(primitive_55837) {

var result_55838 = null;
result_55838 = {primitive: primitive_55837, m_type: NTI55627, tags: null};
return result_55838;
}
function evalarginfix_56659(spry_56661) {

var result_56662 = null;
result_56662 = eval_55719(spry_56661.currentactivation.last, spry_56661);
spry_56661.lastself = result_56662;
return result_56662;
}
function len_55818(self_55820) {

var result_55821 = 0;
result_55821 = (self_55820.body.nodes != null ? self_55820.body.nodes.length : 0);
return result_55821;
}
function atend_56239(self_56241) {

var result_56242 = false;
result_56242 = (self_56241.pos == len_55818(self_56241));
return result_56242;
}
function raiseruntimeexception_51330(msg_51332) {

var e_51336 = null;
e_51336 = {m_type: NTI51081, parent: null, name: null, message: null, trace: null};
e_51336.message = nimCopy(null, msg_51332, NTI138);
raiseException(e_51336, "RuntimeException");
}
function HEX5BHEX5D_55813(self_55815, i_55816) {

var result_55817 = null;
result_55817 = self_55815.body.nodes[i_55816];
return result_55817;
}
function next_56243(self_56245) {

var result_56246 = null;
if (atend_56239(self_56245)) {
raiseruntimeexception_51330(makeNimstrLit("End of current block, too few arguments?"));
}
else {
result_56246 = HEX5BHEX5D_55813(self_56245, self_56245.pos);
self_56245.pos += 1;
}

return result_56246;
}
function evalarg_56687(spry_56689) {

var result_56690 = null;
result_56690 = eval_55719(next_56243(spry_56689.currentactivation), spry_56689);
return result_56690;
}
function add_53663(self_53665, n_53666) {

if (self_53665.nodes != null) { self_53665.nodes.push(n_53666); } else { self_53665.nodes = [n_53666]; };
}
function litify_57100(spry_57102, word_57103) {

var result_57104 = null;
result_57104 = neworgetlitword_53046(spry_57102.parser, HEX24_51604(word_57103));
return result_57104;
}
function boolval_56696(val_56698, spry_56699) {

var result_56700 = null;
if (val_56698) {
result_56700 = spry_56699.trueval;
}
else {
result_56700 = spry_56699.falseval;
}

return result_56700;
}
function find_53755(a_53760, item_53762) {

var result_53763 = 0;
BeforeRet: do {
L1: do {
var i_53771 = null;
var i_53784 = 0;
L2: do {
L3: while (true) {
if (!(i_53784 < (a_53760 != null ? a_53760.length : 0))) break L3;
i_53771 = a_53760[i_53784];
if (HEX3DHEX3D_51880(i_53771, item_53762)) {
break BeforeRet;
}

result_53763 += 1;
i_53784 += 1;
}
} while(false);
} while(false);
result_53763 = -1;
} while (false); 
return result_53763;
}
function contains_53745(a_53750, item_53752) {

var result_53753 = false;
BeforeRet: do {
result_53753 = (0 <= find_53755(a_53750, item_53752));
break BeforeRet;
} while (false); 
return result_53753;
}
function contains_53738(self_53740, n_53741) {

var result_53742 = false;
result_53742 = contains_53745(self_53740.nodes, n_53741);
return result_53742;
}
function assign_56646(spry_56648, word_56649, val_56650) {

makebindinginmap_56525(spry_56648, word_56649, val_56650);
}
function arginfix_56651(spry_56653) {

var result_56654 = null;
result_56654 = spry_56653.currentactivation.last;
spry_56653.lastself = result_56654;
return result_56654;
}
function getordefault_52184(t_52190, key_52192) {

var result_52193 = null;
var hc_52195 = [0];
var index_52197 = rawget_52199(t_52190, key_52192, hc_52195, 0);
if ((0 <= index_52197)) {
result_52193 = t_52190.data[index_52197].Field2;
}

return result_52193;
}
function lookup_52178(self_52180, key_52181) {

var result_52182 = null;
result_52182 = getordefault_52184(self_52180.bindings, key_52181);
return result_52182;
}
function lookup_56332(spry_56334, key_56335) {

var Tmp6;
var Tmp7;
var result_56336 = null;
BeforeRet: do {
if (isObj(key_56335.m_type, NTI51138)) {
var binding_56338 = lookup_56332(spry_56334, key_56335.module);
if (!((binding_56338 === null))) {
var module_56348 = binding_56338.val;
if (!((module_56348 === null))) {
result_56336 = lookup_52178(module_56348, key_56335);
}

}

}
else {
if (isObj(key_56335.m_type, NTI51149)) {
var binding_56359 = lookup_56332(spry_56334, key_56335.module);
if (!((binding_56359 === null))) {
var module_56369 = binding_56359.val;
if (!((module_56369 === null))) {
result_56336 = lookup_52178(module_56369, key_56335);
}

}

}
else {
L1: do {
var activation_56379 = null;
var HEX3Atmp_56412 = null;
HEX3Atmp_56412 = spry_56334.currentactivation;
var activation_56416 = HEX3Atmp_56412;
L2: do {
L3: while (true) {
if (!!((activation_56416 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(!(isObj(activation_56416.m_type, NTI55648)))) break L5;
if (isObj(activation_56416.m_type, NTI55646)) {
Tmp6 = activation_56416.body.parent;
}
else {
Tmp6 = activation_56416.parent;
}

activation_56416 = Tmp6;
}
} while(false);
activation_56379 = activation_56416;
var hit_56380 = lookup_56314(activation_56379, key_56335);
if (!((hit_56380 === null))) {
result_56336 = hit_56380;
break BeforeRet;
}

if (isObj(activation_56416.m_type, NTI55646)) {
Tmp7 = activation_56416.body.parent;
}
else {
Tmp7 = activation_56416.parent;
}

activation_56416 = Tmp7;
}
} while(false);
} while(false);
L8: do {
var map_56398 = null;
var HEX3Atmp_56421 = null;
HEX3Atmp_56421 = spry_56334.modules.nodes;
var i_56424 = 0;
var L_56426 = (HEX3Atmp_56421 != null ? HEX3Atmp_56421.length : 0);
L9: do {
L10: while (true) {
if (!(i_56424 < L_56426)) break L10;
map_56398 = HEX3Atmp_56421[i_56424];
var hit_56399 = lookup_52178(map_56398, key_56335);
if (!((hit_56399 === null))) {
result_56336 = hit_56399;
break BeforeRet;
}

i_56424 += 1;
}
} while(false);
} while(false);
}
}
} while (false); 
return result_56336;
}
function arg_56655(spry_56657) {

var result_56658 = null;
result_56658 = next_56243(spry_56657.currentactivation);
return result_56658;
}
function newvalue_53643(v_53645) {

var result_53646 = null;
result_53646 = {value: v_53645, m_type: NTI51172, tags: null};
return result_53646;
}
function newvalue_53638(v_53640) {

var result_53641 = null;
result_53641 = {value: v_53640, m_type: NTI51169, tags: null};
return result_53641;
}
function newvalue_53633(v_53635) {

var result_53636 = null;
result_53636 = {value: v_53635, m_type: NTI51166, tags: null};
return result_53636;
}
function currentkeyword_55107(self_55109) {

var result_55110 = null;
BeforeRet: do {
if (isObj(self_55109.stack[(self_55109.stack != null ? (self_55109.stack.length-1) : -1)].m_type, NTI51158)) {
result_55110 = self_55109.stack[(self_55109.stack != null ? (self_55109.stack.length-1) : -1)];
break BeforeRet;
}
else {
result_55110 = null;
break BeforeRet;
}

} while (false); 
return result_55110;
}
function inbalance_55027(self_55029) {

var result_55030 = false;
BeforeRet: do {
result_55030 = ((self_55029.args != null ? self_55029.args.length : 0) == (self_55029.keys != null ? self_55029.keys.length : 0));
break BeforeRet;
} while (false); 
return result_55030;
}
function pop_55130(s_55136, s_55136_Idx) {

var result_55137 = null;
var L_55146 = ((s_55136[s_55136_Idx] != null ? s_55136[s_55136_Idx].length : 0) - 1);
result_55137 = s_55136[s_55136_Idx][L_55146];
s_55136[s_55136_Idx].length = L_55146;
return result_55137;
}
function nsuJoinSep(a_36642, sep_36643) {

var result_36644 = null;
if ((0 < (a_36642 != null ? a_36642.length : 0))) {
var L_36659 = ((sep_36643 != null ? sep_36643.length-1 : 0) * ((a_36642 != null ? a_36642.length : 0) - 1));
L1: do {
var i_36669 = 0;
var HEX3Atmp_36690 = 0;
HEX3Atmp_36690 = (a_36642 != null ? (a_36642.length-1) : -1);
var res_36693 = 0;
L2: do {
L3: while (true) {
if (!(res_36693 <= HEX3Atmp_36690)) break L3;
i_36669 = res_36693;
L_36659 += (a_36642[i_36669] != null ? a_36642[i_36669].length-1 : 0);
res_36693 += 1;
}
} while(false);
} while(false);
result_36644 = nimCopy(null, mnewString(0), NTI138);
if (result_36644 != null) { result_36644 = (result_36644.slice(0, -1)).concat(a_36642[0]); } else { result_36644 = a_36642[0];};
L4: do {
var i_36688 = 0;
var HEX3Atmp_36698 = 0;
HEX3Atmp_36698 = (a_36642 != null ? (a_36642.length-1) : -1);
var res_36701 = 1;
L5: do {
L6: while (true) {
if (!(res_36701 <= HEX3Atmp_36698)) break L6;
i_36688 = res_36701;
if (result_36644 != null) { result_36644 = (result_36644.slice(0, -1)).concat(sep_36643); } else { result_36644 = sep_36643;};
if (result_36644 != null) { result_36644 = (result_36644.slice(0, -1)).concat(a_36642[i_36688]); } else { result_36644 = a_36642[i_36688];};
res_36701 += 1;
}
} while(false);
} while(false);
}
else {
result_36644 = nimCopy(null, makeNimstrLit(""), NTI138);
}

return result_36644;
}
function add_53683(x_53689, x_53689_Idx, y_53692) {

var xl_53701 = (x_53689[x_53689_Idx] != null ? x_53689[x_53689_Idx].length : 0);
x_53689[x_53689_Idx].length = (xl_53701 + (y_53692 != null ? y_53692.length : 0));
L1: do {
var i_53728 = 0;
var HEX3Atmp_53730 = 0;
HEX3Atmp_53730 = (y_53692 != null ? (y_53692.length-1) : -1);
var res_53733 = 0;
L2: do {
L3: while (true) {
if (!(res_53733 <= HEX3Atmp_53730)) break L3;
i_53728 = res_53733;
x_53689[x_53689_Idx][(xl_53701 + i_53728)] = y_53692[i_53728];
res_53733 += 1;
}
} while(false);
} while(false);
}
function producenodes_55047(self_55049) {

var result_55051 = [null];
result_55051[0] = nimCopy(null, newseq_53493(0), NTI53498);
if (result_55051[0] != null) { result_55051[0].push(newevalword_53041(nsuJoinSep(self_55049.keys, makeNimstrLit("")))); } else { result_55051[0] = [newevalword_53041(nsuJoinSep(self_55049.keys, makeNimstrLit("")))]; };
add_53683(result_55051, 0, self_55049.args);
return result_55051[0];
}
function delete_54078(x_54084, x_54084_Idx, i_54086) {

x_54084[x_54084_Idx].splice(i_54086, 1);}
function removelast_54074(self_54076) {

delete_54078(self_54076, "nodes", (self_54076.nodes != null ? (self_54076.nodes.length-1) : -1));
}
function add_53677(self_53679, n_53681) {

add_53683(self_53679, "nodes", n_53681);
}
function closekeyword_55113(self_55115) {

var keyword_55164 = currentkeyword_55107(self_55115);
pop_55130(self_55115, "stack");
var nodes_55175 = producenodes_55047(keyword_55164);
removelast_54074(self_55115.stack[(self_55115.stack != null ? (self_55115.stack.length-1) : -1)]);
add_53677(self_55115.stack[(self_55115.stack != null ? (self_55115.stack.length-1) : -1)], nodes_55175);
}
function doaddnode_55176(self_55178, node_55179) {

var keyword_55180 = currentkeyword_55107(self_55178);
if ((keyword_55180 === null)) {
add_53663(self_55178.stack[(self_55178.stack != null ? (self_55178.stack.length-1) : -1)], node_55179);
}
else {
if (inbalance_55027(keyword_55180)) {
closekeyword_55113(self_55178);
doaddnode_55176(self_55178, node_55179);
}
else {
if (keyword_55180.args != null) { keyword_55180.args.push(node_55179); } else { keyword_55180.args = [node_55179]; };
}

}

}
function push_55199(self_55201, n_55202) {

if (!(((self_55201.stack != null ? self_55201.stack.length : 0) == 0))) {
doaddnode_55176(self_55201, n_55202);
}

if (self_55201.stack != null) { self_55201.stack.push(n_55202); } else { self_55201.stack = [n_55202]; };
}
function raiseparseexception_52795(msg_52797) {

var e_52801 = null;
e_52801 = {m_type: NTI51005, parent: null, name: null, message: null, trace: null};
e_52801.message = nimCopy(null, msg_52797, NTI138);
raiseException(e_52801, "ParseException");
}
function newgetargword_53434(s_53436) {

var result_53437 = null;
result_53437 = {word: s_53436, m_type: NTI51156, tags: null};
return result_53437;
}
function HEX5BHEX5D_20244(s_20246, x_20256) {

var result_20257 = null;
result_20257 = nimCopy(null, (s_20246.slice(x_20256.a, (x_20256.b)+1).concat(0)), NTI138);
return result_20257;
}
function HEX2EHEX2E_36461(a_36465, b_36467) {

var result_36469 = {a: 0, b: 0};
result_36469.a = a_36465;
result_36469.b = b_36467;
return result_36469;
}
function newevalargword_53429(s_53431) {

var result_53432 = null;
result_53432 = {word: s_53431, m_type: NTI51145, tags: null};
return result_53432;
}
function newgetselfword_53419(s_53421) {

var result_53422 = null;
result_53422 = {word: s_53421, m_type: NTI51152, tags: null};
return result_53422;
}
function newgetouterword_53424(s_53426) {

var result_53427 = null;
result_53427 = {word: s_53426, m_type: NTI51154, tags: null};
return result_53427;
}
function preprocesssub_36726(sub_36728, a_36730) {

var m_36731 = (sub_36728 != null ? sub_36728.length-1 : 0);
L1: do {
var i_36742 = 0;
var res_36756 = 0;
L2: do {
L3: while (true) {
if (!(res_36756 <= 255)) break L3;
i_36742 = res_36756;
a_36730[i_36742] = (m_36731 + 1);
res_36756 += 1;
}
} while(false);
} while(false);
L4: do {
var i_36752 = 0;
var HEX3Atmp_36761 = 0;
HEX3Atmp_36761 = (m_36731 - 1);
var res_36764 = 0;
L5: do {
L6: while (true) {
if (!(res_36764 <= HEX3Atmp_36761)) break L6;
i_36752 = res_36764;
a_36730[sub_36728[i_36752]] = (m_36731 - i_36752);
res_36764 += 1;
}
} while(false);
} while(false);
}
function findaux_36768(s_36770, sub_36771, start_36772, a_36773) {

var result_36774 = 0;
BeforeRet: do {
var m_36775 = (sub_36771 != null ? sub_36771.length-1 : 0);
var n_36776 = (s_36770 != null ? s_36770.length-1 : 0);
var j_36777 = start_36772;
L1: do {
L2: while (true) {
if (!(j_36777 <= (n_36776 - m_36775))) break L2;
L3: do {
L4: do {
var k_36788 = 0;
var HEX3Atmp_36800 = 0;
HEX3Atmp_36800 = (m_36775 - 1);
var res_36803 = 0;
L5: do {
L6: while (true) {
if (!(res_36803 <= HEX3Atmp_36800)) break L6;
k_36788 = res_36803;
if (!((sub_36771[k_36788] == s_36770[(k_36788 + j_36777)]))) {
break L3;
}

res_36803 += 1;
}
} while(false);
} while(false);
result_36774 = j_36777;
break BeforeRet;
} while(false);
j_36777 += a_36773[s_36770[(j_36777 + m_36775)]];
}
} while(false);
result_36774 = -1;
break BeforeRet;
} while (false); 
return result_36774;
}
function nsuFindStr(s_36809, sub_36810, start_36811) {

var result_36812 = 0;
var a_36813 = [new Int32Array(256)];
preprocesssub_36726(sub_36810, a_36813[0]);
result_36812 = findaux_36768(s_36809, sub_36810, start_36811, a_36813[0]);
return result_36812;
}
function contains_37251(s_37253, sub_37254) {

var result_37255 = false;
BeforeRet: do {
result_37255 = (0 <= nsuFindStr(s_37253, sub_37254, 0));
break BeforeRet;
} while (false); 
return result_37255;
}
function substreq_34262(s_34264, pos_34265, substr_34266) {

var result_34267 = false;
BeforeRet: do {
var i_34268 = 0;
var length_34269 = (substr_34266 != null ? substr_34266.length-1 : 0);
L1: do {
L2: while (true) {
if (!((i_34268 < length_34269) && (s_34264[(pos_34265 + i_34268)] == substr_34266[i_34268]))) break L2;
i_34268 += 1;
}
} while(false);
result_34267 = (i_34268 == length_34269);
break BeforeRet;
} while (false); 
return result_34267;
}
function nsuSplitString(s_35165, sep_35166, maxsplit_35167) {

var result_35169 = null;
result_35169 = nimCopy(null, [], NTI35187);
L1: do {
var x_35171 = null;
var last_35202 = 0;
var splits_35204 = maxsplit_35167;
if ((0 < (s_35165 != null ? s_35165.length-1 : 0))) {
L2: do {
L3: while (true) {
if (!(last_35202 <= (s_35165 != null ? s_35165.length-1 : 0))) break L3;
var first_35206 = last_35202;
L4: do {
L5: while (true) {
if (!((last_35202 < (s_35165 != null ? s_35165.length-1 : 0)) && !(substreq_34262(s_35165, last_35202, sep_35166)))) break L5;
last_35202 += 1;
}
} while(false);
if ((splits_35204 == 0)) {
last_35202 = (s_35165 != null ? s_35165.length-1 : 0);
}

x_35171 = (s_35165.slice(first_35206, ((last_35202 - 1))+1).concat(0));
if (result_35169 != null) { result_35169.push(x_35171); } else { result_35169 = [x_35171]; };
if ((splits_35204 == 0)) {
break L2;
}

splits_35204 -= 1;
last_35202 += (sep_35166 != null ? sep_35166.length-1 : 0);
}
} while(false);
}

} while(false);
return result_35169;
}
function newgetmoduleword_53413(s_53415) {

var result_53416 = null;
var both_53417 = nsuSplitString(s_53415, makeNimstrLit("::"), -1);
result_53416 = {word: both_53417[1], module: newevalword_53041(both_53417[0]), m_type: NTI51149, tags: null};
return result_53416;
}
function newgetword_53408(s_53410) {

var result_53411 = null;
result_53411 = {word: s_53410, m_type: NTI51147, tags: null};
return result_53411;
}
function newseq_53455(len_53459) {

var result_53461 = null;
result_53461 = new Array(len_53459); for (var i=0;i<len_53459;++i) {result_53461[i]=null;}return result_53461;
}
function newkeyword_53439() {

var result_53441 = null;
result_53441 = {keys: newseq_53455(0), args: newseq_53493(0), m_type: NTI51158, tags: null};
return result_53441;
}
function addkey_55013(self_55015, key_55016) {

if (self_55015.keys != null) { self_55015.keys.push(key_55016); } else { self_55015.keys = [key_55016]; };
}
function newevalselfword_53398(s_53400) {

var result_53401 = null;
result_53401 = {word: s_53400, m_type: NTI51141, tags: null};
return result_53401;
}
function newevalouterword_53403(s_53405) {

var result_53406 = null;
result_53406 = {word: s_53405, m_type: NTI51143, tags: null};
return result_53406;
}
function newevalmoduleword_53392(s_53394) {

var result_53395 = null;
var both_53396 = nsuSplitString(s_53394, makeNimstrLit("::"), -1);
result_53395 = {word: both_53396[1], module: newevalword_53041(both_53396[0]), m_type: NTI51138, tags: null};
return result_53395;
}
function newword_55222(self_55224, token_55225) {

var Tmp1;
var Tmp2;
var Tmp3;
var result_55226 = null;
BeforeRet: do {
var len_55227 = (token_55225 != null ? token_55225.length-1 : 0);
var first_55228 = token_55225[0];
if (!(first_55228 == 58)) Tmp1 = false; else {Tmp1 = (1 < len_55227); }if (Tmp1) {
if ((token_55225[1] == 36)) {
if (((token_55225 != null ? token_55225.length-1 : 0) < 3)) {
raiseparseexception_52795(makeNimstrLit("Malformed get argword, missing at least 1 character"));
}

result_55226 = newgetargword_53434(HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(2, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}
else {
result_55226 = newevalargword_53429(HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(1, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}

}

if (!(first_55228 == 36)) Tmp2 = false; else {Tmp2 = (1 < len_55227); }if (Tmp2) {
if ((token_55225[1] == 64)) {
if ((2 < len_55227)) {
result_55226 = newgetselfword_53419(HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(2, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}
else {
raiseparseexception_52795(makeNimstrLit("Malformed self lookup word, missing at least 1 character"));
}

}
else {
if ((token_55225[1] == 46)) {
if ((2 < len_55227)) {
if ((token_55225[2] == 46)) {
if ((3 < len_55227)) {
result_55226 = newgetouterword_53424(HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(3, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}
else {
raiseparseexception_52795(makeNimstrLit("Malformed parent lookup word, missing at least 1 character"));
}

}
else {
raiseparseexception_52795(makeNimstrLit("Malformed parent lookup word, missing at least a ."));
}

}
else {
raiseparseexception_52795(makeNimstrLit("Malformed parent lookup word, missing at least 2 characters"));
}

}
else {
if (contains_37251(token_55225, makeNimstrLit("::"))) {
result_55226 = newgetmoduleword_53413(HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(1, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}
else {
result_55226 = newgetword_53408(HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(1, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}

}
}
}

if ((first_55228 == 39)) {
if ((len_55227 < 2)) {
raiseparseexception_52795(makeNimstrLit("Malformed literal word, missing at least 1 character"));
}
else {
result_55226 = neworgetlitword_53046(self_55224, HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(1, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}

}

if (!(1 < len_55227)) Tmp3 = false; else {Tmp3 = (token_55225[((token_55225 != null ? token_55225.length-1 : 0) - 1)] == 58); }if (Tmp3) {
if ((self_55224 === null)) {
result_55226 = newevalword_53041(token_55225);
break BeforeRet;
}
else {
if ((currentkeyword_55107(self_55224) === null)) {
push_55199(self_55224, newkeyword_53439());
}

if (inbalance_55027(currentkeyword_55107(self_55224))) {
addkey_55013(currentkeyword_55107(self_55224), token_55225);
}
else {
raiseparseexception_52795(makeNimstrLit("Malformed keyword syntax, expecting an argument"));
}

result_55226 = null;
break BeforeRet;
}

}

if ((first_55228 == 64)) {
if ((1 < len_55227)) {
result_55226 = newevalselfword_53398(HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(1, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}
else {
raiseparseexception_52795(makeNimstrLit("Malformed self eval word, missing at least 1 character"));
}

}
else {
if ((first_55228 == 46)) {
if ((1 < len_55227)) {
if ((token_55225[1] == 46)) {
if ((2 < len_55227)) {
result_55226 = newevalouterword_53403(HEX5BHEX5D_20244(token_55225, HEX2EHEX2E_36461(2, ((token_55225 != null ? token_55225.length-1 : 0) - 1))));
break BeforeRet;
}
else {
raiseparseexception_52795(makeNimstrLit("Malformed parent eval word, missing at least 1 character"));
}

}
else {
raiseparseexception_52795(makeNimstrLit("Malformed parent eval word, missing a ."));
}

}
else {
raiseparseexception_52795(makeNimstrLit("Malformed parent eval word, missing at least 2 characters"));
}

}
else {
if (contains_37251(token_55225, makeNimstrLit("::"))) {
result_55226 = newevalmoduleword_53392(token_55225);
break BeforeRet;
}
else {
result_55226 = newevalword_53041(token_55225);
break BeforeRet;
}

}
}
} while (false); 
return result_55226;
}
function newwordorvalue_55340(self_55342) {

var result_55343 = null;
BeforeRet: do {
var token_55344 = nimCopy(null, self_55342.token, NTI138);
self_55342.token = nimCopy(null, makeNimstrLit(""), NTI138);
self_55342.ws = nimCopy(null, makeNimstrLit(""), NTI138);
L1: do {
var p_55402 = null;
var HEX3Atmp_55414 = null;
HEX3Atmp_55414 = self_55342.valueparsers;
var i_55417 = 0;
var L_55419 = (HEX3Atmp_55414 != null ? HEX3Atmp_55414.length : 0);
L2: do {
L3: while (true) {
if (!(i_55417 < L_55419)) break L3;
p_55402 = HEX3Atmp_55414[i_55417];
var valueornil_55403 = parsevalue_54649(p_55402, token_55344);
if (!((valueornil_55403 === null))) {
result_55343 = valueornil_55403;
break BeforeRet;
}

i_55417 += 1;
}
} while(false);
} while(false);
result_55343 = newword_55222(self_55342, token_55344);
} while (false); 
return result_55343;
}
function addnode_55158(self_55160) {

if ((0 < (self_55160.token != null ? self_55160.token.length-1 : 0))) {
var node_55423 = newwordorvalue_55340(self_55160);
if (!((node_55423 === null))) {
doaddnode_55176(self_55160, node_55423);
}

}

}
function newparen_53563() {

var result_53565 = null;
result_53565 = {nodes: newseq_53493(0), m_type: NTI51191, tags: null};
return result_53565;
}
function newcurly_53601() {

var result_53603 = null;
result_53603 = {nodes: newseq_53493(0), m_type: NTI51193, tags: null};
return result_53603;
}
function pop_55116(self_55118) {

var result_55119 = null;
if (!((currentkeyword_55107(self_55118) === null))) {
closekeyword_55113(self_55118);
}

result_55119 = pop_55130(self_55118, "stack");
return result_55119;
}
function parse_55433(self_55435, str_55436) {

var Tmp3;
var Tmp7;
var Tmp10;
var result_55437 = null;
var ch_55438 = 0;
var currentvalueparser_55439 = null;
var pos_55440 = 0;
self_55435.stack = nimCopy(null, [], NTI55456);
self_55435.token = nimCopy(null, makeNimstrLit(""), NTI138);
self_55435.ws = nimCopy(null, makeNimstrLit(""), NTI138);
var blok_55457 = newblok_53525();
push_55199(self_55435, blok_55457);
L1: do {
L2: while (true) {
if (!(pos_55440 < (str_55436 != null ? str_55436.length-1 : 0))) break L2;
ch_55438 = str_55436[pos_55440];
pos_55440 += 1;
if (!self_55435.specialchardetected) Tmp3 = false; else {Tmp3 = (SetConstr(59, 92, 94, 38, 37, 124, 44, 126)[ch_55438] != undefined); }if (Tmp3) {
if (self_55435.token != null) { addChar(self_55435.token, ch_55438); } else { self_55435.token = [ch_55438, 0]; };
}
else {
if (self_55435.specialchardetected) {
addnode_55158(self_55435);
self_55435.specialchardetected = false;
}

if (!((currentvalueparser_55439 === null))) {
var found_55486 = tokenready_54684(currentvalueparser_55439, self_55435.token, ch_55438);
if (!((found_55486 === null))) {
self_55435.token = nimCopy(null, found_55486, NTI138);
addnode_55158(self_55435);
currentvalueparser_55439 = null;
}
else {
if (self_55435.token != null) { addChar(self_55435.token, ch_55438); } else { self_55435.token = [ch_55438, 0]; };
}

}
else {
if (((currentvalueparser_55439 === null) && (SetConstr(32, 9, 11, 13, 10, 12)[ch_55438] != undefined))) {
addnode_55158(self_55435);
if (self_55435.ws != null) { addChar(self_55435.ws, ch_55438); } else { self_55435.ws = [ch_55438, 0]; };
}
else {
var tokenlen_55506 = ((self_55435.token != null ? self_55435.token.length-1 : 0) + 1);
if (((currentvalueparser_55439 === null) && (tokenlen_55506 < 5))) {
L4: do {
var p_55524 = null;
var HEX3Atmp_55576 = null;
HEX3Atmp_55576 = self_55435.valueparsers;
var i_55579 = 0;
var L_55581 = (HEX3Atmp_55576 != null ? HEX3Atmp_55576.length : 0);
L5: do {
L6: while (true) {
if (!(i_55579 < L_55581)) break L6;
p_55524 = HEX3Atmp_55576[i_55579];
if (!(prefixlength_54673(p_55524) == tokenlen_55506)) Tmp7 = false; else {Tmp7 = tokenstart_54695(p_55524, self_55435.token, ch_55438); }if (Tmp7) {
currentvalueparser_55439 = p_55524;
break L4;
}

i_55579 += 1;
}
} while(false);
} while(false);
}

if ((currentvalueparser_55439 === null)) {
switch (ch_55438) {
case 35: addnode_55158(self_55435);
if (self_55435.ws != null) { addChar(self_55435.ws, 35); } else { self_55435.ws = [35, 0]; };
L8: do {
L9: while (true) {
if (!(pos_55440 < (str_55436 != null ? str_55436.length-1 : 0))) Tmp10 = false; else {Tmp10 = !((str_55436[pos_55440] == 10)); }if (!Tmp10) break L9;
if (self_55435.ws != null) { addChar(self_55435.ws, str_55436[pos_55440]); } else { self_55435.ws = [str_55436[pos_55440], 0]; };
pos_55440 += 1;
}
} while(false);

break;
case 40: var n_55542 = newparen_53563();
addnode_55158(self_55435);
push_55199(self_55435, n_55542);

break;
case 91: var n_55543 = newblok_53525();
addnode_55158(self_55435);
push_55199(self_55435, n_55543);

break;
case 123: var n_55544 = newcurly_53601();
addnode_55158(self_55435);
push_55199(self_55435, n_55544);

break;
case 41: addnode_55158(self_55435);
pop_55116(self_55435);

break;
case 93: addnode_55158(self_55435);
pop_55116(self_55435);

break;
case 125: addnode_55158(self_55435);
pop_55116(self_55435);

break;
default: 
if ((SetConstr(59, 92, 94, 38, 37, 124, 44, 126)[ch_55438] != undefined)) {
addnode_55158(self_55435);
self_55435.specialchardetected = true;
if (self_55435.token != null) { addChar(self_55435.token, ch_55438); } else { self_55435.token = [ch_55438, 0]; };
}
else {
if (self_55435.token != null) { addChar(self_55435.token, ch_55438); } else { self_55435.token = [ch_55438, 0]; };
}

break;
}
}
else {
if (self_55435.token != null) { addChar(self_55435.token, ch_55438); } else { self_55435.token = [ch_55438, 0]; };
}

}

}

}

}
} while(false);
addnode_55158(self_55435);
if (!((currentkeyword_55107(self_55435) === null))) {
closekeyword_55113(self_55435);
}

result_55437 = blok_55457.nodes[((blok_55457.nodes != null ? blok_55457.nodes.length : 0) - 1)];
return result_55437;
}
function len_58294(t_58300) {

var result_58301 = 0;
result_58301 = t_58300.counter;
return result_58301;
}
function HEX5BHEX5D_55778(self_55780, key_55781) {

var result_55782 = null;
result_55782 = self_55780.nodes[key_55781.value];
return result_55782;
}
function HEX5BHEX5D_55748(self_55750, key_55751) {

var Tmp1;
var result_55752 = null;
BeforeRet: do {
if (haskey_52222(self_55750.bindings, key_55751)) {
result_55752 = (Tmp1 = HEX5BHEX5D_52248(self_55750.bindings, key_55751), Tmp1[0][Tmp1[1]]).val;
break BeforeRet;
}

} while (false); 
return result_55752;
}
function HEX5BHEX5DHEX3D_55798(self_55800, key_55801, val_55802) {

self_55800.nodes[key_55801.value] = val_55802;
}
function HEX5BHEX5DHEX3D_55793(self_55795, key_55796, val_55797) {

makebinding_52605(self_55795, key_55796, val_55797);
}
function contains_53791(t_53797, key_53799) {

var result_53800 = false;
BeforeRet: do {
result_53800 = haskey_52222(t_53797, key_53799);
break BeforeRet;
} while (false); 
return result_53800;
}
function contains_53785(self_53787, n_53788) {

var result_53789 = false;
result_53789 = contains_53791(self_53787.bindings, n_53788);
return result_53789;
}
function newblok_53519(nodes_53522) {

var result_53523 = null;
result_53523 = {nodes: nodes_53522, m_type: NTI51195, pos: 0, tags: null};
return result_53523;
}
function HEX5BHEX5D_58406(s_58411, x_58414) {

var result_58416 = null;
var a_58417 = x_58414.a;
var L_58418 = ((x_58414.b - a_58417) + 1);
result_58416 = new Array(L_58418); for (var i=0;i<L_58418;++i) {result_58416[i]=null;}L1: do {
var i_58446 = 0;
var HEX3Atmp_58448 = 0;
HEX3Atmp_58448 = L_58418 - 1;
var res_58451 = 0;
L2: do {
L3: while (true) {
if (!(res_58451 <= HEX3Atmp_58448)) break L3;
i_58446 = res_58451;
result_58416[i_58446] = s_58411[(i_58446 + a_58417)];
res_58451 += 1;
}
} while(false);
} while(false);
return result_58416;
}
function newparen_53557(nodes_53560) {

var result_53561 = null;
result_53561 = {nodes: nodes_53560, m_type: NTI51191, tags: null};
return result_53561;
}
function newcurly_53595(nodes_53598) {

var result_53599 = null;
result_53599 = {nodes: nodes_53598, m_type: NTI51193, tags: null};
return result_53599;
}
function newactivation_55862(body_55864) {

var result_55865 = null;
result_55865 = {body: body_55864, m_type: NTI55643, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};
return result_55865;
}
function peek_56256(self_56258) {

var result_56259 = null;
BeforeRet: do {
if (atend_56239(self_56258)) {
result_56259 = null;
break BeforeRet;
}
else {
result_56259 = HEX5BHEX5D_55813(self_56258, self_56258.pos);
break BeforeRet;
}

} while (false); 
return result_56259;
}
function eval_56975(current_56977, spry_56978) {

var Tmp1;
var result_56979 = null;
BeforeRet: do {
current_56977.parent = spry_56978.currentactivation;
if (!(current_56977.self === null)) Tmp1 = false; else {Tmp1 = !((current_56977.parent === null)); }if (Tmp1) {
current_56977.self = current_56977.parent.self;
}

spry_56978.currentactivation = current_56977;
L2: do {
L3: while (true) {
if (!(current_56977.pos < len_55818(current_56977))) break L3;
var next_56997 = next_56243(current_56977);
if ((current_56977.pos == len_55818(current_56977))) {
current_56977.last = eval_55719(next_56997, spry_56978);
if (current_56977.returned) {
doreturn_56278(spry_56978.currentactivation, spry_56978);
result_56979 = current_56977.last;
break BeforeRet;
}

}
else {
var peek_56998 = peek_56256(current_56977);
if (ismethod_56729(peek_56998, spry_56978)) {
current_56977.last = next_56997;
next_56997 = next_56243(current_56977);
}

current_56977.last = eval_55719(next_56997, spry_56978);
if (current_56977.returned) {
doreturn_56278(spry_56978.currentactivation, spry_56978);
result_56979 = current_56977.last;
break BeforeRet;
}

}

}
} while(false);
if (isObj(current_56977.last.m_type, NTI51224)) {
current_56977.last = current_56977.last.val;
}

spry_56978.lastself = spry_56978.currentactivation.self;
spry_56978.currentactivation = spry_56978.currentactivation.parent;
result_56979 = current_56977.last;
break BeforeRet;
} while (false); 
return result_56979;
}
function reset_55896(self_55898) {

self_55898.returned = false;
self_55898.pos = 0;
}
function newfunk_55840(body_55842, parent_55843) {

var result_55844 = null;
result_55844 = {nodes: body_55842.nodes, parent: parent_55843, m_type: NTI55629, source: null, pos: 0, tags: null};
return result_55844;
}
function funk_55702(spry_55704, body_55705) {

var result_56717 = null;
result_56717 = newfunk_55840(body_55705, spry_55704.currentactivation);
return result_56717;
}
function newmeth_55846(body_55848, parent_55849) {

var result_55850 = null;
result_55850 = {nodes: body_55848.nodes, parent: parent_55849, m_type: NTI55633, source: null, pos: 0, tags: null};
return result_55850;
}
function meth_55706(spry_55708, body_55709) {

var result_56722 = null;
result_56722 = newmeth_55846(body_55709, spry_55708.currentactivation);
return result_56722;
}
function reify_56701(word_56703) {

var result_56704 = null;
result_56704 = newword_55222(null, word_56703.word);
return result_56704;
}
function addcore_58002(spry_58004) {

function HEX3Aanonymous_58005(spry_58007) {

var result_58008 = null;
result_58008 = spry_58007.root;
return result_58008;
}
function HEX3Aanonymous_58009(spry_58011) {

var result_58012 = null;
result_58012 = spry_58011.currentactivation;
return result_58012;
}
function HEX3Aanonymous_58013(spry_58015) {

var Tmp6;
var Tmp7;
var result_58016 = null;
BeforeRet: do {
L1: do {
var activation_58017 = null;
var HEX3Atmp_58027 = null;
HEX3Atmp_58027 = spry_58015.currentactivation;
var activation_58031 = HEX3Atmp_58027;
L2: do {
L3: while (true) {
if (!!((activation_58031 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(!(isObj(activation_58031.m_type, NTI55648)))) break L5;
if (isObj(activation_58031.m_type, NTI55646)) {
Tmp6 = activation_58031.body.parent;
}
else {
Tmp6 = activation_58031.parent;
}

activation_58031 = Tmp6;
}
} while(false);
activation_58017 = activation_58031;
if ((activation_58017.locals === null)) {
activation_58017.locals = newmap_52812();
}

result_58016 = activation_58017.locals;
break BeforeRet;
if (isObj(activation_58031.m_type, NTI55646)) {
Tmp7 = activation_58031.body.parent;
}
else {
Tmp7 = activation_58031.parent;
}

activation_58031 = Tmp7;
}
} while(false);
} while(false);
} while (false); 
return result_58016;
}
function HEX3Aanonymous_58035(spry_58037) {

var result_58038 = null;
var act_58039 = argparent_56427(spry_58037);
if (!((act_58039 === null))) {
result_58038 = act_58039.last;
if ((result_58038 === null)) {
spry_58037.currentactivation.self = spry_58037.nilval;
result_58038 = spry_58037.nilval;
}

}

return result_58038;
}
function HEX3Aanonymous_58057(spry_58059) {

var result_58060 = null;
result_58060 = self_56663(spry_58059);
return result_58060;
}
function HEX3Aanonymous_58061(spry_58063) {

var result_58064 = null;
result_58064 = spry_58063.lastself;
if ((result_58064 === null)) {
result_58064 = spry_58063.nilval;
}

return result_58064;
}
function HEX3Aanonymous_58073(spry_58075) {

var result_58076 = null;
result_58076 = evalarginfix_56659(spry_58075);
var tag_58077 = evalarg_56687(spry_58075);
if ((result_58076.tags === null)) {
result_58076.tags = newblok_53525();
}

if (isObj(tag_58077.m_type, NTI51134)) {
add_53663(result_58076.tags, tag_58077);
}
else {
add_53663(result_58076.tags, litify_57100(spry_58075, tag_58077));
}

return result_58076;
}
function HEX3Aanonymous_58088(spry_58090) {

var result_58091 = null;
BeforeRet: do {
var node_58092 = evalarginfix_56659(spry_58090);
var tag_58093 = evalarg_56687(spry_58090);
if ((node_58092.tags === null)) {
result_58091 = spry_58090.falseval;
break BeforeRet;
}

if (isObj(tag_58093.m_type, NTI51134)) {
result_58091 = boolval_56696(contains_53738(node_58092.tags, tag_58093), spry_58090);
break BeforeRet;
}
else {
result_58091 = boolval_56696(contains_53738(node_58092.tags, litify_57100(spry_58090, tag_58093)), spry_58090);
break BeforeRet;
}

} while (false); 
return result_58091;
}
function HEX3Aanonymous_58104(spry_58106) {

var result_58107 = null;
BeforeRet: do {
var node_58108 = evalarginfix_56659(spry_58106);
if ((node_58108.tags === null)) {
result_58107 = spry_58106.emptyblok;
break BeforeRet;
}

result_58107 = node_58108.tags;
break BeforeRet;
} while (false); 
return result_58107;
}
function HEX3Aanonymous_58117(spry_58119) {

var result_58120 = null;
result_58120 = evalarginfix_56659(spry_58119);
result_58120.tags = evalarg_56687(spry_58119);
return result_58120;
}
function HEX3Aanonymous_58121(spry_58123) {

var result_58124 = null;
result_58124 = evalarg_56687(spry_58123);
assign_56646(spry_58123, arginfix_56651(spry_58123), result_58124);
return result_58124;
}
function HEX3Aanonymous_58125(spry_58127) {

var result_58128 = null;
result_58128 = evalarg_56687(spry_58127);
assign_56646(spry_58127, evalarginfix_56659(spry_58127), result_58128);
return result_58128;
}
function HEX3Aanonymous_58129(spry_58131) {

var result_58132 = null;
BeforeRet: do {
var binding_58133 = lookup_56332(spry_58131, arginfix_56651(spry_58131));
if ((binding_58133 === null)) {
result_58132 = spry_58131.falseval;
break BeforeRet;
}

result_58132 = spry_58131.trueval;
break BeforeRet;
} while (false); 
return result_58132;
}
function HEX3Aanonymous_58142(spry_58144) {

var result_58145 = null;
result_58145 = newvalue_53648(!(isObj(evalarginfix_56659(spry_58144).m_type, NTI51181)));
return result_58145;
}
function HEX3Aanonymous_58148(spry_58150) {

var result_58151 = null;
result_58151 = HEX2B_55956(evalarginfix_56659(spry_58150), evalarg_56687(spry_58150));
return result_58151;
}
function HEX3Aanonymous_58152(spry_58154) {

var result_58155 = null;
result_58155 = HEX2D_55988(evalarginfix_56659(spry_58154), evalarg_56687(spry_58154));
return result_58155;
}
function HEX3Aanonymous_58156(spry_58158) {

var result_58159 = null;
result_58159 = HEX2A_56020(evalarginfix_56659(spry_58158), evalarg_56687(spry_58158));
return result_58159;
}
function HEX3Aanonymous_58160(spry_58162) {

var result_58163 = null;
result_58163 = HEX2F_56052(evalarginfix_56659(spry_58162), evalarg_56687(spry_58162));
return result_58163;
}
function HEX3Aanonymous_58164(spry_58166) {

var result_58167 = null;
result_58167 = HEX3C_56084(evalarginfix_56659(spry_58166), evalarg_56687(spry_58166));
return result_58167;
}
function HEX3Aanonymous_58168(spry_58170) {

var result_58171 = null;
result_58171 = HEX3C_56084(evalarg_56687(spry_58170), evalarginfix_56659(spry_58170));
return result_58171;
}
function HEX3Aanonymous_58172(spry_58174) {

var result_58175 = null;
result_58175 = HEX3CHEX3D_56121(evalarginfix_56659(spry_58174), evalarg_56687(spry_58174));
return result_58175;
}
function HEX3Aanonymous_58176(spry_58178) {

var result_58179 = null;
result_58179 = HEX3CHEX3D_56121(evalarg_56687(spry_58178), evalarginfix_56659(spry_58178));
return result_58179;
}
function HEX3Aanonymous_58180(spry_58182) {

var result_58183 = null;
result_58183 = eq_56158(evalarginfix_56659(spry_58182), evalarg_56687(spry_58182));
return result_58183;
}
function HEX3Aanonymous_58184(spry_58186) {

var result_58187 = null;
result_58187 = newvalue_53648((evalarginfix_56659(spry_58186) == evalarg_56687(spry_58186)));
return result_58187;
}
function HEX3Aanonymous_58199(spry_58201) {

var result_58202 = null;
result_58202 = newvalue_53648(!(value_51945(eq_56158(evalarginfix_56659(spry_58201), evalarg_56687(spry_58201)))));
return result_58202;
}
function HEX3Aanonymous_58203(spry_58205) {

var result_58206 = null;
result_58206 = newvalue_53648(!((evalarginfix_56659(spry_58205) == evalarg_56687(spry_58205))));
return result_58206;
}
function HEX3Aanonymous_58218(spry_58220) {

var result_58221 = null;
result_58221 = newvalue_53648(!(value_51945(evalarginfix_56659(spry_58220))));
return result_58221;
}
function HEX3Aanonymous_58222(spry_58224) {

var Tmp1;
var result_58225 = null;
var arg1_58226 = value_51945(evalarginfix_56659(spry_58224));
var arg2_58227 = arg_56655(spry_58224);
if (!arg1_58226) Tmp1 = false; else {Tmp1 = value_51945(eval_55719(arg2_58227, spry_58224)); }result_58225 = newvalue_53648(Tmp1);
return result_58225;
}
function HEX3Aanonymous_58228(spry_58230) {

var Tmp1;
var result_58231 = null;
var arg1_58232 = value_51945(evalarginfix_56659(spry_58230));
var arg2_58233 = arg_56655(spry_58230);
if (arg1_58232) Tmp1 = true; else {Tmp1 = value_51945(eval_55719(arg2_58233, spry_58230)); }result_58231 = newvalue_53648(Tmp1);
return result_58231;
}
function HEX3Aanonymous_58234(spry_58236) {

var result_58237 = null;
BeforeRet: do {
var val_58238 = evalarginfix_56659(spry_58236);
if (isObj(val_58238.m_type, NTI51172)) {
result_58237 = HEX26_56214(val_58238, evalarg_56687(spry_58236));
break BeforeRet;
}
else {
if (isObj(val_58238.m_type, NTI51195)) {
result_58237 = concat_53819(val_58238, evalarg_56687(spry_58236).nodes);
break BeforeRet;
}
else {
if (isObj(val_58238.m_type, NTI51191)) {
result_58237 = concat_53819(val_58238, evalarg_56687(spry_58236).nodes);
break BeforeRet;
}
else {
if (isObj(val_58238.m_type, NTI51193)) {
result_58237 = concat_53819(val_58238, evalarg_56687(spry_58236).nodes);
break BeforeRet;
}
}}}
} while (false); 
return result_58237;
}
function HEX3Aanonymous_58247(spry_58249) {

var result_58250 = null;
result_58250 = newvalue_53643(print_52136(evalarginfix_56659(spry_58249)));
return result_58250;
}
function HEX3Aanonymous_58251(spry_58253) {

var result_58254 = null;
BeforeRet: do {
var val_58255 = evalarginfix_56659(spry_58253);
if (isObj(val_58255.m_type, NTI51169)) {
result_58254 = val_58255;
break BeforeRet;
}
else {
if (isObj(val_58255.m_type, NTI51166)) {
result_58254 = newvalue_53638(val_58255.value);
break BeforeRet;
}
else {
raiseruntimeexception_51330(makeNimstrLit("Can not convert to float"));
}
}
} while (false); 
return result_58254;
}
function HEX3Aanonymous_58260(spry_58262) {

var result_58263 = null;
BeforeRet: do {
var val_58264 = evalarginfix_56659(spry_58262);
if (isObj(val_58264.m_type, NTI51166)) {
result_58263 = val_58264;
break BeforeRet;
}
else {
if (isObj(val_58264.m_type, NTI51169)) {
result_58263 = newvalue_53633(Math.floor(val_58264.value));
break BeforeRet;
}
else {
raiseruntimeexception_51330(makeNimstrLit("Can not convert to int"));
}
}
} while (false); 
return result_58263;
}
function HEX3Aanonymous_58269(spry_58271) {

var result_58272 = null;
result_58272 = newvalue_53643(HEX24_51604(evalarg_56687(spry_58271)));
return result_58272;
}
function HEX3Aanonymous_58273(spry_58275) {

var result_58276 = null;
result_58276 = parse_55433(spry_58275.parser, evalarg_56687(spry_58275).value);
return result_58276;
}
function HEX3Aanonymous_58277(spry_58279) {

var result_58280 = null;
BeforeRet: do {
var comp_58281 = evalarginfix_56659(spry_58279);
if (isObj(comp_58281.m_type, NTI51172)) {
result_58280 = newvalue_53633((comp_58281.value != null ? comp_58281.value.length-1 : 0));
}
else {
if (isObj(comp_58281.m_type, NTI51187)) {
result_58280 = newvalue_53633((evalarginfix_56659(spry_58279).nodes != null ? evalarginfix_56659(spry_58279).nodes.length : 0));
break BeforeRet;
}
else {
if (isObj(comp_58281.m_type, NTI51198)) {
result_58280 = newvalue_53633(len_58294(evalarginfix_56659(spry_58279).bindings));
break BeforeRet;
}
}}
} while (false); 
return result_58280;
}
function HEX3Aanonymous_58305(spry_58307) {

var result_58308 = null;
BeforeRet: do {
var comp_58309 = evalarginfix_56659(spry_58307);
if (isObj(comp_58309.m_type, NTI51187)) {
result_58308 = HEX5BHEX5D_55778(comp_58309, evalarg_56687(spry_58307));
break BeforeRet;
}
else {
if (isObj(comp_58309.m_type, NTI51198)) {
var hit_58312 = HEX5BHEX5D_55748(comp_58309, evalarg_56687(spry_58307));
if ((hit_58312 === null)) {
result_58308 = spry_58307.undefval;
break BeforeRet;
}
else {
result_58308 = hit_58312;
break BeforeRet;
}

}
}
} while (false); 
return result_58308;
}
function HEX3Aanonymous_58323(spry_58325) {

var result_58326 = null;
BeforeRet: do {
var comp_58327 = evalarginfix_56659(spry_58325);
var key_58328 = evalarg_56687(spry_58325);
var val_58329 = evalarg_56687(spry_58325);
if (isObj(comp_58327.m_type, NTI51187)) {
HEX5BHEX5DHEX3D_55798(comp_58327, key_58328, val_58329);
}
else {
if (isObj(comp_58327.m_type, NTI51198)) {
HEX5BHEX5DHEX3D_55793(comp_58327, key_58328, val_58329);
}
}
result_58326 = comp_58327;
break BeforeRet;
} while (false); 
return result_58326;
}
function HEX3Aanonymous_58334(spry_58336) {

var Tmp1;
var result_58337 = null;
var comp_58338 = evalarginfix_56659(spry_58336);
var word_58339 = arg_56655(spry_58336);
var hit_58340 = HEX5BHEX5D_55748(comp_58338, word_58339);
if ((hit_58340 === null)) {
Tmp1 = spry_58336.undefval;
}
else {
Tmp1 = hit_58340;
}

result_58337 = Tmp1;
return result_58337;
}
function HEX3Aanonymous_58349(spry_58351) {

var result_58352 = null;
BeforeRet: do {
var comp_58353 = evalarginfix_56659(spry_58351);
var word_58354 = arg_56655(spry_58351);
var val_58355 = evalarg_56687(spry_58351);
HEX5BHEX5DHEX3D_55793(comp_58353, word_58354, val_58355);
result_58352 = comp_58353;
break BeforeRet;
} while (false); 
return result_58352;
}
function HEX3Aanonymous_58356(spry_58358) {

var result_58359 = null;
BeforeRet: do {
var comp_58360 = evalarginfix_56659(spry_58358);
var key_58361 = evalarg_56687(spry_58358);
if (isObj(comp_58360.m_type, NTI51187)) {
result_58359 = newvalue_53648(contains_53738(comp_58360, key_58361));
break BeforeRet;
}
else {
if (isObj(comp_58360.m_type, NTI51198)) {
result_58359 = newvalue_53648(contains_53785(comp_58360, key_58361));
break BeforeRet;
}
}
result_58359 = comp_58360;
break BeforeRet;
} while (false); 
return result_58359;
}
function HEX3Aanonymous_58366(spry_58368) {

var result_58369 = null;
result_58369 = evalarginfix_56659(spry_58368);
var comp_58370 = result_58369;
add_53663(comp_58370, evalarg_56687(spry_58368));
return result_58369;
}
function HEX3Aanonymous_58371(spry_58373) {

var result_58374 = null;
result_58374 = evalarginfix_56659(spry_58373);
var comp_58375 = result_58374;
removelast_54074(comp_58375);
return result_58374;
}
function HEX3Aanonymous_58376(spry_58378) {

var result_58379 = null;
var comp_58380 = evalarginfix_56659(spry_58378);
var frm_58381 = evalarg_56687(spry_58378).value;
var to_58382 = evalarg_56687(spry_58378).value;
if (isObj(comp_58380.m_type, NTI51172)) {
result_58379 = newvalue_53643(HEX5BHEX5D_20244(comp_58380.value, HEX2EHEX2E_36461(frm_58381, to_58382)));
}
else {
if (isObj(comp_58380.m_type, NTI51195)) {
result_58379 = newblok_53519(HEX5BHEX5D_58406(comp_58380.nodes, HEX2EHEX2E_36461(frm_58381, to_58382)));
}
else {
if (isObj(comp_58380.m_type, NTI51191)) {
result_58379 = newparen_53557(HEX5BHEX5D_58406(comp_58380.nodes, HEX2EHEX2E_36461(frm_58381, to_58382)));
}
else {
if (isObj(comp_58380.m_type, NTI51193)) {
result_58379 = newcurly_53595(HEX5BHEX5D_58406(comp_58380.nodes, HEX2EHEX2E_36461(frm_58381, to_58382)));
}
}}}
if (!((comp_58380.tags === null))) {
result_58379.tags = comp_58380.tags;
}

return result_58379;
}
function HEX3Aanonymous_58514(spry_58516) {

var result_58517 = null;
BeforeRet: do {
var blk1_58518 = evalarginfix_56659(spry_58516);
var blk2_58519 = evalarg_56687(spry_58516);
var current_58520 = spry_58516.currentactivation;
var orig_58521 = current_58520.body.nodes[0];
var oldpos_58522 = current_58520.pos;
current_58520.pos = 0;
var activation_58523 = newactivation_55862(blk2_58519);
L1: do {
var each_58532 = null;
var HEX3Atmp_58534 = null;
HEX3Atmp_58534 = blk1_58518.nodes;
var i_58537 = 0;
var L_58539 = (HEX3Atmp_58534 != null ? HEX3Atmp_58534.length : 0);
L2: do {
L3: while (true) {
if (!(i_58537 < L_58539)) break L3;
each_58532 = HEX3Atmp_58534[i_58537];
current_58520.body.nodes[0] = each_58532;
result_58517 = eval_56975(activation_58523, spry_58516);
reset_55896(activation_58523);
if (current_58520.returned) {
current_58520.body.nodes[0] = orig_58521;
current_58520.pos = oldpos_58522;
break BeforeRet;
}

current_58520.pos = 0;
i_58537 += 1;
}
} while(false);
} while(false);
current_58520.body.nodes[0] = orig_58521;
current_58520.pos = oldpos_58522;
result_58517 = blk1_58518;
break BeforeRet;
} while (false); 
return result_58517;
}
function HEX3Aanonymous_58540(spry_58542) {

var result_58543 = null;
exit(evalarg_56687(spry_58542).value);
return result_58543;
}
function HEX3Aanonymous_58544(spry_58546) {

var result_58547 = null;
result_58547 = funk_55702(spry_58546, evalarg_56687(spry_58546));
return result_58547;
}
function HEX3Aanonymous_58548(spry_58550) {

var result_58551 = null;
result_58551 = meth_55706(spry_58550, evalarg_56687(spry_58550));
return result_58551;
}
function HEX3Aanonymous_58552(spry_58554) {

var result_58555 = null;
result_58555 = evaldo_55726(evalarg_56687(spry_58554), spry_58554);
return result_58555;
}
function HEX3Aanonymous_58556(spry_58558) {

var result_58559 = null;
result_58559 = arg_56655(spry_58558);
return result_58559;
}
function HEX3Aanonymous_58560(spry_58562) {

var result_58563 = null;
result_58563 = evalarg_56687(spry_58562);
return result_58563;
}
function HEX3Aanonymous_58564(spry_58566) {

var result_58567 = null;
result_58567 = eval_55719(evalarg_56687(spry_58566), spry_58566);
return result_58567;
}
function HEX3Aanonymous_58568(spry_58570) {

var result_58571 = null;
result_58571 = reify_56701(evalarg_56687(spry_58570));
return result_58571;
}
function HEX3Aanonymous_58572(spry_58574) {

var result_58575 = null;
result_58575 = litify_57100(spry_58574, evalarg_56687(spry_58574));
return result_58575;
}
function HEX3Aanonymous_58576(spry_58578) {

var result_58579 = null;
result_58579 = neworgetlitword_53046(spry_58578.parser, HEX24_51604(arg_56655(spry_58578)));
return result_58579;
}
function HEX3Aanonymous_58580(spry_58582) {

var result_58583 = null;
result_58583 = neworgetlitword_53046(spry_58582.parser, evalarg_56687(spry_58582).value);
return result_58583;
}
function HEX3Aanonymous_58584(spry_58586) {

var result_58587 = null;
result_58587 = newword_55222(null, evalarg_56687(spry_58586).value);
return result_58587;
}
function HEX3Aanonymous_58588(spry_58590) {

var result_58591 = null;
result_58591 = clone_54615(evalarginfix_56659(spry_58590));
return result_58591;
}
function HEX3Aanonymous_58592(spry_58594) {

var result_58595 = null;
result_58595 = evalarg_56687(spry_58594);
spry_58594.currentactivation.returned = true;
return result_58595;
}
function HEX3Aanonymous_58596(spry_58598) {

var result_58599 = null;
BeforeRet: do {
if (value_51945(evalarginfix_56659(spry_58598))) {
result_58599 = evaldo_55726(evalarg_56687(spry_58598), spry_58598);
break BeforeRet;
}
else {
arg_56655(spry_58598);
result_58599 = spry_58598.nilval;
break BeforeRet;
}

} while (false); 
return result_58599;
}
function HEX3Aanonymous_58600(spry_58602) {

var result_58603 = null;
BeforeRet: do {
if (value_51945(evalarginfix_56659(spry_58602))) {
arg_56655(spry_58602);
result_58603 = spry_58602.nilval;
break BeforeRet;
}
else {
result_58603 = evaldo_55726(evalarg_56687(spry_58602), spry_58602);
break BeforeRet;
}

} while (false); 
return result_58603;
}
function HEX3Aanonymous_58604(spry_58606) {

var result_58607 = null;
BeforeRet: do {
if (value_51945(evalarginfix_56659(spry_58606))) {
var res_58608 = evaldo_55726(evalarg_56687(spry_58606), spry_58606);
arg_56655(spry_58606);
result_58607 = res_58608;
break BeforeRet;
}
else {
arg_56655(spry_58606);
result_58607 = evaldo_55726(evalarg_56687(spry_58606), spry_58606);
break BeforeRet;
}

} while (false); 
return result_58607;
}
function HEX3Aanonymous_58609(spry_58611) {

var result_58612 = null;
BeforeRet: do {
if (value_51945(evalarginfix_56659(spry_58611))) {
arg_56655(spry_58611);
result_58612 = evaldo_55726(evalarg_56687(spry_58611), spry_58611);
break BeforeRet;
}
else {
var res_58613 = evaldo_55726(evalarg_56687(spry_58611), spry_58611);
arg_56655(spry_58611);
result_58612 = res_58613;
break BeforeRet;
}

} while (false); 
return result_58612;
}
function HEX3Aanonymous_58614(spry_58616) {

var result_58617 = null;
BeforeRet: do {
var times_58618 = evalarginfix_56659(spry_58616).value;
var fn_58619 = evalarg_56687(spry_58616);
L1: do {
var i_58629 = 0;
var res_58633 = 1;
L2: do {
L3: while (true) {
if (!(res_58633 <= times_58618)) break L3;
i_58629 = res_58633;
result_58617 = evaldo_55726(fn_58619, spry_58616);
if (spry_58616.currentactivation.returned) {
break BeforeRet;
}

res_58633 += 1;
}
} while(false);
} while(false);
} while (false); 
return result_58617;
}
function HEX3Aanonymous_58637(spry_58639) {

var result_58640 = null;
BeforeRet: do {
var self_58641 = evalarginfix_56659(spry_58639);
var frm_58642 = self_58641.value;
var to_58643 = evalarg_56687(spry_58639).value;
var fn_58644 = evalarg_56687(spry_58639);
var current_58645 = spry_58639.currentactivation;
var orig_58646 = current_58645.body.nodes[0];
var oldpos_58647 = current_58645.pos;
current_58645.pos = 0;
var activation_58648 = newactivation_55862(fn_58644);
L1: do {
var i_58658 = 0;
var res_58662 = frm_58642;
L2: do {
L3: while (true) {
if (!(res_58662 <= to_58643)) break L3;
i_58658 = res_58662;
current_58645.body.nodes[0] = newvalue_53633(i_58658);
result_58640 = eval_56975(activation_58648, spry_58639);
reset_55896(activation_58648);
current_58645.pos = 0;
if (current_58645.returned) {
current_58645.body.nodes[0] = orig_58646;
current_58645.pos = oldpos_58647;
break BeforeRet;
}

res_58662 += 1;
}
} while(false);
} while(false);
current_58645.body.nodes[0] = orig_58646;
current_58645.pos = oldpos_58647;
result_58640 = self_58641;
break BeforeRet;
} while (false); 
return result_58640;
}
function HEX3Aanonymous_58666(spry_58668) {

var result_58669 = null;
BeforeRet: do {
var blk1_58670 = evalarginfix_56659(spry_58668);
var blk2_58671 = evalarg_56687(spry_58668);
result_58669 = evaldo_55726(blk1_58670, spry_58668);
if (spry_58668.currentactivation.returned) {
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!value_51945(result_58669)) break L2;
result_58669 = evaldo_55726(blk2_58671, spry_58668);
if (spry_58668.currentactivation.returned) {
break BeforeRet;
}

result_58669 = evaldo_55726(blk1_58670, spry_58668);
if (spry_58668.currentactivation.returned) {
break BeforeRet;
}

}
} while(false);
} while (false); 
return result_58669;
}
function HEX3Aanonymous_58673(spry_58675) {

var result_58676 = null;
BeforeRet: do {
var blk1_58677 = evalarginfix_56659(spry_58675);
var blk2_58678 = evalarg_56687(spry_58675);
result_58676 = evaldo_55726(blk1_58677, spry_58675);
if (spry_58675.currentactivation.returned) {
break BeforeRet;
}

L1: do {
L2: while (true) {
if (!!(value_51945(result_58676))) break L2;
result_58676 = evaldo_55726(blk2_58678, spry_58675);
if (spry_58675.currentactivation.returned) {
break BeforeRet;
}

result_58676 = evaldo_55726(blk1_58677, spry_58675);
if (spry_58675.currentactivation.returned) {
break BeforeRet;
}

}
} while(false);
} while (false); 
return result_58676;
}
makeword_56691(spry_58004, makeNimstrLit("root"), newprimfunc_55830(HEX3Aanonymous_58005));
makeword_56691(spry_58004, makeNimstrLit("activation"), newprimfunc_55830(HEX3Aanonymous_58009));
makeword_56691(spry_58004, makeNimstrLit("locals"), newprimfunc_55830(HEX3Aanonymous_58013));
makeword_56691(spry_58004, makeNimstrLit("node"), newprimfunc_55830(HEX3Aanonymous_58035));
makeword_56691(spry_58004, makeNimstrLit("self"), newprimfunc_55830(HEX3Aanonymous_58057));
makeword_56691(spry_58004, makeNimstrLit(";"), newprimfunc_55830(HEX3Aanonymous_58061));
makeword_56691(spry_58004, makeNimstrLit("tag:"), newprimmeth_55835(HEX3Aanonymous_58073));
makeword_56691(spry_58004, makeNimstrLit("tag?"), newprimmeth_55835(HEX3Aanonymous_58088));
makeword_56691(spry_58004, makeNimstrLit("tags"), newprimmeth_55835(HEX3Aanonymous_58104));
makeword_56691(spry_58004, makeNimstrLit("tags:"), newprimmeth_55835(HEX3Aanonymous_58117));
makeword_56691(spry_58004, makeNimstrLit("="), newprimmeth_55835(HEX3Aanonymous_58121));
makeword_56691(spry_58004, makeNimstrLit("set:"), newprimmeth_55835(HEX3Aanonymous_58125));
makeword_56691(spry_58004, makeNimstrLit("?"), newprimmeth_55835(HEX3Aanonymous_58129));
makeword_56691(spry_58004, makeNimstrLit("set?"), newprimmeth_55835(HEX3Aanonymous_58142));
makeword_56691(spry_58004, makeNimstrLit("+"), newprimmeth_55835(HEX3Aanonymous_58148));
makeword_56691(spry_58004, makeNimstrLit("-"), newprimmeth_55835(HEX3Aanonymous_58152));
makeword_56691(spry_58004, makeNimstrLit("*"), newprimmeth_55835(HEX3Aanonymous_58156));
makeword_56691(spry_58004, makeNimstrLit("/"), newprimmeth_55835(HEX3Aanonymous_58160));
makeword_56691(spry_58004, makeNimstrLit("<"), newprimmeth_55835(HEX3Aanonymous_58164));
makeword_56691(spry_58004, makeNimstrLit(">"), newprimmeth_55835(HEX3Aanonymous_58168));
makeword_56691(spry_58004, makeNimstrLit("<="), newprimmeth_55835(HEX3Aanonymous_58172));
makeword_56691(spry_58004, makeNimstrLit(">="), newprimmeth_55835(HEX3Aanonymous_58176));
makeword_56691(spry_58004, makeNimstrLit("=="), newprimmeth_55835(HEX3Aanonymous_58180));
makeword_56691(spry_58004, makeNimstrLit("==="), newprimmeth_55835(HEX3Aanonymous_58184));
makeword_56691(spry_58004, makeNimstrLit("!="), newprimmeth_55835(HEX3Aanonymous_58199));
makeword_56691(spry_58004, makeNimstrLit("!=="), newprimmeth_55835(HEX3Aanonymous_58203));
makeword_56691(spry_58004, makeNimstrLit("not"), newprimmeth_55835(HEX3Aanonymous_58218));
makeword_56691(spry_58004, makeNimstrLit("and"), newprimmeth_55835(HEX3Aanonymous_58222));
makeword_56691(spry_58004, makeNimstrLit("or"), newprimmeth_55835(HEX3Aanonymous_58228));
makeword_56691(spry_58004, makeNimstrLit(","), newprimmeth_55835(HEX3Aanonymous_58234));
makeword_56691(spry_58004, makeNimstrLit("print"), newprimmeth_55835(HEX3Aanonymous_58247));
makeword_56691(spry_58004, makeNimstrLit("asFloat"), newprimmeth_55835(HEX3Aanonymous_58251));
makeword_56691(spry_58004, makeNimstrLit("asInt"), newprimmeth_55835(HEX3Aanonymous_58260));
makeword_56691(spry_58004, makeNimstrLit("serialize"), newprimfunc_55830(HEX3Aanonymous_58269));
makeword_56691(spry_58004, makeNimstrLit("parse"), newprimfunc_55830(HEX3Aanonymous_58273));
makeword_56691(spry_58004, makeNimstrLit("size"), newprimmeth_55835(HEX3Aanonymous_58277));
makeword_56691(spry_58004, makeNimstrLit("at:"), newprimmeth_55835(HEX3Aanonymous_58305));
makeword_56691(spry_58004, makeNimstrLit("at:put:"), newprimmeth_55835(HEX3Aanonymous_58323));
makeword_56691(spry_58004, makeNimstrLit("get:"), newprimmeth_55835(HEX3Aanonymous_58334));
makeword_56691(spry_58004, makeNimstrLit("set:to:"), newprimmeth_55835(HEX3Aanonymous_58349));
makeword_56691(spry_58004, makeNimstrLit("contains:"), newprimmeth_55835(HEX3Aanonymous_58356));
makeword_56691(spry_58004, makeNimstrLit("add:"), newprimmeth_55835(HEX3Aanonymous_58366));
makeword_56691(spry_58004, makeNimstrLit("removeLast"), newprimmeth_55835(HEX3Aanonymous_58371));
makeword_56691(spry_58004, makeNimstrLit("copyFrom:to:"), newprimmeth_55835(HEX3Aanonymous_58376));
makeword_56691(spry_58004, makeNimstrLit("do:"), newprimmeth_55835(HEX3Aanonymous_58514));
makeword_56691(spry_58004, makeNimstrLit("quit"), newprimfunc_55830(HEX3Aanonymous_58540));
makeword_56691(spry_58004, makeNimstrLit("func"), newprimfunc_55830(HEX3Aanonymous_58544));
makeword_56691(spry_58004, makeNimstrLit("method"), newprimfunc_55830(HEX3Aanonymous_58548));
makeword_56691(spry_58004, makeNimstrLit("do"), newprimfunc_55830(HEX3Aanonymous_58552));
makeword_56691(spry_58004, makeNimstrLit("$"), newprimfunc_55830(HEX3Aanonymous_58556));
makeword_56691(spry_58004, makeNimstrLit("eva"), newprimfunc_55830(HEX3Aanonymous_58560));
makeword_56691(spry_58004, makeNimstrLit("eval"), newprimfunc_55830(HEX3Aanonymous_58564));
makeword_56691(spry_58004, makeNimstrLit("reify"), newprimfunc_55830(HEX3Aanonymous_58568));
makeword_56691(spry_58004, makeNimstrLit("litify"), newprimfunc_55830(HEX3Aanonymous_58572));
makeword_56691(spry_58004, makeNimstrLit("quote"), newprimfunc_55830(HEX3Aanonymous_58576));
makeword_56691(spry_58004, makeNimstrLit("litword"), newprimfunc_55830(HEX3Aanonymous_58580));
makeword_56691(spry_58004, makeNimstrLit("word"), newprimfunc_55830(HEX3Aanonymous_58584));
makeword_56691(spry_58004, makeNimstrLit("clone"), newprimmeth_55835(HEX3Aanonymous_58588));
makeword_56691(spry_58004, makeNimstrLit("^"), newprimfunc_55830(HEX3Aanonymous_58592));
makeword_56691(spry_58004, makeNimstrLit("then:"), newprimmeth_55835(HEX3Aanonymous_58596));
makeword_56691(spry_58004, makeNimstrLit("else:"), newprimmeth_55835(HEX3Aanonymous_58600));
makeword_56691(spry_58004, makeNimstrLit("then:else:"), newprimmeth_55835(HEX3Aanonymous_58604));
makeword_56691(spry_58004, makeNimstrLit("else:then:"), newprimmeth_55835(HEX3Aanonymous_58609));
makeword_56691(spry_58004, makeNimstrLit("repeat:"), newprimmeth_55835(HEX3Aanonymous_58614));
makeword_56691(spry_58004, makeNimstrLit("to:do:"), newprimmeth_55835(HEX3Aanonymous_58637));
makeword_56691(spry_58004, makeNimstrLit("whileTrue:"), newprimmeth_55835(HEX3Aanonymous_58666));
makeword_56691(spry_58004, makeNimstrLit("whileFalse:"), newprimmeth_55835(HEX3Aanonymous_58673));
}
addcore_58002(spry_75001[0]);
function evalreduce_59083(self_59085, spry_59086) {

var Tmp1;
var result_59087 = null;
BeforeRet: do {
var collect_59116 = newseq_53493(0);
var current_59117 = newactivation_55862(self_59085);
current_59117.parent = spry_59086.currentactivation;
if (!(current_59117.self === null)) Tmp1 = false; else {Tmp1 = !((current_59117.parent === null)); }if (Tmp1) {
current_59117.self = current_59117.parent.self;
}

spry_59086.currentactivation = current_59117;
L2: do {
L3: while (true) {
if (!!(atend_56239(current_59117))) break L3;
var next_59135 = next_56243(current_59117);
if (caneval_56768(next_59135, spry_59086)) {
current_59117.last = eval_55719(next_59135, spry_59086);
if (current_59117.returned) {
doreturn_56278(spry_59086.currentactivation, spry_59086);
result_59087 = current_59117.last;
break BeforeRet;
}

if (collect_59116 != null) { collect_59116.push(current_59117.last); } else { collect_59116 = [current_59117.last]; };
}
else {
current_59117.last = next_59135;
}

}
} while(false);
spry_59086.lastself = spry_59086.currentactivation.self;
spry_59086.currentactivation = spry_59086.currentactivation.parent;
result_59087 = newblok_53519(collect_59116);
break BeforeRet;
} while (false); 
return result_59087;
}
function primreduce_59147(spry_59149) {

var result_59150 = null;
result_59150 = evalreduce_59083(evalarg_56687(spry_59149), spry_59149);
return result_59150;
}
function addextend_59151(spry_59153) {

makeword_56691(spry_59153, makeNimstrLit("reduce"), newprimfunc_55830(primreduce_59147));
}
addextend_59151(spry_75001[0]);
function binom_28402(n_28404, k_28405) {

var result_28406 = 0;
BeforeRet: do {
if ((k_28405 <= 0)) {
result_28406 = 1;
break BeforeRet;
}

if ((n_28404 < (2 * k_28405))) {
result_28406 = binom_28402(n_28404, (n_28404 - k_28405));
break BeforeRet;
}

result_28406 = n_28404;
L1: do {
var i_28418 = 0;
var res_28422 = 2;
L2: do {
L3: while (true) {
if (!(res_28422 <= k_28405)) break L3;
i_28418 = res_28422;
result_28406 = Math.floor((result_28406 * ((n_28404 + 1) - i_28418)) / i_28418);
res_28422 += 1;
}
} while(false);
} while(false);
} while (false); 
return result_28406;
}
function fac_28426(n_28428) {

var result_28429 = 0;
result_28429 = 1;
L1: do {
var i_28441 = 0;
var res_28445 = 2;
L2: do {
L3: while (true) {
if (!(res_28445 <= n_28428)) break L3;
i_28441 = res_28445;
result_28429 = (result_28429 * i_28441);
res_28445 += 1;
}
} while(false);
} while(false);
return result_28429;
}
function ispoweroftwo_28627(x_28629) {

var Tmp1;
var result_28630 = false;
BeforeRet: do {
if (!(0 < x_28629)) Tmp1 = false; else {Tmp1 = ((x_28629 & (x_28629 - 1)) == 0); }result_28630 = Tmp1;
break BeforeRet;
} while (false); 
return result_28630;
}
function nextpoweroftwo_28631(x_28633) {

var result_28634 = 0;
result_28634 = (x_28633 - 1);
result_28634 = (result_28634 | ((result_28634 >>> 0) >>> 16));
result_28634 = (result_28634 | ((result_28634 >>> 0) >>> 8));
result_28634 = (result_28634 | ((result_28634 >>> 0) >>> 4));
result_28634 = (result_28634 | ((result_28634 >>> 0) >>> 2));
result_28634 = (result_28634 | ((result_28634 >>> 0) >>> 1));
result_28634 += (1 + ((x_28633 <= 0) ? 1:0));
return result_28634;
}
function rotl_61802(x_61804, k_61805) {

var result_61806 = 0;
result_61806 = ((x_61804 << k_61805) | ((x_61804 >>> 0) >>> ((64 - k_61805) >>> 0)));
return result_61806;
}
function next_61843(s_61846) {

var result_61847 = 0;
var s0_61848 = s_61846.a0;
var s1_61849 = s_61846.a1;
result_61847 = ((s0_61848 + s1_61849) >>> 0);
s1_61849 = (s1_61849 ^ s0_61848);
s_61846.a0 = ((rotl_61802(s0_61848, 55) ^ s1_61849) ^ (s1_61849 << 14));
s_61846.a1 = rotl_61802(s1_61849, 36);
return result_61847;
}
function random_62297(max_62299) {

var result_62300 = 0.0;
var x_62302 = next_61843(state_61605[0]);
result_62300 = ((x_62302 / 4294967295) * max_62299);
return result_62300;
}
function random_62281(max_62283) {

var result_62284 = 0;
result_62284 = ((next_61843(state_61605[0]) % max_62283)|0);
return result_62284;
}
function addmath_68001(spry_68003) {

function HEX3Aanonymous_68004(spry_68006) {

var result_68007 = null;
BeforeRet: do {
var v_68008 = evalarginfix_56659(spry_68006);
if (isObj(v_68008.m_type, NTI51169)) {
result_68007 = newvalue_53638(-(v_68008.value));
break BeforeRet;
}
else {
result_68007 = newvalue_53633(-(v_68008.value));
break BeforeRet;
}

} while (false); 
return result_68007;
}
function HEX3Aanonymous_68011(spry_68013) {

var result_68014 = null;
result_68014 = newvalue_53633(binom_28402(evalarginfix_56659(spry_68013).value, evalarg_56687(spry_68013).value));
return result_68014;
}
function HEX3Aanonymous_68015(spry_68017) {

var result_68018 = null;
result_68018 = newvalue_53633(fac_28426(evalarginfix_56659(spry_68017).value));
return result_68018;
}
function HEX3Aanonymous_68019(spry_68021) {

var result_68022 = null;
result_68022 = newvalue_53648(ispoweroftwo_28627(evalarginfix_56659(spry_68021).value));
return result_68022;
}
function HEX3Aanonymous_68023(spry_68025) {

var result_68026 = null;
result_68026 = newvalue_53633(nextpoweroftwo_28631(evalarginfix_56659(spry_68025).value));
return result_68026;
}
function HEX3Aanonymous_68027(spry_68029) {

var result_68030 = null;
BeforeRet: do {
var max_68031 = evalarginfix_56659(spry_68029);
if (isObj(max_68031.m_type, NTI51169)) {
result_68030 = newvalue_53638(random_62297(max_68031.value));
break BeforeRet;
}
else {
result_68030 = newvalue_53633(random_62281(max_68031.value));
break BeforeRet;
}

} while (false); 
return result_68030;
}
function HEX3Aanonymous_68034(spry_68036) {

var result_68037 = null;
result_68037 = newvalue_53638(Math.sqrt(evalarginfix_56659(spry_68036).value));
return result_68037;
}
function HEX3Aanonymous_68038(spry_68040) {

var result_68041 = null;
result_68041 = newvalue_53638(Math.sin(evalarginfix_56659(spry_68040).value));
return result_68041;
}
function HEX3Aanonymous_68042(spry_68044) {

var result_68045 = null;
result_68045 = newvalue_53638(Math.cos(evalarginfix_56659(spry_68044).value));
return result_68045;
}
makeword_56691(spry_68003, makeNimstrLit("negated"), newprimmeth_55835(HEX3Aanonymous_68004));
makeword_56691(spry_68003, makeNimstrLit("binom"), newprimmeth_55835(HEX3Aanonymous_68011));
makeword_56691(spry_68003, makeNimstrLit("fac"), newprimmeth_55835(HEX3Aanonymous_68015));
makeword_56691(spry_68003, makeNimstrLit("powerOfTwo?"), newprimmeth_55835(HEX3Aanonymous_68019));
makeword_56691(spry_68003, makeNimstrLit("nextPowerOfTwo"), newprimmeth_55835(HEX3Aanonymous_68023));
makeword_56691(spry_68003, makeNimstrLit("random"), newprimmeth_55835(HEX3Aanonymous_68027));
makeword_56691(spry_68003, makeNimstrLit("sqrt"), newprimmeth_55835(HEX3Aanonymous_68034));
makeword_56691(spry_68003, makeNimstrLit("sin"), newprimmeth_55835(HEX3Aanonymous_68038));
makeword_56691(spry_68003, makeNimstrLit("cos"), newprimmeth_55835(HEX3Aanonymous_68042));
}
addmath_68001(spry_75001[0]);
function newpolymeth_69008(methods_69010, parent_69011) {

var result_69012 = null;
result_69012 = {nodes: methods_69010.nodes, parent: parent_69011, m_type: NTI69004, source: null, pos: 0, tags: null};
return result_69012;
}
function polymeth_69014(methods_69016, spry_69017) {

var result_69018 = null;
result_69018 = newpolymeth_69008(methods_69016, spry_69017.currentactivation);
return result_69018;
}
function addoo_69098(spry_69100) {

function HEX3Aanonymous_69101(spry_69103) {

var result_69104 = null;
result_69104 = polymeth_69014(evalarg_56687(spry_69103), spry_69103);
return result_69104;
}
function HEX3Aanonymous_69105(spry_69107) {

var result_69108 = null;
var tags_69109 = evalarginfix_56659(spry_69107);
result_69108 = meth_55706(spry_69107, evalarg_56687(spry_69107));
result_69108.tags = tags_69109;
return result_69108;
}
makeword_56691(spry_69100, makeNimstrLit("polymethod"), newprimfunc_55830(HEX3Aanonymous_69101));
makeword_56691(spry_69100, makeNimstrLit("->"), newprimmeth_55835(HEX3Aanonymous_69105));
}
addoo_69098(spry_75001[0]);
function dump_70054(spry_70056) {

rawEcho(makeNimstrLit("STACK:"));
L1: do {
var a_70059 = null;
var activation_70067 = spry_70056.currentactivation;
L2: do {
L3: while (true) {
if (!!((activation_70067 === null))) break L3;
a_70059 = activation_70067;
dump_70012(a_70059);
rawEcho(makeNimstrLit("-----------------------------"));
activation_70067 = activation_70067.parent;
}
} while(false);
} while(false);
rawEcho(makeNimstrLit("========================================"));
}
function adddebug_70068(spry_70070) {

function HEX3Aanonymous_70071(spry_70073) {

var result_70074 = null;
dump_70054(spry_70073);
return result_70074;
}
makeword_56691(spry_70070, makeNimstrLit("dump"), newprimfunc_55830(HEX3Aanonymous_70071));
}
adddebug_70068(spry_75001[0]);
function nsuReplaceStr(s_37264, sub_37265, by_37266) {

var result_37267 = null;
var a_37268 = [new Int32Array(256)];
result_37267 = nimCopy(null, makeNimstrLit(""), NTI138);
preprocesssub_36726(sub_37265, a_37268[0]);
var i_37270 = 0;
L1: do {
L2: while (true) {
if (!true) break L2;
var j_37271 = findaux_36768(s_37264, sub_37265, i_37270, a_37268[0]);
if ((j_37271 < 0)) {
break L1;
}

if (result_37267 != null) { result_37267 = (result_37267.slice(0, -1)).concat((s_37264.slice(i_37270, ((j_37271 - 1))+1).concat(0))); } else { result_37267 = (s_37264.slice(i_37270, ((j_37271 - 1))+1).concat(0));};
if (result_37267 != null) { result_37267 = (result_37267.slice(0, -1)).concat(by_37266); } else { result_37267 = by_37266;};
i_37270 = (j_37271 + (sub_37265 != null ? sub_37265.length-1 : 0));
}
} while(false);
if (result_37267 != null) { result_37267 = (result_37267.slice(0, -1)).concat((s_37264.slice(i_37270))); } else { result_37267 = (s_37264.slice(i_37270));};
return result_37267;
}
function evalrootdo_57069(self_57071, spry_57072) {

var Tmp1;
var result_57073 = null;
spry_57072.lastself = spry_57072.currentactivation.self;
spry_57072.currentactivation = spry_57072.currentactivation.parent;
spry_57072.rootactivation.body = self_57071;
spry_57072.rootactivation.pos = 0;
result_57073 = eval_56975(spry_57072.rootactivation, spry_57072);
spry_57072.rootactivation.parent = spry_57072.currentactivation;
if (!(spry_57072.rootactivation.self === null)) Tmp1 = false; else {Tmp1 = !((spry_57072.rootactivation.parent === null)); }if (Tmp1) {
spry_57072.rootactivation.self = spry_57072.rootactivation.parent.self;
}

spry_57072.currentactivation = spry_57072.rootactivation;
return result_57073;
}
function evalroot_55710(spry_55712, code_55713) {

var result_57095 = null;
result_57095 = evalrootdo_57069(parse_55433(spry_55712.parser, code_55713), spry_55712);
return result_57095;
}
function addstring_71002(spry_71004) {

function HEX3Aanonymous_71005(spry_71007) {

var result_71008 = null;
BeforeRet: do {
var s_71009 = nimCopy(null, evalarginfix_56659(spry_71007).value, NTI138);
var sep_71010 = nimCopy(null, evalarg_56687(spry_71007).value, NTI138);
var blk_71011 = newblok_53525();
L1: do {
var token_71012 = null;
var last_71017 = 0;
var splits_71019 = -1;
if ((0 < (s_71009 != null ? s_71009.length-1 : 0))) {
L2: do {
L3: while (true) {
if (!(last_71017 <= (s_71009 != null ? s_71009.length-1 : 0))) break L3;
var first_71021 = last_71017;
L4: do {
L5: while (true) {
if (!((last_71017 < (s_71009 != null ? s_71009.length-1 : 0)) && !(substreq_34262(s_71009, last_71017, sep_71010)))) break L5;
last_71017 += 1;
}
} while(false);
if ((splits_71019 == 0)) {
last_71017 = (s_71009 != null ? s_71009.length-1 : 0);
}

token_71012 = (s_71009.slice(first_71021, ((last_71017 - 1))+1).concat(0));
add_53663(blk_71011, newvalue_53643(token_71012));
if ((splits_71019 == 0)) {
break L2;
}

splits_71019 -= 1;
last_71017 += (sep_71010 != null ? sep_71010.length-1 : 0);
}
} while(false);
}

} while(false);
result_71008 = blk_71011;
break BeforeRet;
} while (false); 
return result_71008;
}
function HEX3Aanonymous_71022(spry_71024) {

var result_71025 = null;
BeforeRet: do {
var self_71026 = evalarginfix_56659(spry_71024);
var sub_71027 = nimCopy(null, evalarg_56687(spry_71024).value, NTI138);
var by_71028 = nimCopy(null, evalarg_56687(spry_71024).value, NTI138);
self_71026.value = nimCopy(null, nsuReplaceStr(self_71026.value, sub_71027, by_71028), NTI138);
rawEcho(self_71026.value);
result_71025 = self_71026;
break BeforeRet;
} while (false); 
return result_71025;
}
function HEX3Aanonymous_71031(spry_71033) {

var result_71034 = null;
var self_71035 = nimCopy(null, evalarginfix_56659(spry_71033).value, NTI138);
var sub_71036 = nimCopy(null, evalarg_56687(spry_71033).value, NTI138);
var start_71037 = evalarg_56687(spry_71033).value;
result_71034 = newvalue_53633(nsuFindStr(self_71035, sub_71036, start_71037));
return result_71034;
}
makeword_56691(spry_71004, makeNimstrLit("split:"), newprimmeth_55835(HEX3Aanonymous_71005));
makeword_56691(spry_71004, makeNimstrLit("replace:with:"), newprimmeth_55835(HEX3Aanonymous_71022));
makeword_56691(spry_71004, makeNimstrLit("findString:startingAt:"), newprimmeth_55835(HEX3Aanonymous_71031));
evalroot_55710(spry_71004, makeNimstrLit("[\x0A    findString: = method [self findString: :s startingAt: 0]\x0A  ]"));
}
addstring_71002(spry_75001[0]);
function addmodules_72002(spry_72004) {

evalroot_55710(spry_72004, makeNimstrLit("[\x0A    # Load a Module from a string\x0A    loadString: = func [:code\x0A      map = eval parse code\x0A      loadMap: map as: ((map at: \'_meta) at: \'name)\x0A    ]\x0A\x0A    loadString:as: = func [:code :name\x0A      loadMap: (eval parse code) as: name\x0A    ]\x0A\x0A    loadFile: = func [\x0A      loadString: readFile :fileName]\x0A\x0A    loadFile:as: = func [\x0A      loadString: (readFile :fileName) as: :name]\x0A\x0A    loadMap:as: = func [:map :name\x0A      root at: name put: map\x0A      true\x0A    ]\x0A\x0A    existsFile \"spry.sy\" then: [\x0A      #echo \"Loading spry.sy ...\"\x0A      loadFile: \"spry.sy\"\x0A    ]\x0A  ]"));
}
addmodules_72002(spry_75001[0]);
function addreflect_73103(spry_73105) {

function HEX3Aanonymous_73106(spry_73108) {

var result_73109 = null;
result_73109 = neworgetlitword_53046(spry_73108.parser, typename_73007(evalarginfix_56659(spry_73108)));
return result_73109;
}
function HEX3Aanonymous_73110(spry_73112) {

var result_73113 = null;
BeforeRet: do {
var node_73114 = evalarginfix_56659(spry_73112);
result_73113 = node_73114.source;
if ((result_73113 === null)) {
result_73113 = spry_73112.nilval;
break BeforeRet;
}

} while (false); 
return result_73113;
}
function HEX3Aanonymous_73123(spry_73125) {

var result_73126 = null;
BeforeRet: do {
var node_73127 = evalarginfix_56659(spry_73125);
node_73127.source = evalarg_56687(spry_73125);
result_73126 = node_73127;
break BeforeRet;
} while (false); 
return result_73126;
}
makeword_56691(spry_73105, makeNimstrLit("type"), newprimmeth_55835(HEX3Aanonymous_73106));
makeword_56691(spry_73105, makeNimstrLit("source"), newprimmeth_55835(HEX3Aanonymous_73110));
makeword_56691(spry_73105, makeNimstrLit("source:"), newprimmeth_55835(HEX3Aanonymous_73123));
}
addreflect_73103(spry_75001[0]);
function HEX5BHEX5D_55788(self_55790, key_55791) {

var result_55792 = null;
result_55792 = self_55790.nodes[key_55791];
return result_55792;
}
function HEX5BHEX5DHEX3D_55808(self_55810, key_55811, val_55812) {

self_55810.nodes[key_55811] = val_55812;
}
function newblok_74002(size_74004) {

var result_74005 = null;
result_74005 = {nodes: newseq_53493(size_74004), m_type: NTI51195, pos: 0, tags: null};
return result_74005;
}
function fill_74167(a_74173, first_74175, last_74177, value_74179) {

var x_74180 = first_74175;
L1: do {
L2: while (true) {
if (!(x_74180 <= last_74177)) break L2;
a_74173[x_74180] = value_74179;
x_74180 += 1;
}
} while(false);
}
function fill_74150(a_74156, value_74158) {

fill_74167(a_74156, 0, (a_74156 != null ? (a_74156.length-1) : -1), value_74158);
}
function reverse_74236(a_74242, first_74244, last_74246) {

var x_74247 = first_74244;
var y_74248 = last_74246;
L1: do {
L2: while (true) {
if (!(x_74247 < y_74248)) break L2;
var Tmp3 = a_74242[x_74247]; a_74242[x_74247] = a_74242[y_74248]; a_74242[y_74248] = Tmp3;y_74248 -= 1;
x_74247 += 1;
}
} while(false);
}
function reverse_74221(a_74227) {

reverse_74236(a_74227, 0, (a_74227 != null ? (a_74227.length-1) : -1));
}
function addblock_74035(spry_74037) {

function HEX3Aanonymous_74038(spry_74040) {

var result_74041 = null;
result_74041 = HEX5BHEX5D_55788(evalarginfix_56659(spry_74040), 0);
return result_74041;
}
function HEX3Aanonymous_74042(spry_74044) {

var result_74045 = null;
result_74045 = HEX5BHEX5D_55788(evalarginfix_56659(spry_74044), 1);
return result_74045;
}
function HEX3Aanonymous_74046(spry_74048) {

var result_74049 = null;
result_74049 = HEX5BHEX5D_55788(evalarginfix_56659(spry_74048), 2);
return result_74049;
}
function HEX3Aanonymous_74050(spry_74052) {

var result_74053 = null;
result_74053 = HEX5BHEX5D_55788(evalarginfix_56659(spry_74052), 3);
return result_74053;
}
function HEX3Aanonymous_74054(spry_74056) {

var result_74057 = null;
result_74057 = HEX5BHEX5D_55788(evalarginfix_56659(spry_74056), 4);
return result_74057;
}
function HEX3Aanonymous_74058(spry_74060) {

var result_74061 = null;
var nodes_74062 = nimCopy(null, evalarginfix_56659(spry_74060).nodes, NTI51188);
result_74061 = nodes_74062[(nodes_74062 != null ? (nodes_74062.length-1) : -1)];
return result_74061;
}
function HEX3Aanonymous_74063(spry_74065) {

var result_74066 = null;
evalarginfix_56659(spry_74065).pos = 0;
return result_74066;
}
function HEX3Aanonymous_74067(spry_74069) {

var result_74070 = null;
result_74070 = newvalue_53633(evalarginfix_56659(spry_74069).pos);
return result_74070;
}
function HEX3Aanonymous_74071(spry_74073) {

var result_74074 = null;
result_74074 = evalarginfix_56659(spry_74073);
var comp_74075 = result_74074;
comp_74075.pos = evalarg_56687(spry_74073).value;
return result_74074;
}
function HEX3Aanonymous_74076(spry_74078) {

var result_74079 = null;
var comp_74080 = evalarginfix_56659(spry_74078);
result_74079 = HEX5BHEX5D_55788(comp_74080, comp_74080.pos);
return result_74079;
}
function HEX3Aanonymous_74081(spry_74083) {

var result_74084 = null;
result_74084 = evalarginfix_56659(spry_74083);
var comp_74085 = result_74084;
HEX5BHEX5DHEX3D_55808(comp_74085, comp_74085.pos, evalarg_56687(spry_74083));
return result_74084;
}
function HEX3Aanonymous_74086(spry_74088) {

var result_74089 = null;
BeforeRet: do {
var comp_74090 = evalarginfix_56659(spry_74088);
if ((comp_74090.pos == (comp_74090.nodes != null ? comp_74090.nodes.length : 0))) {
result_74089 = spry_74088.undefval;
break BeforeRet;
}

result_74089 = HEX5BHEX5D_55788(comp_74090, comp_74090.pos);
comp_74090.pos += 1;
} while (false); 
return result_74089;
}
function HEX3Aanonymous_74108(spry_74110) {

var result_74111 = null;
BeforeRet: do {
var comp_74112 = evalarginfix_56659(spry_74110);
if ((comp_74112.pos == 0)) {
result_74111 = spry_74110.undefval;
break BeforeRet;
}

comp_74112.pos -= 1;
result_74111 = HEX5BHEX5D_55788(comp_74112, comp_74112.pos);
} while (false); 
return result_74111;
}
function HEX3Aanonymous_74122(spry_74124) {

var result_74125 = null;
var comp_74126 = evalarginfix_56659(spry_74124);
result_74125 = newvalue_53648((comp_74126.pos == (comp_74126.nodes != null ? comp_74126.nodes.length : 0)));
return result_74125;
}
function HEX3Aanonymous_74135(spry_74137) {

var result_74138 = null;
BeforeRet: do {
result_74138 = newblok_53525();
break BeforeRet;
} while (false); 
return result_74138;
}
function HEX3Aanonymous_74139(spry_74141) {

var result_74142 = null;
BeforeRet: do {
var size_74143 = evalarg_56687(spry_74141);
var blok_74144 = newblok_74002(size_74143.value);
fill_74150(blok_74144.nodes, spry_74141.nilval);
result_74142 = blok_74144;
break BeforeRet;
} while (false); 
return result_74142;
}
function HEX3Aanonymous_74191(spry_74193) {

var result_74194 = null;
BeforeRet: do {
var self_74195 = evalarginfix_56659(spry_74193);
var filler_74196 = evalarg_56687(spry_74193);
fill_74150(self_74195.nodes, filler_74196);
result_74194 = self_74195;
break BeforeRet;
} while (false); 
return result_74194;
}
function HEX3Aanonymous_74211(spry_74213) {

var result_74214 = null;
BeforeRet: do {
var self_74215 = evalarginfix_56659(spry_74213);
reverse_74221(self_74215.nodes);
result_74214 = self_74215;
break BeforeRet;
} while (false); 
return result_74214;
}
function HEX3Aanonymous_74278(spry_74280) {

var result_74281 = null;
BeforeRet: do {
var self_74282 = evalarginfix_56659(spry_74280);
var blk_74283 = evalarg_56687(spry_74280);
var returnblok_74284 = newblok_53525();
var current_74285 = spry_74280.currentactivation;
var orig_74286 = current_74285.body.nodes[0];
var oldpos_74287 = current_74285.pos;
current_74285.pos = 0;
var activation_74288 = newactivation_55862(blk_74283);
L1: do {
var each_74297 = null;
var HEX3Atmp_74299 = null;
HEX3Atmp_74299 = self_74282.nodes;
var i_74302 = 0;
var L_74304 = (HEX3Atmp_74299 != null ? HEX3Atmp_74299.length : 0);
L2: do {
L3: while (true) {
if (!(i_74302 < L_74304)) break L3;
each_74297 = HEX3Atmp_74299[i_74302];
current_74285.body.nodes[0] = each_74297;
result_74281 = eval_56975(activation_74288, spry_74280);
reset_55896(activation_74288);
if (current_74285.returned) {
current_74285.body.nodes[0] = orig_74286;
current_74285.pos = oldpos_74287;
break BeforeRet;
}

if (value_51945(result_74281)) {
add_53663(returnblok_74284, each_74297);
}

current_74285.pos = 0;
i_74302 += 1;
}
} while(false);
} while(false);
current_74285.body.nodes[0] = orig_74286;
current_74285.pos = oldpos_74287;
result_74281 = returnblok_74284;
break BeforeRet;
} while (false); 
return result_74281;
}
function HEX3Aanonymous_74305(spry_74307) {

var result_74308 = null;
BeforeRet: do {
var blk_74309 = evalarginfix_56659(spry_74307);
var sum_74310 = 0;
var sum2_74311 = 0.0;
var foundfloat_74312 = false;
L1: do {
var each_74321 = null;
var HEX3Atmp_74330 = null;
HEX3Atmp_74330 = blk_74309.nodes;
var i_74333 = 0;
var L_74335 = (HEX3Atmp_74330 != null ? HEX3Atmp_74330.length : 0);
L2: do {
L3: while (true) {
if (!(i_74333 < L_74335)) break L3;
each_74321 = HEX3Atmp_74330[i_74333];
if (isObj(each_74321.m_type, NTI51166)) {
sum_74310 = (sum_74310 + each_74321.value);
}
else {
if (isObj(each_74321.m_type, NTI51169)) {
foundfloat_74312 = true;
sum2_74311 = (sum2_74311 + each_74321.value);
}
else {
raiseruntimeexception_51330(makeNimstrLit("Block contained something other than an int or float, can not sum."));
}
}
i_74333 += 1;
}
} while(false);
} while(false);
if (foundfloat_74312) {
result_74308 = newvalue_53638((sum2_74311 + sum_74310));
break BeforeRet;
}
else {
result_74308 = newvalue_53633(sum_74310);
break BeforeRet;
}

} while (false); 
return result_74308;
}
function HEX3Aanonymous_74337(spry_74339) {

var result_74340 = null;
BeforeRet: do {
var self_74341 = evalarginfix_56659(spry_74339);
var returnblok_74342 = newblok_53525();
L1: do {
var each_74351 = null;
var HEX3Atmp_74353 = null;
HEX3Atmp_74353 = self_74341.nodes;
var i_74356 = 0;
var L_74358 = (HEX3Atmp_74353 != null ? HEX3Atmp_74353.length : 0);
L2: do {
L3: while (true) {
if (!(i_74356 < L_74358)) break L3;
each_74351 = HEX3Atmp_74353[i_74356];
if ((8 < each_74351.value)) {
add_53663(returnblok_74342, each_74351);
}

i_74356 += 1;
}
} while(false);
} while(false);
result_74340 = returnblok_74342;
break BeforeRet;
} while (false); 
return result_74340;
}
makeword_56691(spry_74037, makeNimstrLit("first"), newprimmeth_55835(HEX3Aanonymous_74038));
makeword_56691(spry_74037, makeNimstrLit("second"), newprimmeth_55835(HEX3Aanonymous_74042));
makeword_56691(spry_74037, makeNimstrLit("third"), newprimmeth_55835(HEX3Aanonymous_74046));
makeword_56691(spry_74037, makeNimstrLit("fourth"), newprimmeth_55835(HEX3Aanonymous_74050));
makeword_56691(spry_74037, makeNimstrLit("fifth"), newprimmeth_55835(HEX3Aanonymous_74054));
makeword_56691(spry_74037, makeNimstrLit("last"), newprimmeth_55835(HEX3Aanonymous_74058));
makeword_56691(spry_74037, makeNimstrLit("reset"), newprimmeth_55835(HEX3Aanonymous_74063));
makeword_56691(spry_74037, makeNimstrLit("pos"), newprimmeth_55835(HEX3Aanonymous_74067));
makeword_56691(spry_74037, makeNimstrLit("pos:"), newprimmeth_55835(HEX3Aanonymous_74071));
makeword_56691(spry_74037, makeNimstrLit("read"), newprimmeth_55835(HEX3Aanonymous_74076));
makeword_56691(spry_74037, makeNimstrLit("write:"), newprimmeth_55835(HEX3Aanonymous_74081));
makeword_56691(spry_74037, makeNimstrLit("next"), newprimmeth_55835(HEX3Aanonymous_74086));
makeword_56691(spry_74037, makeNimstrLit("prev"), newprimmeth_55835(HEX3Aanonymous_74108));
makeword_56691(spry_74037, makeNimstrLit("end?"), newprimmeth_55835(HEX3Aanonymous_74122));
makeword_56691(spry_74037, makeNimstrLit("newBlock"), newprimfunc_55830(HEX3Aanonymous_74135));
makeword_56691(spry_74037, makeNimstrLit("newBlock:"), newprimfunc_55830(HEX3Aanonymous_74139));
makeword_56691(spry_74037, makeNimstrLit("fill:"), newprimmeth_55835(HEX3Aanonymous_74191));
makeword_56691(spry_74037, makeNimstrLit("reverse"), newprimmeth_55835(HEX3Aanonymous_74211));
makeword_56691(spry_74037, makeNimstrLit("select:"), newprimmeth_55835(HEX3Aanonymous_74278));
makeword_56691(spry_74037, makeNimstrLit("sum"), newprimmeth_55835(HEX3Aanonymous_74305));
makeword_56691(spry_74037, makeNimstrLit("selectLarger8"), newprimmeth_55835(HEX3Aanonymous_74337));
}
addblock_74035(spry_75001[0]);
function spryEval(code_75004) {

var result_75005 = null;
result_75005 = toJSStr(HEX24_51604(evalroot_55710(spry_75001[0], (makeNimstrLit("[").slice(0,-1)).concat(cstrToNimstr(code_75004).slice(0,-1),makeNimstrLit("]")))));
return result_75005;
}
function HEX24_55732(self_55734) {

var result_55735 = null;
result_55735 = nimCopy(null, makeNimstrLit("primitive-method"), NTI138);
return result_55735;
}
function HEX24_55728(self_55730) {

var result_55731 = null;
result_55731 = nimCopy(null, makeNimstrLit("primitive-func"), NTI138);
return result_55731;
}
function HEX24_55744(self_55746) {

var result_55747 = null;
BeforeRet: do {
result_55747 = nimCopy(null, (makeNimstrLit("activation [").slice(0,-1)).concat(HEX24_51604(self_55746.body).slice(0,-1),makeNimstrLit(" ").slice(0,-1),cstrToNimstr((self_55746.pos)+"").slice(0,-1),makeNimstrLit("]")), NTI138);
break BeforeRet;
} while (false); 
return result_55747;
}
function HEX24_51815(self_51817) {

var result_51818 = null;
result_51818 = nimCopy(null, (makeNimstrLit(":").slice(0,-1)).concat(self_51817.word), NTI138);
return result_51818;
}
function HEX24_51811(self_51813) {

var result_51814 = null;
result_51814 = nimCopy(null, (makeNimstrLit("\'").slice(0,-1)).concat(self_51813.word), NTI138);
return result_51814;
}
function map_51719(data_51725, op_51730) {

var result_51732 = null;
result_51732 = new Array((data_51725 != null ? data_51725.length : 0)); for (var i=0;i<(data_51725 != null ? data_51725.length : 0);++i) {result_51732[i]=null;}L1: do {
var i_51766 = 0;
var HEX3Atmp_51768 = 0;
HEX3Atmp_51768 = ((data_51725 != null ? data_51725.length : 0) - 1);
var res_51771 = 0;
L2: do {
L3: while (true) {
if (!(res_51771 <= HEX3Atmp_51768)) break L3;
i_51766 = res_51771;
result_51732[i_51766] = nimCopy(null, op_51730(data_51725[i_51766]), NTI138);
res_51771 += 1;
}
} while(false);
} while(false);
return result_51732;
}
function HEX24_51703(self_51706) {

function HEX3Aanonymous_51711(n_51713) {

var result_51714 = null;
result_51714 = nimCopy(null, HEX24_51604(n_51713), NTI138);
return result_51714;
}
var result_51707 = null;
result_51707 = nimCopy(null, nsuJoinSep(map_51719(self_51706, HEX3Aanonymous_51711), makeNimstrLit(" ")), NTI138);
return result_51707;
}
function HEX24_69019(self_69021) {

var result_69022 = null;
BeforeRet: do {
result_69022 = nimCopy(null, (makeNimstrLit("polymethod [").slice(0,-1)).concat(HEX24_51703(self_69021.nodes).slice(0,-1),makeNimstrLit("]")), NTI138);
break BeforeRet;
} while (false); 
return result_69022;
}
function HEX24_55740(self_55742) {

var result_55743 = null;
BeforeRet: do {
result_55743 = nimCopy(null, (makeNimstrLit("method [").slice(0,-1)).concat(HEX24_51703(self_55742.nodes).slice(0,-1),makeNimstrLit("]")), NTI138);
break BeforeRet;
} while (false); 
return result_55743;
}
function HEX24_55736(self_55738) {

var result_55739 = null;
BeforeRet: do {
result_55739 = nimCopy(null, (makeNimstrLit("func [").slice(0,-1)).concat(HEX24_51703(self_55738.nodes).slice(0,-1),makeNimstrLit("]")), NTI138);
break BeforeRet;
} while (false); 
return result_55739;
}
function HEX24_51823(self_51825) {

var result_51826 = null;
result_51826 = nimCopy(null, (makeNimstrLit("[").slice(0,-1)).concat(HEX24_51703(self_51825.nodes).slice(0,-1),makeNimstrLit("]")), NTI138);
return result_51826;
}
function HEX24_51819(self_51821) {

var result_51822 = null;
result_51822 = nimCopy(null, (makeNimstrLit(":$").slice(0,-1)).concat(self_51821.word), NTI138);
return result_51822;
}
function HEX24_51831(self_51833) {

var result_51834 = null;
result_51834 = nimCopy(null, (makeNimstrLit("{").slice(0,-1)).concat(HEX24_51703(self_51833.nodes).slice(0,-1),makeNimstrLit("}")), NTI138);
return result_51834;
}
function HEX24_51827(self_51829) {

var result_51830 = null;
result_51830 = nimCopy(null, (makeNimstrLit("(").slice(0,-1)).concat(HEX24_51703(self_51829.nodes).slice(0,-1),makeNimstrLit(")")), NTI138);
return result_51830;
}
function HEX24_51787(self_51789) {

var result_51790 = null;
result_51790 = nimCopy(null, (makeNimstrLit("@").slice(0,-1)).concat(self_51789.word), NTI138);
return result_51790;
}
function HEX24_51835(self_51837) {

var result_51838 = null;
result_51838 = nimCopy(null, makeNimstrLit(""), NTI138);
L1: do {
var i_51856 = 0;
var HEX3Atmp_51858 = 0;
HEX3Atmp_51858 = ((self_51837.keys != null ? self_51837.keys.length : 0) - 1);
var res_51861 = 0;
L2: do {
L3: while (true) {
if (!(res_51861 <= HEX3Atmp_51858)) break L3;
i_51856 = res_51861;
result_51838 = nimCopy(null, (result_51838.slice(0,-1)).concat(self_51837.keys[i_51856].slice(0,-1),makeNimstrLit(" ").slice(0,-1),HEX24_51604(self_51837.args[i_51856])), NTI138);
res_51861 += 1;
}
} while(false);
} while(false);
return result_51838;
}
function HEX24_51791(self_51793) {

var result_51794 = null;
result_51794 = nimCopy(null, (makeNimstrLit("..").slice(0,-1)).concat(self_51793.word), NTI138);
return result_51794;
}
function HEX24_51803(self_51805) {

var result_51806 = null;
result_51806 = nimCopy(null, (makeNimstrLit("$@").slice(0,-1)).concat(self_51805.word), NTI138);
return result_51806;
}
function HEX24_51799(self_51801) {

var result_51802 = null;
result_51802 = nimCopy(null, (makeNimstrLit("$").slice(0,-1)).concat(HEX24_51604(self_51801.module).slice(0,-1),makeNimstrLit("::").slice(0,-1),self_51801.word), NTI138);
return result_51802;
}
function HEX24_51795(self_51797) {

var result_51798 = null;
result_51798 = nimCopy(null, (makeNimstrLit("$").slice(0,-1)).concat(self_51797.word), NTI138);
return result_51798;
}
function HEX24_51687(self_51689) {

var result_51690 = null;
result_51690 = nimCopy(null, makeNimstrLit("true"), NTI138);
return result_51690;
}
function HEX24_51807(self_51809) {

var result_51810 = null;
result_51810 = nimCopy(null, (makeNimstrLit("$..").slice(0,-1)).concat(self_51809.word), NTI138);
return result_51810;
}
function HEX24_51695(self_51697) {

var result_51698 = null;
result_51698 = nimCopy(null, makeNimstrLit("nil"), NTI138);
return result_51698;
}
function HEX24_51691(self_51693) {

var result_51694 = null;
result_51694 = nimCopy(null, makeNimstrLit("false"), NTI138);
return result_51694;
}
function HEX24_51608(self_51610) {

var result_51611 = null;
BeforeRet: do {
if ((self_51610.key === null)) {
result_51611 = nimCopy(null, (makeNimstrLit("nil = ").slice(0,-1)).concat(HEX24_51604(self_51610.val)), NTI138);
break BeforeRet;
}

if ((self_51610.val === null)) {
result_51611 = nimCopy(null, (HEX24_51604(self_51610.key).slice(0,-1)).concat(makeNimstrLit(" = nil")), NTI138);
break BeforeRet;
}

result_51611 = nimCopy(null, (HEX24_51604(self_51610.key).slice(0,-1)).concat(makeNimstrLit(" = ").slice(0,-1),HEX24_51604(self_51610.val)), NTI138);
} while (false); 
return result_51611;
}
function HEX24_51699(self_51701) {

var result_51702 = null;
result_51702 = nimCopy(null, makeNimstrLit("undef"), NTI138);
return result_51702;
}
function HEX24_51783(self_51785) {

var result_51786 = null;
result_51786 = nimCopy(null, (HEX24_51604(self_51785.module).slice(0,-1)).concat(makeNimstrLit("::").slice(0,-1),self_51785.word), NTI138);
return result_51786;
}
function HEX24_51779(self_51781) {

var result_51782 = null;
result_51782 = nimCopy(null, self_51781.word, NTI138);
return result_51782;
}
function HEX24_51775(self_51777) {

var result_51778 = null;
result_51778 = nimCopy(null, self_51777.word, NTI138);
return result_51778;
}
function nsuToHex(x_35434, len_35435) {

var result_35436 = null;
var n_35438 = x_35434;
result_35436 = nimCopy(null, mnewString(len_35435), NTI138);
L1: do {
var j_35614 = 0;
var HEX3Atmp_35618 = 0;
HEX3Atmp_35618 = (len_35435 - 1);
var res_35621 = HEX3Atmp_35618;
L2: do {
L3: while (true) {
if (!(0 <= res_35621)) break L3;
j_35614 = res_35621;
result_35436[j_35614] = makeNimstrLit("0123456789ABCDEF")[(n_35438 & 15)];
n_35438 = ((n_35438 ) >>> 4);
if (((n_35438 == 0) && (x_35434 < 0))) {
n_35438 = -1;
}

res_35621 -= 1;
}
} while(false);
} while(false);
return result_35436;
}
function nsuEscape(s_37895, prefix_37896, suffix_37897) {

var result_37898 = null;
result_37898 = nimCopy(null, mnewString(0), NTI138);
if (result_37898 != null) { result_37898 = (result_37898.slice(0, -1)).concat(prefix_37896); } else { result_37898 = prefix_37896;};
L1: do {
var c_37900 = 0;
var i_37912 = 0;
var L_37914 = (s_37895 != null ? s_37895.length-1 : 0);
L2: do {
L3: while (true) {
if (!(i_37912 < L_37914)) break L3;
c_37900 = s_37895[i_37912];
switch (c_37900) {
case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 203: case 204: case 205: case 206: case 207: case 208: case 209: case 210: case 211: case 212: case 213: case 214: case 215: case 216: case 217: case 218: case 219: case 220: case 221: case 222: case 223: case 224: case 225: case 226: case 227: case 228: case 229: case 230: case 231: case 232: case 233: case 234: case 235: case 236: case 237: case 238: case 239: case 240: case 241: case 242: case 243: case 244: case 245: case 246: case 247: case 248: case 249: case 250: case 251: case 252: case 253: case 254: case 255: if (result_37898 != null) { result_37898 = (result_37898.slice(0, -1)).concat(makeNimstrLit("\\x")); } else { result_37898 = makeNimstrLit("\\x");};
if (result_37898 != null) { result_37898 = (result_37898.slice(0, -1)).concat(nsuToHex(c_37900, 2)); } else { result_37898 = nsuToHex(c_37900, 2);};

break;
case 92: if (result_37898 != null) { result_37898 = (result_37898.slice(0, -1)).concat(makeNimstrLit("\\\\")); } else { result_37898 = makeNimstrLit("\\\\");};

break;
case 39: if (result_37898 != null) { result_37898 = (result_37898.slice(0, -1)).concat(makeNimstrLit("\\\'")); } else { result_37898 = makeNimstrLit("\\\'");};

break;
case 34: if (result_37898 != null) { result_37898 = (result_37898.slice(0, -1)).concat(makeNimstrLit("\\\"")); } else { result_37898 = makeNimstrLit("\\\"");};

break;
default: 
if (result_37898 != null) { addChar(result_37898, c_37900); } else { result_37898 = [c_37900, 0]; };
break;
}
i_37912 += 1;
}
} while(false);
} while(false);
if (result_37898 != null) { result_37898 = (result_37898.slice(0, -1)).concat(suffix_37897); } else { result_37898 = suffix_37897;};
return result_37898;
}
function HEX24_51683(self_51685) {

var result_51686 = null;
result_51686 = nimCopy(null, nsuEscape(self_51685.value, makeNimstrLit("\""), makeNimstrLit("\"")), NTI138);
return result_51686;
}
function HEX24_51679(self_51681) {

var result_51682 = null;
result_51682 = nimCopy(null, cstrToNimstr((self_51681.value)+""), NTI138);
return result_51682;
}
function HEX24_51675(self_51677) {

var result_51678 = null;
result_51678 = nimCopy(null, cstrToNimstr((self_51677.value)+""), NTI138);
return result_51678;
}
function HEX24_51628(self_51630) {

var result_51631 = null;
BeforeRet: do {
result_51631 = nimCopy(null, makeNimstrLit("{"), NTI138);
var first_51632 = true;
L1: do {
var k_51661 = null;
var v_51662 = null;
var HEX3Atmp_51664 = {data: null, counter: 0};
HEX3Atmp_51664 = self_51630.bindings;
L2: do {
var h_51668 = 0;
var HEX3Atmp_51670 = 0;
HEX3Atmp_51670 = (HEX3Atmp_51664.data != null ? (HEX3Atmp_51664.data.length-1) : -1);
var res_51672 = 0;
L3: do {
L4: while (true) {
if (!(res_51672 <= HEX3Atmp_51670)) break L4;
h_51668 = res_51672;
if (isfilled_47463(HEX3Atmp_51664.data[h_51668].Field0)) {
k_51661 = HEX3Atmp_51664.data[h_51668].Field1;
v_51662 = HEX3Atmp_51664.data[h_51668].Field2;
if (first_51632) {
if (result_51631 != null) { result_51631 = (result_51631.slice(0, -1)).concat(HEX24_51604(v_51662)); } else { result_51631 = HEX24_51604(v_51662);};
first_51632 = false;
}
else {
if (result_51631 != null) { result_51631 = (result_51631.slice(0, -1)).concat((makeNimstrLit(" ").slice(0,-1)).concat(HEX24_51604(v_51662))); } else { result_51631 = (makeNimstrLit(" ").slice(0,-1)).concat(HEX24_51604(v_51662));};
}

}

res_51672 += 1;
}
} while(false);
} while(false);
} while(false);
result_51631 = nimCopy(null, (result_51631.slice(0,-1)).concat(makeNimstrLit("}")), NTI138);
break BeforeRet;
} while (false); 
return result_51631;
}
function HEX24_51432(self_51434) {

var result_51435 = null;
rawEcho(makeNimstrLit("repr not available in js"));
return result_51435;
}
function HEX24_51604(self_51434) {

var result_51607 = null;
BeforeRet: do {
if (isObj(self_51434.m_type, NTI55627)) {
result_51607 = HEX24_55732(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI55624)) {
result_51607 = HEX24_55728(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI55635)) {
result_51607 = HEX24_55744(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51145)) {
result_51607 = HEX24_51815(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51134)) {
result_51607 = HEX24_51811(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI69004)) {
result_51607 = HEX24_69019(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI55633)) {
result_51607 = HEX24_55740(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI55629)) {
result_51607 = HEX24_55736(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51195)) {
result_51607 = HEX24_51823(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51156)) {
result_51607 = HEX24_51819(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51193)) {
result_51607 = HEX24_51831(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51191)) {
result_51607 = HEX24_51827(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51141)) {
result_51607 = HEX24_51787(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51158)) {
result_51607 = HEX24_51835(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51143)) {
result_51607 = HEX24_51791(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51152)) {
result_51607 = HEX24_51803(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51149)) {
result_51607 = HEX24_51799(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51147)) {
result_51607 = HEX24_51795(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51177)) {
result_51607 = HEX24_51687(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51154)) {
result_51607 = HEX24_51807(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51183)) {
result_51607 = HEX24_51695(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51179)) {
result_51607 = HEX24_51691(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51224)) {
result_51607 = HEX24_51608(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51181)) {
result_51607 = HEX24_51699(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51138)) {
result_51607 = HEX24_51783(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51136)) {
result_51607 = HEX24_51779(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51127)) {
result_51607 = HEX24_51775(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51172)) {
result_51607 = HEX24_51683(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51169)) {
result_51607 = HEX24_51679(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51166)) {
result_51607 = HEX24_51675(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51198)) {
result_51607 = HEX24_51628(self_51434);
break BeforeRet;
}
else {
if (isObj(self_51434.m_type, NTI51124)) {
result_51607 = HEX24_51432(self_51434);
break BeforeRet;
}
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
} while (false); 
return result_51607;
}
function hash_51884(self_51886) {

var result_51887 = 0;
result_51887 = hash_44827(self_51886.word);
return result_51887;
}
function hash_45202(x_45204) {

var result_45205 = 0;
var y_45206 = /**/[(x_45204 + 1.0000000000000000e+00)];
result_45205 = y_45206[0];
return result_45205;
}
function hash_51908(self_51910) {

var result_51911 = 0;
result_51911 = hash_45202(self_51910.value);
return result_51911;
}
function hash_44801(x_44803) {

var result_44804 = 0;
result_44804 = x_44803;
return result_44804;
}
function hash_51897(self_51899) {

var result_51900 = 0;
result_51900 = hash_44801(self_51899.value);
return result_51900;
}
function hash_51932(self_51934) {

var result_51935 = 0;
result_51935 = hash_44801(1);
return result_51935;
}
function hash_51919(self_51921) {

var result_51922 = 0;
result_51922 = hash_44827(self_51921.value);
return result_51922;
}
function hash_51973(self_51975) {

var result_51976 = 0;
result_51976 = hash_44801(1);
return result_51976;
}
function hash_51936(self_51938) {

var result_51939 = 0;
result_51939 = hash_44801(0);
return result_51939;
}
function hash_52002(x_52007) {

var result_52008 = 0;
L1: do {
var it_52034 = null;
var i_52038 = 0;
L2: do {
L3: while (true) {
if (!(i_52038 < (x_52007 != null ? x_52007.length : 0))) break L3;
it_52034 = x_52007[i_52038];
result_52008 = HEX21HEX26_44004(result_52008, hash_51870(it_52034));
i_52038 += 1;
}
} while(false);
} while(false);
result_52008 = HEX21HEX24_44027(result_52008);
return result_52008;
}
function hash_51995(self_51997) {

var result_51998 = 0;
result_51998 = hash_52002(self_51997.nodes);
return result_51998;
}
function hash_51984(self_51986) {

var result_51987 = 0;
result_51987 = hash_44801(2);
return result_51987;
}
function hash_51865(self_51867) {

var result_51868 = 0;
raiseruntimeexception_51330(makeNimstrLit("Nodes need to implement hash"));
return result_51868;
}
function hash_51870(self_51867) {

var result_51873 = 0;
BeforeRet: do {
if (isObj(self_51867.m_type, NTI51127)) {
result_51873 = hash_51884(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51169)) {
result_51873 = hash_51908(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51166)) {
result_51873 = hash_51897(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51177)) {
result_51873 = hash_51932(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51172)) {
result_51873 = hash_51919(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51183)) {
result_51873 = hash_51973(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51179)) {
result_51873 = hash_51936(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51195)) {
result_51873 = hash_51995(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51181)) {
result_51873 = hash_51984(self_51867);
break BeforeRet;
}
else {
if (isObj(self_51867.m_type, NTI51124)) {
result_51873 = hash_51865(self_51867);
break BeforeRet;
}
}}}}}}}}}
} while (false); 
return result_51873;
}
function HEX3DHEX3D_51963(self_51965, other_51966) {

var result_51967 = false;
result_51967 = false;
return result_51967;
}
function HEX3DHEX3D_51958(self_51960, other_51961) {

var result_51962 = false;
result_51962 = true;
return result_51962;
}
function HEX3DHEX3D_51953(self_51955, other_51956) {

var result_51957 = false;
result_51957 = true;
return result_51957;
}
function HEX3DHEX3D_51968(self_51970, other_51971) {

var result_51972 = false;
result_51972 = false;
return result_51972;
}
function HEX3DHEX3D_51912(self_51914, other_51915) {

var Tmp1;
var result_51916 = false;
if (!isObj(other_51915.m_type, NTI51169)) Tmp1 = false; else {Tmp1 = (self_51914.value == other_51915.value); }result_51916 = Tmp1;
return result_51916;
}
function HEX3DHEX3D_51901(self_51903, other_51904) {

var Tmp1;
var result_51905 = false;
if (!isObj(other_51904.m_type, NTI51166)) Tmp1 = false; else {Tmp1 = (self_51903.value == other_51904.value); }result_51905 = Tmp1;
return result_51905;
}
function HEX3DHEX3D_51890(self_51892, other_51893) {

var Tmp1;
var result_51894 = false;
if (!isObj(other_51893.m_type, NTI51127)) Tmp1 = false; else {Tmp1 = eqStrings(self_51892.word, other_51893.word); }result_51894 = Tmp1;
return result_51894;
}
function seqtoptr_52057(x_52062) {

return x_52062}
function HEX3DHEX3D_52046(x_52051, y_52054) {

var result_52055 = false;
BeforeRet: do {
if ((seqtoptr_52057(x_52051) == seqtoptr_52057(y_52054))) {
result_52055 = true;
}
else {
if (((seqtoptr_52057(x_52051) == 0) || (seqtoptr_52057(y_52054) == 0))) {
result_52055 = false;
}
else {
if (((x_52051 != null ? x_52051.length : 0) == (y_52054 != null ? y_52054.length : 0))) {
L1: do {
var i_52121 = 0;
var HEX3Atmp_52123 = 0;
HEX3Atmp_52123 = ((x_52051 != null ? x_52051.length : 0) - 1);
var res_52126 = 0;
L2: do {
L3: while (true) {
if (!(res_52126 <= HEX3Atmp_52123)) break L3;
i_52121 = res_52126;
if (!(HEX3DHEX3D_51880(x_52051[i_52121], y_52054[i_52121]))) {
result_52055 = false;
break BeforeRet;
}

res_52126 += 1;
}
} while(false);
} while(false);
result_52055 = true;
}
}}
} while (false); 
return result_52055;
}
function HEX3DHEX3D_52039(self_52041, other_52042) {

var Tmp1;
var result_52043 = false;
if (!isObj(other_52042.m_type, NTI51195)) Tmp1 = false; else {Tmp1 = HEX3DHEX3D_52046(self_52041.nodes, other_52042.nodes); }result_52043 = Tmp1;
return result_52043;
}
function HEX3DHEX3D_51988(self_51990, other_51991) {

var result_51992 = false;
result_51992 = isObj(other_51991.m_type, NTI51181);
return result_51992;
}
function HEX3DHEX3D_51977(self_51979, other_51980) {

var result_51981 = false;
result_51981 = isObj(other_51980.m_type, NTI51183);
return result_51981;
}
function HEX3DHEX3D_51925(self_51927, other_51928) {

var Tmp1;
var result_51929 = false;
if (!isObj(other_51928.m_type, NTI51172)) Tmp1 = false; else {Tmp1 = eqStrings(self_51927.value, other_51928.value); }result_51929 = Tmp1;
return result_51929;
}
function HEX3DHEX3D_51874(self_51876, other_51877) {

var result_51878 = false;
raiseruntimeexception_51330(makeNimstrLit("Nodes need to implement =="));
return result_51878;
}
function HEX3DHEX3D_51880(self_51876, other_51877) {

var result_51883 = false;
BeforeRet: do {
if ((isObj(self_51876.m_type, NTI51177) & isObj(other_51877.m_type, NTI51179))) {
result_51883 = HEX3DHEX3D_51963(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51179) & isObj(other_51877.m_type, NTI51179))) {
result_51883 = HEX3DHEX3D_51958(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51177) & isObj(other_51877.m_type, NTI51177))) {
result_51883 = HEX3DHEX3D_51953(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51179) & isObj(other_51877.m_type, NTI51177))) {
result_51883 = HEX3DHEX3D_51968(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51169) & isObj(other_51877.m_type, NTI51124))) {
result_51883 = HEX3DHEX3D_51912(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51166) & isObj(other_51877.m_type, NTI51124))) {
result_51883 = HEX3DHEX3D_51901(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51127) & isObj(other_51877.m_type, NTI51124))) {
result_51883 = HEX3DHEX3D_51890(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51195) & isObj(other_51877.m_type, NTI51124))) {
result_51883 = HEX3DHEX3D_52039(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51181) & isObj(other_51877.m_type, NTI51124))) {
result_51883 = HEX3DHEX3D_51988(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51183) & isObj(other_51877.m_type, NTI51124))) {
result_51883 = HEX3DHEX3D_51977(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51172) & isObj(other_51877.m_type, NTI51124))) {
result_51883 = HEX3DHEX3D_51925(self_51876, other_51877);
break BeforeRet;
}
else {
if ((isObj(self_51876.m_type, NTI51124) & isObj(other_51877.m_type, NTI51124))) {
result_51883 = HEX3DHEX3D_51874(self_51876, other_51877);
break BeforeRet;
}
}}}}}}}}}}}
} while (false); 
return result_51883;
}
function value_51949(self_51951) {

var result_51952 = false;
result_51952 = false;
return result_51952;
}
function value_51940(self_51942) {

var result_51943 = false;
result_51943 = true;
return result_51943;
}
function value_51945(self_51942) {

var result_51948 = false;
BeforeRet: do {
if (isObj(self_51942.m_type, NTI51179)) {
result_51948 = value_51949(self_51942);
break BeforeRet;
}
else {
if (isObj(self_51942.m_type, NTI51175)) {
result_51948 = value_51940(self_51942);
break BeforeRet;
}
}
} while (false); 
return result_51948;
}
function print_52144(self_52147) {

function HEX3Aanonymous_52152(n_52154) {

var result_52155 = null;
result_52155 = nimCopy(null, print_52136(n_52154), NTI138);
return result_52155;
}
var result_52148 = null;
result_52148 = nimCopy(null, nsuJoinSep(map_51719(self_52147, HEX3Aanonymous_52152), makeNimstrLit(" ")), NTI138);
return result_52148;
}
function print_52174(self_52176) {

var result_52177 = null;
result_52177 = nimCopy(null, print_52144(self_52176.nodes), NTI138);
return result_52177;
}
function print_52140(self_52142) {

var result_52143 = null;
result_52143 = nimCopy(null, self_52142.value, NTI138);
return result_52143;
}
function print_52131(self_52133) {

var result_52134 = null;
result_52134 = nimCopy(null, HEX24_51604(self_52133), NTI138);
return result_52134;
}
function print_52136(self_52133) {

var result_52139 = null;
BeforeRet: do {
if (isObj(self_52133.m_type, NTI51195)) {
result_52139 = print_52174(self_52133);
break BeforeRet;
}
else {
if (isObj(self_52133.m_type, NTI51172)) {
result_52139 = print_52140(self_52133);
break BeforeRet;
}
else {
if (isObj(self_52133.m_type, NTI51124)) {
result_52139 = print_52131(self_52133);
break BeforeRet;
}
}}
} while (false); 
return result_52139;
}
function concat_53838(seqs_53844) {

var result_53846 = null;
var L_53847 = 0;
L1: do {
var seqitm_53873 = null;
var i_54015 = 0;
L2: do {
L3: while (true) {
if (!(i_54015 < (seqs_53844 != null ? seqs_53844.length : 0))) break L3;
seqitm_53873 = seqs_53844[i_54015];
L_53847 += (seqitm_53873 != null ? seqitm_53873.length : 0);
i_54015 += 1;
}
} while(false);
} while(false);
result_53846 = new Array(L_53847); for (var i=0;i<L_53847;++i) {result_53846[i]=null;}var i_53901 = 0;
L4: do {
var s_53909 = null;
var i_54025 = 0;
L5: do {
L6: while (true) {
if (!(i_54025 < (seqs_53844 != null ? seqs_53844.length : 0))) break L6;
s_53909 = seqs_53844[i_54025];
L7: do {
var itm_54002 = null;
var i_54020 = 0;
var L_54022 = (s_53909 != null ? s_53909.length : 0);
L8: do {
L9: while (true) {
if (!(i_54020 < L_54022)) break L9;
itm_54002 = s_53909[i_54020];
result_53846[i_53901] = itm_54002;
i_53901 += 1;
i_54020 += 1;
}
} while(false);
} while(false);
i_54025 += 1;
}
} while(false);
} while(false);
return result_53846;
}
function concat_54050(self_54052, nodes_54054) {

var result_54055 = null;
result_54055 = newcurly_53595(concat_53838([self_54052.nodes, nodes_54054]));
return result_54055;
}
function concat_54026(self_54028, nodes_54030) {

var result_54031 = null;
result_54031 = newparen_53557(concat_53838([self_54028.nodes, nodes_54030]));
return result_54031;
}
function concat_53823(self_53825, nodes_53827) {

var result_53828 = null;
result_53828 = newblok_53519(concat_53838([self_53825.nodes, nodes_53827]));
return result_53828;
}
function concat_53812(self_53814, nodes_53816) {

var result_53817 = null;
raiseruntimeexception_51330((makeNimstrLit("Should not happen...").slice(0,-1)).concat(HEX24_51604(self_53814).slice(0,-1),makeNimstrLit(" ").slice(0,-1),HEX24_51703(nodes_53816)));
return result_53817;
}
function concat_53819(self_53814, nodes_53816) {

var result_53822 = null;
BeforeRet: do {
if (isObj(self_53814.m_type, NTI51193)) {
result_53822 = concat_54050(self_53814, nodes_53816);
break BeforeRet;
}
else {
if (isObj(self_53814.m_type, NTI51191)) {
result_53822 = concat_54026(self_53814, nodes_53816);
break BeforeRet;
}
else {
if (isObj(self_53814.m_type, NTI51195)) {
result_53822 = concat_53823(self_53814, nodes_53816);
break BeforeRet;
}
else {
if (isObj(self_53814.m_type, NTI51187)) {
result_53822 = concat_53812(self_53814, nodes_53816);
break BeforeRet;
}
}}}
} while (false); 
return result_53822;
}
function clone_54623(self_54625) {

var result_54626 = null;
result_54626 = newvalue_53643(self_54625.value);
return result_54626;
}
function clone_54619(self_54621) {

var result_54622 = null;
result_54622 = self_54621;
return result_54622;
}
function newmap_53012(bindings_53017) {

var result_53018 = null;
result_53018 = newmap_52812();
L1: do {
var key_53028 = null;
var binding_53029 = null;
L2: do {
var h_53034 = 0;
var HEX3Atmp_53036 = 0;
HEX3Atmp_53036 = (bindings_53017.data != null ? (bindings_53017.data.length-1) : -1);
var res_53038 = 0;
L3: do {
L4: while (true) {
if (!(res_53038 <= HEX3Atmp_53036)) break L4;
h_53034 = res_53038;
if (isfilled_47463(bindings_53017.data[h_53034].Field0)) {
key_53028 = bindings_53017.data[h_53034].Field1;
binding_53029 = bindings_53017.data[h_53034].Field2;
makebinding_52605(result_53018, key_53028, binding_53029.val);
}

res_53038 += 1;
}
} while(false);
} while(false);
} while(false);
return result_53018;
}
function clone_54627(self_54629) {

var result_54630 = null;
result_54630 = newmap_53012(self_54629.bindings);
return result_54630;
}
function clone_54639(self_54641) {

var result_54642 = null;
result_54642 = newcurly_53595(self_54641.nodes);
return result_54642;
}
function clone_54635(self_54637) {

var result_54638 = null;
result_54638 = newparen_53557(self_54637.nodes);
return result_54638;
}
function clone_54631(self_54633) {

var result_54634 = null;
result_54634 = newblok_53519(self_54633.nodes);
return result_54634;
}
function clone_54610(self_54612) {

var result_54613 = null;
raiseruntimeexception_51330((makeNimstrLit("Should not happen...").slice(0,-1)).concat(HEX24_51604(self_54612)));
return result_54613;
}
function clone_54615(self_54612) {

var result_54618 = null;
BeforeRet: do {
if (isObj(self_54612.m_type, NTI51172)) {
result_54618 = clone_54623(self_54612);
break BeforeRet;
}
else {
if (isObj(self_54612.m_type, NTI51164)) {
result_54618 = clone_54619(self_54612);
break BeforeRet;
}
else {
if (isObj(self_54612.m_type, NTI51198)) {
result_54618 = clone_54627(self_54612);
break BeforeRet;
}
else {
if (isObj(self_54612.m_type, NTI51193)) {
result_54618 = clone_54639(self_54612);
break BeforeRet;
}
else {
if (isObj(self_54612.m_type, NTI51191)) {
result_54618 = clone_54635(self_54612);
break BeforeRet;
}
else {
if (isObj(self_54612.m_type, NTI51195)) {
result_54618 = clone_54631(self_54612);
break BeforeRet;
}
else {
if (isObj(self_54612.m_type, NTI51124)) {
result_54618 = clone_54610(self_54612);
break BeforeRet;
}
}}}}}}
} while (false); 
return result_54618;
}
function nsuStartsWith(s_36510, prefix_36511) {

var result_36512 = false;
BeforeRet: do {
var i_36513 = 0;
L1: do {
L2: while (true) {
if (!true) break L2;
if ((prefix_36511[i_36513] == 0)) {
result_36512 = true;
break BeforeRet;
}

if (!((s_36510[i_36513] == prefix_36511[i_36513]))) {
result_36512 = false;
break BeforeRet;
}

i_36513 += 1;
}
} while(false);
} while (false); 
return result_36512;
}
function npuParseHex(s_25453, number_25455, number_25455_Idx, start_25456, maxlen_25457) {

var Tmp1;
var result_25458 = 0;
var i_25459 = start_25456;
var founddigit_25460 = false;
if (((s_25453[i_25459] == 48) && ((s_25453[(i_25459 + 1)] == 120) || (s_25453[(i_25459 + 1)] == 88)))) {
i_25459 += 2;
}
else {
if ((s_25453[i_25459] == 35)) {
i_25459 += 1;
}
}
if ((maxlen_25457 == 0)) {
Tmp1 = (s_25453 != null ? s_25453.length-1 : 0);
}
else {
Tmp1 = (i_25459 + maxlen_25457);
}

var last_25479 = Tmp1;
L2: do {
L3: while (true) {
if (!(i_25459 < last_25479)) break L3;
switch (s_25453[i_25459]) {
case 95: 
break;
case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: number_25455[number_25455_Idx] = ((number_25455[number_25455_Idx] << 4) | (s_25453[i_25459] - 48));
founddigit_25460 = true;

break;
case 97: case 98: case 99: case 100: case 101: case 102: number_25455[number_25455_Idx] = ((number_25455[number_25455_Idx] << 4) | ((s_25453[i_25459] - 97) + 10));
founddigit_25460 = true;

break;
case 65: case 66: case 67: case 68: case 69: case 70: number_25455[number_25455_Idx] = ((number_25455[number_25455_Idx] << 4) | ((s_25453[i_25459] - 65) + 10));
founddigit_25460 = true;

break;
default: 
break L2;
break;
}
i_25459 += 1;
}
} while(false);
if (founddigit_25460) {
result_25458 = (i_25459 - start_25456);
}

return result_25458;
}
function nsuEndsWith(s_36531, suffix_36532) {

var result_36533 = false;
BeforeRet: do {
var i_36534 = 0;
var j_36535 = ((s_36531 != null ? s_36531.length-1 : 0) - (suffix_36532 != null ? suffix_36532.length-1 : 0));
L1: do {
L2: while (true) {
if (!((i_36534 + j_36535) < (s_36531 != null ? s_36531.length-1 : 0))) break L2;
if (!((s_36531[(i_36534 + j_36535)] == suffix_36532[i_36534]))) {
result_36533 = false;
break BeforeRet;
}

i_36534 += 1;
}
} while(false);
if ((suffix_36532[i_36534] == 0)) {
result_36533 = true;
break BeforeRet;
}

} while (false); 
return result_36533;
}
function nsuUnescape(s_37917, prefix_37918, suffix_37919) {

var result_37920 = null;
result_37920 = nimCopy(null, mnewString(0), NTI138);
var i_37921 = (prefix_37918 != null ? prefix_37918.length-1 : 0);
if (!(nsuStartsWith(s_37917, prefix_37918))) {
var e_37925 = null;
e_37925 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null};
e_37925.message = nimCopy(null, (makeNimstrLit("String does not start with a prefix of: ").slice(0,-1)).concat(prefix_37918), NTI138);
raiseException(e_37925, "ValueError");
}

L1: do {
L2: while (true) {
if (!true) break L2;
if ((i_37921 == ((s_37917 != null ? s_37917.length-1 : 0) - (suffix_37919 != null ? suffix_37919.length-1 : 0)))) {
break L1;
}

switch (s_37917[i_37921]) {
case 92: switch (s_37917[(i_37921 + 1)]) {
case 120: i_37921 += 2;
var c_37944 = [0];
i_37921 += npuParseHex(s_37917, c_37944, 0, i_37921, 2);
if (result_37920 != null) { addChar(result_37920, c_37944[0]); } else { result_37920 = [c_37944[0], 0]; };
i_37921 -= 2;

break;
case 92: if (result_37920 != null) { addChar(result_37920, 92); } else { result_37920 = [92, 0]; };

break;
case 39: if (result_37920 != null) { addChar(result_37920, 39); } else { result_37920 = [39, 0]; };

break;
case 34: if (result_37920 != null) { addChar(result_37920, 34); } else { result_37920 = [34, 0]; };

break;
default: 
if (result_37920 != null) { result_37920 = (result_37920.slice(0, -1)).concat((makeNimstrLit("\\").slice(0,-1)).concat([s_37917[(i_37921 + 1)], 0])); } else { result_37920 = (makeNimstrLit("\\").slice(0,-1)).concat([s_37917[(i_37921 + 1)], 0]);};
break;
}
i_37921 += 1;

break;
case 0: break L1;

break;
default: 
if (result_37920 != null) { addChar(result_37920, s_37917[i_37921]); } else { result_37920 = [s_37917[i_37921], 0]; };
break;
}
i_37921 += 1;
}
} while(false);
if (!(nsuEndsWith(s_37917, suffix_37919))) {
var e_37985 = null;
e_37985 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null};
e_37985.message = nimCopy(null, (makeNimstrLit("String does not end with a suffix of: ").slice(0,-1)).concat(suffix_37919), NTI138);
raiseException(e_37985, "ValueError");
}

return result_37920;
}
function parsevalue_54663(self_54665, s_54666) {

var Tmp1;
var Tmp2;
var result_54667 = null;
if (!(1 < (s_54666 != null ? s_54666.length-1 : 0))) Tmp2 = false; else {Tmp2 = (s_54666[0] == 34); }if (!Tmp2) Tmp1 = false; else {Tmp1 = (s_54666[((s_54666 != null ? s_54666.length-1 : 0) - 1)] == 34); }if (Tmp1) {
result_54667 = newvalue_53643(nsuUnescape(s_54666, makeNimstrLit("\""), makeNimstrLit("\"")));
}

return result_54667;
}
function nsuIsDigitChar(c_33661) {

var result_33662 = false;
BeforeRet: do {
result_33662 = (SetConstr([48, 57])[c_33661] != undefined);
break BeforeRet;
} while (false); 
return result_33662;
}
function tentothepowerof_19318(b_19320) {

var result_19321 = 0.0;
var b_19322 = b_19320;
var a_19323 = 1.0000000000000000e+01;
result_19321 = 1.0000000000000000e+00;
L1: do {
L2: while (true) {
if (!true) break L2;
if (((b_19322 & 1) == 1)) {
result_19321 = (result_19321 * a_19323);
}

b_19322 = ((b_19322 >>> 0) >>> 1);
if ((b_19322 == 0)) {
break L1;
}

a_19323 = (a_19323 * a_19323);
}
} while(false);
return result_19321;
}
function npuParseFloat(s_26247, number_26249, number_26249_Idx, start_26250) {

var result_26251 = 0;
var bf_26252 = [0.0];
result_26251 = nimParseBiggestFloat(s_26247, bf_26252, 0, start_26250);
if (!((result_26251 == 0))) {
number_26249[number_26249_Idx] = bf_26252[0];
}

return result_26251;
}
function nsuParseFloat(s_35738) {

var Tmp1;
var result_35739 = [0.0];
var L_35741 = npuParseFloat(s_35738, result_35739, 0, 0);
if (!((L_35741 == (s_35738 != null ? s_35738.length-1 : 0)))) Tmp1 = true; else {Tmp1 = (L_35741 == 0); }if (Tmp1) {
var e_35745 = null;
e_35745 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null};
e_35745.message = nimCopy(null, (makeNimstrLit("invalid float: ").slice(0,-1)).concat(s_35738), NTI138);
raiseException(e_35745, "ValueError");
}

return result_35739[0];
}
function parsevalue_54658(self_54660, s_54661) {

var Tmp1;
var result_54662 = null;
BeforeRet: do {
if (!(0 < (s_54661 != null ? s_54661.length-1 : 0))) Tmp1 = false; else {Tmp1 = ((nsuIsDigitChar(s_54661[0]) || (s_54661[0] == 43)) || (s_54661[0] == 45)); }if (Tmp1) {
++excHandler;
try {
result_54662 = newvalue_53638(nsuParseFloat(s_54661));
break BeforeRet;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
if (lastJSError && (isObj(lastJSError.m_type, NTI3446))) {
result_54662 = null;
break BeforeRet;
}
else {
reraiseException();
}
lastJSError = prevJSError;
} finally {
}
}

} while (false); 
return result_54662;
}
function rawparseint_25957(s_25959, b_25961, b_25961_Idx, start_25962) {

var result_25963 = 0;
var sign_25964 = -1;
var i_25965 = start_25962;
if ((s_25959[i_25965] == 43)) {
i_25965 = addInt(i_25965, 1);
}
else {
if ((s_25959[i_25965] == 45)) {
i_25965 = addInt(i_25965, 1);
sign_25964 = 1;
}
}
if ((SetConstr([48, 57])[s_25959[i_25965]] != undefined)) {
b_25961[b_25961_Idx] = 0;
L1: do {
L2: while (true) {
if (!(SetConstr([48, 57])[s_25959[i_25965]] != undefined)) break L2;
b_25961[b_25961_Idx] = subInt(mulInt(b_25961[b_25961_Idx], 10), subInt(s_25959[i_25965], 48));
i_25965 = addInt(i_25965, 1);
L3: do {
L4: while (true) {
if (!(s_25959[i_25965] == 95)) break L4;
i_25965 = addInt(i_25965, 1);
}
} while(false);
}
} while(false);
b_25961[b_25961_Idx] = mulInt(b_25961[b_25961_Idx], sign_25964);
result_25963 = subInt(i_25965, start_25962);
}

return result_25963;
}
function npuParseBiggestInt(s_26046, number_26048, number_26048_Idx, start_26049) {

var result_26050 = 0;
var res_26051 = [0];
result_26050 = rawparseint_25957(s_26046, res_26051, 0, start_26049);
number_26048[number_26048_Idx] = res_26051[0];
return result_26050;
}
function npuParseInt(s_26056, number_26058, number_26058_Idx, start_26059) {

var Tmp1;
var Tmp2;
var result_26060 = 0;
var res_26061 = [0];
result_26060 = npuParseBiggestInt(s_26056, res_26061, 0, start_26059);
if (!true) Tmp1 = false; else {if ((res_26061[0] < -2147483648)) Tmp2 = true; else {Tmp2 = (2147483647 < res_26061[0]); }Tmp1 = Tmp2; }if (Tmp1) {
var e_26071 = null;
e_26071 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_26071.message = nimCopy(null, makeNimstrLit("overflow"), NTI138);
raiseException(e_26071, "OverflowError");
}
else {
if (!((result_26060 == 0))) {
number_26058[number_26058_Idx] = res_26061[0];
}
}
return result_26060;
}
function nsuParseInt(s_35658) {

var Tmp1;
var result_35659 = [0];
var L_35661 = npuParseInt(s_35658, result_35659, 0, 0);
if (!((L_35661 == (s_35658 != null ? s_35658.length-1 : 0)))) Tmp1 = true; else {Tmp1 = (L_35661 == 0); }if (Tmp1) {
var e_35665 = null;
e_35665 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null};
e_35665.message = nimCopy(null, (makeNimstrLit("invalid integer: ").slice(0,-1)).concat(s_35658), NTI138);
raiseException(e_35665, "ValueError");
}

return result_35659[0];
}
function parsevalue_54653(self_54655, s_54656) {

var Tmp1;
var result_54657 = null;
BeforeRet: do {
if (!(0 < (s_54656 != null ? s_54656.length-1 : 0))) Tmp1 = false; else {Tmp1 = ((nsuIsDigitChar(s_54656[0]) || (s_54656[0] == 43)) || (s_54656[0] == 45)); }if (Tmp1) {
++excHandler;
try {
result_54657 = newvalue_53633(nsuParseInt(s_54656));
break BeforeRet;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
if (lastJSError && (isObj(lastJSError.m_type, NTI3446))) {
result_54657 = null;
break BeforeRet;
}
else {
reraiseException();
}
lastJSError = prevJSError;
} finally {
}
}

} while (false); 
return result_54657;
}
function parsevalue_59008(self_59010, s_59011) {

var Tmp1;
var result_59012 = null;
if (!eqStrings(HEX5BHEX5D_20244(s_59011, HEX2EHEX2E_36461(0, 2)), makeNimstrLit("\'\'\'"))) Tmp1 = false; else {Tmp1 = eqStrings(HEX5BHEX5D_20244(s_59011, HEX2EHEX2E_36461(((s_59011 != null ? s_59011.length-1 : 0) - 3), ((s_59011 != null ? s_59011.length-1 : 0) - 1))), makeNimstrLit("\'\'\'")); }if (Tmp1) {
result_59012 = newvalue_53643(HEX5BHEX5D_20244(s_59011, HEX2EHEX2E_36461(3, ((s_59011 != null ? s_59011.length-1 : 0) - 4))));
}

return result_59012;
}
function parsevalue_54643(self_54645, s_54646) {

var result_54647 = null;
return result_54647;
}
function parsevalue_54649(self_54645, s_54646) {

var result_54652 = null;
BeforeRet: do {
if (isObj(self_54645.m_type, NTI51122)) {
result_54652 = parsevalue_54663(self_54645, s_54646);
break BeforeRet;
}
else {
if (isObj(self_54645.m_type, NTI51120)) {
result_54652 = parsevalue_54658(self_54645, s_54646);
break BeforeRet;
}
else {
if (isObj(self_54645.m_type, NTI51118)) {
result_54652 = parsevalue_54653(self_54645, s_54646);
break BeforeRet;
}
else {
if (isObj(self_54645.m_type, NTI59004)) {
result_54652 = parsevalue_59008(self_54645, s_54646);
break BeforeRet;
}
else {
if (isObj(self_54645.m_type, NTI51115)) {
result_54652 = parsevalue_54643(self_54645, s_54646);
break BeforeRet;
}
}}}}
} while (false); 
return result_54652;
}
function prefixlength_54699(self_54701) {

var result_54702 = 0;
result_54702 = 1;
return result_54702;
}
function prefixlength_54668(self_54670) {

var result_54671 = 0;
result_54671 = 0;
return result_54671;
}
function prefixlength_54673(self_54670) {

var result_54676 = 0;
BeforeRet: do {
if (isObj(self_54670.m_type, NTI51122)) {
result_54676 = prefixlength_54699(self_54670);
break BeforeRet;
}
else {
if (isObj(self_54670.m_type, NTI51115)) {
result_54676 = prefixlength_54668(self_54670);
break BeforeRet;
}
}
} while (false); 
return result_54676;
}
function tokenready_59053(self_59055, token_59056, c_59057) {

var Tmp1;
var Tmp2;
var result_59058 = null;
BeforeRet: do {
if (!(c_59057 == 39)) Tmp2 = false; else {Tmp2 = (4 < (token_59056 != null ? token_59056.length-1 : 0)); }if (!Tmp2) Tmp1 = false; else {Tmp1 = eqStrings(HEX5BHEX5D_20244(token_59056, HEX2EHEX2E_36461(((token_59056 != null ? token_59056.length-1 : 0) - 2), ((token_59056 != null ? token_59056.length-1 : 0) - 1))), makeNimstrLit("\'\'")); }if (Tmp1) {
result_59058 = nimCopy(null, (token_59056.slice(0,-1)).concat([c_59057, 0]), NTI138);
break BeforeRet;
}
else {
result_59058 = nimCopy(null, null, NTI138);
break BeforeRet;
}

} while (false); 
return result_59058;
}
function tokenready_54709(self_54711, token_54712, ch_54713) {

var Tmp1;
var result_54714 = null;
BeforeRet: do {
if (!(ch_54713 == 34)) Tmp1 = false; else {Tmp1 = !((token_54712[((token_54712 != null ? token_54712.length-1 : 0) - 1)] == 92)); }if (Tmp1) {
result_54714 = nimCopy(null, (token_54712.slice(0,-1)).concat([ch_54713, 0]), NTI138);
break BeforeRet;
}
else {
result_54714 = nimCopy(null, null, NTI138);
break BeforeRet;
}

} while (false); 
return result_54714;
}
function tokenready_54677(self_54679, token_54680, ch_54681) {

var result_54682 = null;
return result_54682;
}
function tokenready_54684(self_54679, token_54680, ch_54681) {

var result_54687 = null;
BeforeRet: do {
if (isObj(self_54679.m_type, NTI59004)) {
result_54687 = tokenready_59053(self_54679, token_54680, ch_54681);
break BeforeRet;
}
else {
if (isObj(self_54679.m_type, NTI51122)) {
result_54687 = tokenready_54709(self_54679, token_54680, ch_54681);
break BeforeRet;
}
else {
if (isObj(self_54679.m_type, NTI51115)) {
result_54687 = tokenready_54677(self_54679, token_54680, ch_54681);
break BeforeRet;
}
}}
} while (false); 
return result_54687;
}
function tokenstart_54703(self_54705, token_54706, ch_54707) {

var result_54708 = false;
result_54708 = (ch_54707 == 34);
return result_54708;
}
function tokenstart_59047(self_59049, s_59050, c_59051) {

var result_59052 = false;
result_59052 = (eqStrings(s_59050, makeNimstrLit("\'\'")) && (c_59051 == 39));
return result_59052;
}
function tokenstart_54688(self_54690, token_54691, ch_54692) {

var result_54693 = false;
result_54693 = false;
return result_54693;
}
function tokenstart_54695(self_54690, token_54691, ch_54692) {

var result_54698 = false;
BeforeRet: do {
if (isObj(self_54690.m_type, NTI51122)) {
result_54698 = tokenstart_54703(self_54690, token_54691, ch_54692);
break BeforeRet;
}
else {
if (isObj(self_54690.m_type, NTI51115)) {
result_54698 = tokenstart_59047(self_54690, token_54691, ch_54692);
break BeforeRet;
}
else {
if (isObj(self_54690.m_type, NTI51115)) {
result_54698 = tokenstart_54688(self_54690, token_54691, ch_54692);
break BeforeRet;
}
}}
} while (false); 
return result_54698;
}
function makebinding_56486(self_56488, key_56489, val_56490) {

var result_56491 = null;
if ((self_56488.locals === null)) {
self_56488.locals = newmap_52812();
}

result_56491 = makebinding_52605(self_56488.locals, key_56489, val_56490);
return result_56491;
}
function makebinding_56475(self_56477, key_56478, val_56479) {

var result_56480 = null;
raiseruntimeexception_51330(makeNimstrLit("This activation should not be called with makeBinding"));
return result_56480;
}
function makebinding_56482(self_56477, key_56478, val_56479) {

var result_56485 = null;
BeforeRet: do {
if (isObj(self_56477.m_type, NTI55643)) {
result_56485 = makebinding_56486(self_56477, key_56478, val_56479);
break BeforeRet;
}
else {
if (isObj(self_56477.m_type, NTI55635)) {
result_56485 = makebinding_56475(self_56477, key_56478, val_56479);
break BeforeRet;
}
}
} while (false); 
return result_56485;
}
function makelocalbinding_56615(spry_56617, key_56618, val_56619) {

var Tmp6;
var Tmp7;
var result_56620 = null;
BeforeRet: do {
L1: do {
var activation_56621 = null;
var HEX3Atmp_56623 = null;
HEX3Atmp_56623 = spry_56617.currentactivation;
var activation_56627 = HEX3Atmp_56623;
L2: do {
L3: while (true) {
if (!!((activation_56627 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(!(isObj(activation_56627.m_type, NTI55648)))) break L5;
if (isObj(activation_56627.m_type, NTI55646)) {
Tmp6 = activation_56627.body.parent;
}
else {
Tmp6 = activation_56627.parent;
}

activation_56627 = Tmp6;
}
} while(false);
activation_56621 = activation_56627;
result_56620 = makebinding_56482(activation_56621, key_56618, val_56619);
break BeforeRet;
if (isObj(activation_56627.m_type, NTI55646)) {
Tmp7 = activation_56627.body.parent;
}
else {
Tmp7 = activation_56627.parent;
}

activation_56627 = Tmp7;
}
} while(false);
} while(false);
} while (false); 
return result_56620;
}
function setlocalbinding_56631(spry_56633, key_56634, value_56635) {

var result_56636 = null;
result_56636 = lookup_56332(spry_56633, key_56634);
if (!((result_56636 === null))) {
result_56636.val = value_56635;
}
else {
result_56636 = makelocalbinding_56615(spry_56633, key_56634, value_56635);
}

return result_56636;
}
function eval_56965(self_56967, spry_56968) {

var result_56969 = null;
result_56969 = next_56243(argparent_56427(spry_56968));
setlocalbinding_56631(spry_56968, self_56967, result_56969);
return result_56969;
}
function eval_57029(self_57031, spry_57032) {

var result_57033 = null;
result_57033 = self_57031;
return result_57033;
}
function eval_56970(self_56972, spry_56973) {

var result_56974 = null;
result_56974 = self_56972.primitive(spry_56973);
return result_56974;
}
function newactivation_55867(body_55869) {

var result_55870 = null;
result_55870 = {body: body_55869, m_type: NTI55648, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};
return result_55870;
}
function eval_57013(self_57015, spry_57016) {

var result_57017 = null;
result_57017 = eval_56975(newactivation_55867(self_57015), spry_57016);
return result_57017;
}
function newactivation_55872(body_55874) {

var result_55875 = null;
result_55875 = {body: body_55874, m_type: NTI55650, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};
result_55875.locals = newmap_52812();
return result_55875;
}
function eval_57018(self_57020, spry_57021) {

var result_57022 = null;
BeforeRet: do {
var activation_57023 = newactivation_55872(self_57020);
eval_56975(activation_57023, spry_57021);
activation_57023.returned = true;
result_57022 = activation_57023.locals;
break BeforeRet;
} while (false); 
return result_57022;
}
function eval_57034(self_57036, spry_57037) {

var result_57038 = null;
result_57038 = self_57036;
return result_57038;
}
function eval_56952(self_56954, spry_56955) {

var result_56956 = null;
result_56956 = self_56954;
return result_56956;
}
function eval_69023(self_69025, spry_69026) {

var result_69027 = null;
BeforeRet: do {
var receiver_69028 = evalarginfix_56659(spry_69026);
if ((receiver_69028 === null)) {
result_69027 = spry_69026.nilval;
break BeforeRet;
}

var tags_69037 = receiver_69028.tags;
if ((tags_69037 === null)) {
result_69027 = spry_69026.nilval;
break BeforeRet;
}

var nodetags_69046 = nimCopy(null, tags_69037.nodes, NTI51188);
if ((nodetags_69046 === null)) {
result_69027 = spry_69026.nilval;
break BeforeRet;
}

L1: do {
var n_69063 = null;
var HEX3Atmp_69092 = null;
HEX3Atmp_69092 = self_69025.nodes;
var i_69095 = 0;
var L_69097 = (HEX3Atmp_69092 != null ? HEX3Atmp_69092.length : 0);
L2: do {
L3: while (true) {
if (!(i_69095 < L_69097)) break L3;
n_69063 = HEX3Atmp_69092[i_69095];
var funtags_69064 = nimCopy(null, n_69063.tags.nodes, NTI51188);
L4: do {
var nt_69073 = null;
var i_69089 = 0;
var L_69091 = (nodetags_69046 != null ? nodetags_69046.length : 0);
L5: do {
L6: while (true) {
if (!(i_69089 < L_69091)) break L6;
nt_69073 = nodetags_69046[i_69089];
if (contains_53745(funtags_69064, nt_69073)) {
result_69027 = eval_55719(n_69063, spry_69026);
break BeforeRet;
}

i_69089 += 1;
}
} while(false);
} while(false);
i_69095 += 1;
}
} while(false);
} while(false);
result_69027 = spry_69026.nilval;
break BeforeRet;
} while (false); 
return result_69027;
}
function newactivation_55857(funk_55859) {

var result_55860 = null;
result_55860 = {body: funk_55859, m_type: NTI55646, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};
return result_55860;
}
function setself_56675(spry_56677) {

var result_56678 = null;
result_56678 = evalarginfix_56659(spry_56677);
if ((result_56678 === null)) {
spry_56677.currentactivation.self = spry_56677.nilval;
result_56678 = spry_56677.nilval;
}
else {
spry_56677.currentactivation.self = result_56678;
}

return result_56678;
}
function eval_57007(self_57009, spry_57010) {

var result_57011 = null;
var act_57012 = newactivation_55857(self_57009);
setself_56675(spry_57010);
result_57011 = eval_56975(act_57012, spry_57010);
return result_57011;
}
function eval_57002(self_57004, spry_57005) {

var result_57006 = null;
result_57006 = eval_56975(newactivation_55857(self_57004), spry_57005);
return result_57006;
}
function eval_57024(self_57026, spry_57027) {

var result_57028 = null;
result_57028 = self_57026;
return result_57028;
}
function eval_57039(self_57041, spry_57042) {

var result_57043 = null;
result_57043 = eval_55719(self_57041.val, spry_57042);
return result_57043;
}
function eval_56957(self_56959, spry_56960) {

var result_56961 = null;
var previousactivation_56962 = argparent_56427(spry_56960);
var arg_56963 = next_56243(previousactivation_56962);
var here_56964 = spry_56960.currentactivation;
spry_56960.currentactivation = previousactivation_56962;
result_56961 = eval_55719(arg_56963, spry_56960);
spry_56960.currentactivation = here_56964;
setlocalbinding_56631(spry_56960, self_56959, result_56961);
return result_56961;
}
function lookup_56318(self_56320, key_56321) {

var result_56322 = null;
BeforeRet: do {
if (!((self_56320.locals === null))) {
result_56322 = lookup_52178(self_56320.locals, key_56321);
break BeforeRet;
}

} while (false); 
return result_56322;
}
function lookup_56308(self_56310, key_56311) {

var result_56312 = null;
return result_56312;
}
function lookup_56314(self_56310, key_56311) {

var result_56317 = null;
BeforeRet: do {
if (isObj(self_56310.m_type, NTI55643)) {
result_56317 = lookup_56318(self_56310, key_56311);
break BeforeRet;
}
else {
if (isObj(self_56310.m_type, NTI55635)) {
result_56317 = lookup_56308(self_56310, key_56311);
break BeforeRet;
}
}
} while (false); 
return result_56317;
}
function lookupparent_56449(spry_56451, key_56452) {

var Tmp6;
var Tmp7;
var result_56453 = null;
BeforeRet: do {
var inparent_56454 = false;
L1: do {
var activation_56455 = null;
var HEX3Atmp_56467 = null;
HEX3Atmp_56467 = spry_56451.currentactivation;
var activation_56471 = HEX3Atmp_56467;
L2: do {
L3: while (true) {
if (!!((activation_56471 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(!(isObj(activation_56471.m_type, NTI55648)))) break L5;
if (isObj(activation_56471.m_type, NTI55646)) {
Tmp6 = activation_56471.body.parent;
}
else {
Tmp6 = activation_56471.parent;
}

activation_56471 = Tmp6;
}
} while(false);
activation_56455 = activation_56471;
if (inparent_56454) {
var hit_56456 = lookup_56314(activation_56455, key_56452);
if (!((hit_56456 === null))) {
result_56453 = hit_56456;
break BeforeRet;
}

}
else {
inparent_56454 = true;
}

if (isObj(activation_56471.m_type, NTI55646)) {
Tmp7 = activation_56471.body.parent;
}
else {
Tmp7 = activation_56471.parent;
}

activation_56471 = Tmp7;
}
} while(false);
} while(false);
} while (false); 
return result_56453;
}
function eval_56882(self_56884, spry_56885) {

var Tmp1;
var result_56886 = null;
var hit_56887 = lookupparent_56449(spry_56885, self_56884);
if ((hit_56887 === null)) {
Tmp1 = spry_56885.undefval;
}
else {
Tmp1 = hit_56887.val;
}

result_56886 = Tmp1;
return result_56886;
}
function lookupself_56441(spry_56443, key_56444) {

var result_56445 = null;
BeforeRet: do {
var self_56446 = spry_56443.currentactivation.self;
if (isObj(self_56446.m_type, NTI51198)) {
result_56445 = lookup_52178(self_56446, key_56444);
break BeforeRet;
}

} while (false); 
return result_56445;
}
function eval_56868(self_56870, spry_56871) {

var Tmp1;
var result_56872 = null;
var hit_56873 = lookupself_56441(spry_56871, self_56870);
if ((hit_56873 === null)) {
Tmp1 = spry_56871.undefval;
}
else {
Tmp1 = hit_56873.val;
}

result_56872 = Tmp1;
return result_56872;
}
function eval_56840(self_56842, spry_56843) {

var Tmp1;
var result_56844 = null;
var hit_56845 = lookup_56332(spry_56843, self_56842);
if ((hit_56845 === null)) {
Tmp1 = spry_56843.undefval;
}
else {
Tmp1 = hit_56845.val;
}

result_56844 = Tmp1;
return result_56844;
}
function eval_56854(self_56856, spry_56857) {

var Tmp1;
var result_56858 = null;
var hit_56859 = lookup_56332(spry_56857, self_56856);
if ((hit_56859 === null)) {
Tmp1 = spry_56857.undefval;
}
else {
Tmp1 = hit_56859.val;
}

result_56858 = Tmp1;
return result_56858;
}
function eval_56938(self_56940, spry_56941) {

var Tmp1;
var result_56942 = null;
var hit_56943 = lookupparent_56449(spry_56941, self_56940);
if ((hit_56943 === null)) {
Tmp1 = spry_56941.undefval;
}
else {
Tmp1 = eval_55719(hit_56943.val, spry_56941);
}

result_56942 = Tmp1;
return result_56942;
}
function eval_56924(self_56926, spry_56927) {

var Tmp1;
var result_56928 = null;
var hit_56929 = lookupself_56441(spry_56927, self_56926);
if ((hit_56929 === null)) {
Tmp1 = spry_56927.undefval;
}
else {
Tmp1 = eval_55719(hit_56929.val, spry_56927);
}

result_56928 = Tmp1;
return result_56928;
}
function eval_56896(self_56898, spry_56899) {

var Tmp1;
var result_56900 = null;
var hit_56901 = lookup_56332(spry_56899, self_56898);
if ((hit_56901 === null)) {
Tmp1 = spry_56899.undefval;
}
else {
Tmp1 = eval_55719(hit_56901.val, spry_56899);
}

result_56900 = Tmp1;
return result_56900;
}
function eval_56910(self_56912, spry_56913) {

var Tmp1;
var result_56914 = null;
var hit_56915 = lookup_56332(spry_56913, self_56912);
if ((hit_56915 === null)) {
Tmp1 = spry_56913.undefval;
}
else {
Tmp1 = eval_55719(hit_56915.val, spry_56913);
}

result_56914 = Tmp1;
return result_56914;
}
function eval_56826(self_56828, spry_56829) {

var result_56830 = null;
BeforeRet: do {
var binding_56831 = lookup_56332(spry_56829, self_56828);
if ((binding_56831 === null)) {
raiseruntimeexception_51330((makeNimstrLit("Word not found: ").slice(0,-1)).concat(HEX24_51604(self_56828)));
}

result_56830 = eval_55719(binding_56831.val, spry_56829);
break BeforeRet;
} while (false); 
return result_56830;
}
function eval_55714(self_55716, spry_55717) {

var result_56825 = null;
raiseruntimeexception_51330((makeNimstrLit("Should not happen ").slice(0,-1)).concat(HEX24_51604(self_55716)));
return result_56825;
}
function eval_55719(self_55716, spry_55717) {

var result_56825 = null;
BeforeRet: do {
if (isObj(self_55716.m_type, NTI51156)) {
result_56825 = eval_56965(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51164)) {
result_56825 = eval_57029(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI55624)) {
result_56825 = eval_56970(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51191)) {
result_56825 = eval_57013(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51193)) {
result_56825 = eval_57018(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51198)) {
result_56825 = eval_57034(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51134)) {
result_56825 = eval_56952(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI69004)) {
result_56825 = eval_69023(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI55633)) {
result_56825 = eval_57007(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI55629)) {
result_56825 = eval_57002(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51195)) {
result_56825 = eval_57024(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51224)) {
result_56825 = eval_57039(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51145)) {
result_56825 = eval_56957(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51154)) {
result_56825 = eval_56882(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51152)) {
result_56825 = eval_56868(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51149)) {
result_56825 = eval_56840(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51147)) {
result_56825 = eval_56854(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51143)) {
result_56825 = eval_56938(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51141)) {
result_56825 = eval_56924(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51138)) {
result_56825 = eval_56896(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51136)) {
result_56825 = eval_56910(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51127)) {
result_56825 = eval_56826(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51124)) {
result_56825 = eval_55714(self_55716, spry_55717);
break BeforeRet;
}
else {
if (isObj(self_55716.m_type, NTI51124)) {
result_56825 = eval_55714(self_55716, spry_55717);
break BeforeRet;
}
}}}}}}}}}}}}}}}}}}}}}}}
} while (false); 
return result_56825;
}
function evaldo_57054(self_57056, spry_57057) {

var result_57058 = null;
result_57058 = eval_56975(newactivation_55867(self_57056), spry_57057);
return result_57058;
}
function evaldo_57049(self_57051, spry_57052) {

var result_57053 = null;
result_57053 = eval_56975(newactivation_55862(self_57051), spry_57052);
return result_57053;
}
function evaldo_57059(self_57061, spry_57062) {

var result_57063 = null;
result_57063 = eval_56975(newactivation_55872(self_57061), spry_57062);
return result_57063;
}
function evaldo_55721(self_55723, spry_55724) {

var result_57048 = null;
raiseruntimeexception_51330(makeNimstrLit("Do only works for sequences"));
return result_57048;
}
function evaldo_55726(self_55723, spry_55724) {

var result_57048 = null;
BeforeRet: do {
if (isObj(self_55723.m_type, NTI51191)) {
result_57048 = evaldo_57054(self_55723, spry_55724);
break BeforeRet;
}
else {
if (isObj(self_55723.m_type, NTI51195)) {
result_57048 = evaldo_57049(self_55723, spry_55724);
break BeforeRet;
}
else {
if (isObj(self_55723.m_type, NTI51193)) {
result_57048 = evaldo_57059(self_55723, spry_55724);
break BeforeRet;
}
else {
if (isObj(self_55723.m_type, NTI51124)) {
result_57048 = evaldo_55721(self_55723, spry_55724);
break BeforeRet;
}
else {
if (isObj(self_55723.m_type, NTI51124)) {
result_57048 = evaldo_55721(self_55723, spry_55724);
break BeforeRet;
}
}}}}
} while (false); 
return result_57048;
}
function HEX2B_55971(a_55973, b_55974) {

var result_55975 = null;
result_55975 = newvalue_53638((a_55973.value + b_55974.value));
return result_55975;
}
function HEX2B_55965(a_55967, b_55968) {

var result_55969 = null;
result_55969 = newvalue_53638((a_55967.value + b_55968.value));
return result_55969;
}
function HEX2B_55960(a_55962, b_55963) {

var result_55964 = null;
result_55964 = newvalue_53633((a_55962.value + b_55963.value));
return result_55964;
}
function HEX2B_55977(a_55979, b_55980) {

var result_55981 = null;
result_55981 = newvalue_53638((a_55979.value + b_55980.value));
return result_55981;
}
function HEX2B_55950(a_55952, b_55953) {

var result_55954 = null;
raiseruntimeexception_51330((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_51604(a_55952).slice(0,-1),makeNimstrLit(" + ").slice(0,-1),HEX24_51604(b_55953)));
return result_55954;
}
function HEX2B_55956(a_55952, b_55953) {

var result_55959 = null;
BeforeRet: do {
if ((isObj(a_55952.m_type, NTI51169) & isObj(b_55953.m_type, NTI51166))) {
result_55959 = HEX2B_55971(a_55952, b_55953);
break BeforeRet;
}
else {
if ((isObj(a_55952.m_type, NTI51166) & isObj(b_55953.m_type, NTI51169))) {
result_55959 = HEX2B_55965(a_55952, b_55953);
break BeforeRet;
}
else {
if ((isObj(a_55952.m_type, NTI51166) & isObj(b_55953.m_type, NTI51166))) {
result_55959 = HEX2B_55960(a_55952, b_55953);
break BeforeRet;
}
else {
if ((isObj(a_55952.m_type, NTI51169) & isObj(b_55953.m_type, NTI51169))) {
result_55959 = HEX2B_55977(a_55952, b_55953);
break BeforeRet;
}
else {
if ((isObj(a_55952.m_type, NTI51124) & isObj(b_55953.m_type, NTI51124))) {
result_55959 = HEX2B_55950(a_55952, b_55953);
break BeforeRet;
}
}}}}
} while (false); 
return result_55959;
}
function HEX2D_56003(a_56005, b_56006) {

var result_56007 = null;
result_56007 = newvalue_53638((a_56005.value - b_56006.value));
return result_56007;
}
function HEX2D_55997(a_55999, b_56000) {

var result_56001 = null;
result_56001 = newvalue_53638((a_55999.value - b_56000.value));
return result_56001;
}
function HEX2D_55992(a_55994, b_55995) {

var result_55996 = null;
result_55996 = newvalue_53633((a_55994.value - b_55995.value));
return result_55996;
}
function HEX2D_56009(a_56011, b_56012) {

var result_56013 = null;
result_56013 = newvalue_53638((a_56011.value - b_56012.value));
return result_56013;
}
function HEX2D_55982(a_55984, b_55985) {

var result_55986 = null;
raiseruntimeexception_51330((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_51604(a_55984).slice(0,-1),makeNimstrLit(" - ").slice(0,-1),HEX24_51604(b_55985)));
return result_55986;
}
function HEX2D_55988(a_55984, b_55985) {

var result_55991 = null;
BeforeRet: do {
if ((isObj(a_55984.m_type, NTI51169) & isObj(b_55985.m_type, NTI51166))) {
result_55991 = HEX2D_56003(a_55984, b_55985);
break BeforeRet;
}
else {
if ((isObj(a_55984.m_type, NTI51166) & isObj(b_55985.m_type, NTI51169))) {
result_55991 = HEX2D_55997(a_55984, b_55985);
break BeforeRet;
}
else {
if ((isObj(a_55984.m_type, NTI51166) & isObj(b_55985.m_type, NTI51166))) {
result_55991 = HEX2D_55992(a_55984, b_55985);
break BeforeRet;
}
else {
if ((isObj(a_55984.m_type, NTI51169) & isObj(b_55985.m_type, NTI51169))) {
result_55991 = HEX2D_56009(a_55984, b_55985);
break BeforeRet;
}
else {
if ((isObj(a_55984.m_type, NTI51124) & isObj(b_55985.m_type, NTI51124))) {
result_55991 = HEX2D_55982(a_55984, b_55985);
break BeforeRet;
}
}}}}
} while (false); 
return result_55991;
}
function HEX2A_56035(a_56037, b_56038) {

var result_56039 = null;
result_56039 = newvalue_53638((a_56037.value * b_56038.value));
return result_56039;
}
function HEX2A_56029(a_56031, b_56032) {

var result_56033 = null;
result_56033 = newvalue_53638((a_56031.value * b_56032.value));
return result_56033;
}
function HEX2A_56024(a_56026, b_56027) {

var result_56028 = null;
result_56028 = newvalue_53633((a_56026.value * b_56027.value));
return result_56028;
}
function HEX2A_56041(a_56043, b_56044) {

var result_56045 = null;
result_56045 = newvalue_53638((a_56043.value * b_56044.value));
return result_56045;
}
function HEX2A_56014(a_56016, b_56017) {

var result_56018 = null;
raiseruntimeexception_51330((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_51604(a_56016).slice(0,-1),makeNimstrLit(" * ").slice(0,-1),HEX24_51604(b_56017)));
return result_56018;
}
function HEX2A_56020(a_56016, b_56017) {

var result_56023 = null;
BeforeRet: do {
if ((isObj(a_56016.m_type, NTI51169) & isObj(b_56017.m_type, NTI51166))) {
result_56023 = HEX2A_56035(a_56016, b_56017);
break BeforeRet;
}
else {
if ((isObj(a_56016.m_type, NTI51166) & isObj(b_56017.m_type, NTI51169))) {
result_56023 = HEX2A_56029(a_56016, b_56017);
break BeforeRet;
}
else {
if ((isObj(a_56016.m_type, NTI51166) & isObj(b_56017.m_type, NTI51166))) {
result_56023 = HEX2A_56024(a_56016, b_56017);
break BeforeRet;
}
else {
if ((isObj(a_56016.m_type, NTI51169) & isObj(b_56017.m_type, NTI51169))) {
result_56023 = HEX2A_56041(a_56016, b_56017);
break BeforeRet;
}
else {
if ((isObj(a_56016.m_type, NTI51124) & isObj(b_56017.m_type, NTI51124))) {
result_56023 = HEX2A_56014(a_56016, b_56017);
break BeforeRet;
}
}}}}
} while (false); 
return result_56023;
}
function HEX2F_56067(a_56069, b_56070) {

var result_56071 = null;
result_56071 = newvalue_53638((a_56069.value / b_56070.value));
return result_56071;
}
function HEX2F_56061(a_56063, b_56064) {

var result_56065 = null;
result_56065 = newvalue_53638((a_56063.value / b_56064.value));
return result_56065;
}
function HEX2F_20207(x_20209, y_20210) {

var result_20211 = 0.0;
result_20211 = (x_20209 / y_20210);
return result_20211;
}
function HEX2F_56056(a_56058, b_56059) {

var result_56060 = null;
result_56060 = newvalue_53638(HEX2F_20207(a_56058.value, b_56059.value));
return result_56060;
}
function HEX2F_56073(a_56075, b_56076) {

var result_56077 = null;
result_56077 = newvalue_53638((a_56075.value / b_56076.value));
return result_56077;
}
function HEX2F_56046(a_56048, b_56049) {

var result_56050 = null;
raiseruntimeexception_51330((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_51604(a_56048).slice(0,-1),makeNimstrLit(" / ").slice(0,-1),HEX24_51604(b_56049)));
return result_56050;
}
function HEX2F_56052(a_56048, b_56049) {

var result_56055 = null;
BeforeRet: do {
if ((isObj(a_56048.m_type, NTI51169) & isObj(b_56049.m_type, NTI51166))) {
result_56055 = HEX2F_56067(a_56048, b_56049);
break BeforeRet;
}
else {
if ((isObj(a_56048.m_type, NTI51166) & isObj(b_56049.m_type, NTI51169))) {
result_56055 = HEX2F_56061(a_56048, b_56049);
break BeforeRet;
}
else {
if ((isObj(a_56048.m_type, NTI51166) & isObj(b_56049.m_type, NTI51166))) {
result_56055 = HEX2F_56056(a_56048, b_56049);
break BeforeRet;
}
else {
if ((isObj(a_56048.m_type, NTI51169) & isObj(b_56049.m_type, NTI51169))) {
result_56055 = HEX2F_56073(a_56048, b_56049);
break BeforeRet;
}
else {
if ((isObj(a_56048.m_type, NTI51124) & isObj(b_56049.m_type, NTI51124))) {
result_56055 = HEX2F_56046(a_56048, b_56049);
break BeforeRet;
}
}}}}
} while (false); 
return result_56055;
}
function HEX3C_56088(a_56090, b_56091) {

var result_56092 = null;
result_56092 = newvalue_53648((a_56090.value < b_56091.value));
return result_56092;
}
function HEX3C_56099(a_56101, b_56102) {

var result_56103 = null;
result_56103 = newvalue_53648((a_56101.value < b_56102.value));
return result_56103;
}
function HEX3C_56093(a_56095, b_56096) {

var result_56097 = null;
result_56097 = newvalue_53648((a_56095.value < b_56096.value));
return result_56097;
}
function HEX3C_56110(a_56112, b_56113) {

var result_56114 = null;
result_56114 = newvalue_53648((cmpStrings(a_56112.value, b_56113.value) < 0));
return result_56114;
}
function HEX3C_56105(a_56107, b_56108) {

var result_56109 = null;
result_56109 = newvalue_53648((a_56107.value < b_56108.value));
return result_56109;
}
function HEX3C_56078(a_56080, b_56081) {

var result_56082 = null;
raiseruntimeexception_51330((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_51604(a_56080).slice(0,-1),makeNimstrLit(" < ").slice(0,-1),HEX24_51604(b_56081)));
return result_56082;
}
function HEX3C_56084(a_56080, b_56081) {

var result_56087 = null;
BeforeRet: do {
if ((isObj(a_56080.m_type, NTI51166) & isObj(b_56081.m_type, NTI51166))) {
result_56087 = HEX3C_56088(a_56080, b_56081);
break BeforeRet;
}
else {
if ((isObj(a_56080.m_type, NTI51169) & isObj(b_56081.m_type, NTI51166))) {
result_56087 = HEX3C_56099(a_56080, b_56081);
break BeforeRet;
}
else {
if ((isObj(a_56080.m_type, NTI51166) & isObj(b_56081.m_type, NTI51169))) {
result_56087 = HEX3C_56093(a_56080, b_56081);
break BeforeRet;
}
else {
if ((isObj(a_56080.m_type, NTI51172) & isObj(b_56081.m_type, NTI51172))) {
result_56087 = HEX3C_56110(a_56080, b_56081);
break BeforeRet;
}
else {
if ((isObj(a_56080.m_type, NTI51169) & isObj(b_56081.m_type, NTI51169))) {
result_56087 = HEX3C_56105(a_56080, b_56081);
break BeforeRet;
}
else {
if ((isObj(a_56080.m_type, NTI51124) & isObj(b_56081.m_type, NTI51124))) {
result_56087 = HEX3C_56078(a_56080, b_56081);
break BeforeRet;
}
}}}}}
} while (false); 
return result_56087;
}
function HEX3CHEX3D_56125(a_56127, b_56128) {

var result_56129 = null;
result_56129 = newvalue_53648((a_56127.value <= b_56128.value));
return result_56129;
}
function HEX3CHEX3D_56136(a_56138, b_56139) {

var result_56140 = null;
result_56140 = newvalue_53648((a_56138.value <= b_56139.value));
return result_56140;
}
function HEX3CHEX3D_56130(a_56132, b_56133) {

var result_56134 = null;
result_56134 = newvalue_53648((a_56132.value <= b_56133.value));
return result_56134;
}
function HEX3CHEX3D_56147(a_56149, b_56150) {

var result_56151 = null;
result_56151 = newvalue_53648((cmpStrings(a_56149.value, b_56150.value) <= 0));
return result_56151;
}
function HEX3CHEX3D_56142(a_56144, b_56145) {

var result_56146 = null;
result_56146 = newvalue_53648((a_56144.value <= b_56145.value));
return result_56146;
}
function HEX3CHEX3D_56115(a_56117, b_56118) {

var result_56119 = null;
raiseruntimeexception_51330((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_51604(a_56117).slice(0,-1),makeNimstrLit(" <= ").slice(0,-1),HEX24_51604(b_56118)));
return result_56119;
}
function HEX3CHEX3D_56121(a_56117, b_56118) {

var result_56124 = null;
BeforeRet: do {
if ((isObj(a_56117.m_type, NTI51166) & isObj(b_56118.m_type, NTI51166))) {
result_56124 = HEX3CHEX3D_56125(a_56117, b_56118);
break BeforeRet;
}
else {
if ((isObj(a_56117.m_type, NTI51169) & isObj(b_56118.m_type, NTI51166))) {
result_56124 = HEX3CHEX3D_56136(a_56117, b_56118);
break BeforeRet;
}
else {
if ((isObj(a_56117.m_type, NTI51166) & isObj(b_56118.m_type, NTI51169))) {
result_56124 = HEX3CHEX3D_56130(a_56117, b_56118);
break BeforeRet;
}
else {
if ((isObj(a_56117.m_type, NTI51172) & isObj(b_56118.m_type, NTI51172))) {
result_56124 = HEX3CHEX3D_56147(a_56117, b_56118);
break BeforeRet;
}
else {
if ((isObj(a_56117.m_type, NTI51169) & isObj(b_56118.m_type, NTI51169))) {
result_56124 = HEX3CHEX3D_56142(a_56117, b_56118);
break BeforeRet;
}
else {
if ((isObj(a_56117.m_type, NTI51124) & isObj(b_56118.m_type, NTI51124))) {
result_56124 = HEX3CHEX3D_56115(a_56117, b_56118);
break BeforeRet;
}
}}}}}
} while (false); 
return result_56124;
}
function eq_56167(a_56169, b_56170) {

var result_56171 = null;
result_56171 = newvalue_53648((a_56169.value == b_56170.value));
return result_56171;
}
function eq_56162(a_56164, b_56165) {

var result_56166 = null;
result_56166 = newvalue_53648((a_56164.value == b_56165.value));
return result_56166;
}
function eq_56173(a_56175, b_56176) {

var result_56177 = null;
result_56177 = newvalue_53648((a_56175.value == b_56176.value));
return result_56177;
}
function eq_56189(a_56191, b_56192) {

var result_56193 = null;
result_56193 = newvalue_53648((value_51945(a_56191) == value_51945(b_56192)));
return result_56193;
}
function eq_56184(a_56186, b_56187) {

var result_56188 = null;
result_56188 = newvalue_53648(eqStrings(a_56186.value, b_56187.value));
return result_56188;
}
function eq_56179(a_56181, b_56182) {

var result_56183 = null;
result_56183 = newvalue_53648((a_56181.value == b_56182.value));
return result_56183;
}
function eq_56194(a_56196, b_56197) {

var Tmp1;
var result_56198 = null;
if (!isObj(b_56197.m_type, NTI51195)) Tmp1 = false; else {Tmp1 = HEX3DHEX3D_51880(a_56196, b_56197); }result_56198 = newvalue_53648(Tmp1);
return result_56198;
}
function eq_56201(a_56203, b_56204) {

var Tmp1;
var result_56205 = null;
if (!isObj(b_56204.m_type, NTI51127)) Tmp1 = false; else {Tmp1 = eqStrings(a_56203.word, b_56204.word); }result_56205 = newvalue_53648(Tmp1);
return result_56205;
}
function eq_56152(a_56154, b_56155) {

var result_56156 = null;
raiseruntimeexception_51330((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_51604(a_56154).slice(0,-1),makeNimstrLit(" == ").slice(0,-1),HEX24_51604(b_56155)));
return result_56156;
}
function eq_56158(a_56154, b_56155) {

var result_56161 = null;
BeforeRet: do {
if ((isObj(a_56154.m_type, NTI51166) & isObj(b_56155.m_type, NTI51169))) {
result_56161 = eq_56167(a_56154, b_56155);
break BeforeRet;
}
else {
if ((isObj(a_56154.m_type, NTI51166) & isObj(b_56155.m_type, NTI51166))) {
result_56161 = eq_56162(a_56154, b_56155);
break BeforeRet;
}
else {
if ((isObj(a_56154.m_type, NTI51169) & isObj(b_56155.m_type, NTI51166))) {
result_56161 = eq_56173(a_56154, b_56155);
break BeforeRet;
}
else {
if ((isObj(a_56154.m_type, NTI51175) & isObj(b_56155.m_type, NTI51175))) {
result_56161 = eq_56189(a_56154, b_56155);
break BeforeRet;
}
else {
if ((isObj(a_56154.m_type, NTI51172) & isObj(b_56155.m_type, NTI51172))) {
result_56161 = eq_56184(a_56154, b_56155);
break BeforeRet;
}
else {
if ((isObj(a_56154.m_type, NTI51169) & isObj(b_56155.m_type, NTI51169))) {
result_56161 = eq_56179(a_56154, b_56155);
break BeforeRet;
}
else {
if ((isObj(a_56154.m_type, NTI51195) & isObj(b_56155.m_type, NTI51124))) {
result_56161 = eq_56194(a_56154, b_56155);
break BeforeRet;
}
else {
if ((isObj(a_56154.m_type, NTI51127) & isObj(b_56155.m_type, NTI51124))) {
result_56161 = eq_56201(a_56154, b_56155);
break BeforeRet;
}
else {
if ((isObj(a_56154.m_type, NTI51124) & isObj(b_56155.m_type, NTI51124))) {
result_56161 = eq_56152(a_56154, b_56155);
break BeforeRet;
}
}}}}}}}}
} while (false); 
return result_56161;
}
function HEX26_56223(a_56225, b_56226) {

var result_56227 = null;
BeforeRet: do {
add_53677(a_56225, b_56226.nodes);
result_56227 = a_56225;
break BeforeRet;
} while (false); 
return result_56227;
}
function HEX26_56218(a_56220, b_56221) {

var result_56222 = null;
result_56222 = newvalue_53643((a_56220.value.slice(0,-1)).concat(b_56221.value));
return result_56222;
}
function HEX26_56208(a_56210, b_56211) {

var result_56212 = null;
raiseruntimeexception_51330((makeNimstrLit("Can not evaluate ").slice(0,-1)).concat(HEX24_51604(a_56210).slice(0,-1),makeNimstrLit(" & ").slice(0,-1),HEX24_51604(b_56211)));
return result_56212;
}
function HEX26_56214(a_56210, b_56211) {

var result_56217 = null;
BeforeRet: do {
if ((isObj(a_56210.m_type, NTI51187) & isObj(b_56211.m_type, NTI51187))) {
result_56217 = HEX26_56223(a_56210, b_56211);
break BeforeRet;
}
else {
if ((isObj(a_56210.m_type, NTI51172) & isObj(b_56211.m_type, NTI51172))) {
result_56217 = HEX26_56218(a_56210, b_56211);
break BeforeRet;
}
else {
if ((isObj(a_56210.m_type, NTI51124) & isObj(b_56211.m_type, NTI51124))) {
result_56217 = HEX26_56208(a_56210, b_56211);
break BeforeRet;
}
}}
} while (false); 
return result_56217;
}
function doreturn_56280(self_56282, spry_56283) {

spry_56283.currentactivation = self_56282.parent;
}
function doreturn_56264(self_56266, spry_56267) {

spry_56267.currentactivation = self_56266.parent;
if (!((spry_56267.currentactivation === null))) {
spry_56267.currentactivation.returned = true;
}

}
function doreturn_56278(self_56266, spry_56267) {

if (isObj(self_56266.m_type, NTI55646)) {
doreturn_56280(self_56266, spry_56267);
}
else {
if (isObj(self_56266.m_type, NTI55635)) {
doreturn_56264(self_56266, spry_56267);
}
}
}
function isobject_56294(self_56296, spry_56297) {

var Tmp1;
var result_56298 = false;
if (!!((self_56296.tags === null))) Tmp1 = false; else {Tmp1 = contains_53738(self_56296.tags, spry_56297.objecttag); }result_56298 = Tmp1;
return result_56298;
}
function isobject_56284(self_56286, spry_56287) {

var result_56288 = false;
result_56288 = false;
return result_56288;
}
function isobject_56290(self_56286, spry_56287) {

var result_56293 = false;
BeforeRet: do {
if (isObj(self_56286.m_type, NTI51198)) {
result_56293 = isobject_56294(self_56286, spry_56287);
break BeforeRet;
}
else {
if (isObj(self_56286.m_type, NTI51124)) {
result_56293 = isobject_56284(self_56286, spry_56287);
break BeforeRet;
}
}
} while (false); 
return result_56293;
}
function makebindinginmap_56589(spry_56591, key_56592, val_56593) {

var result_56594 = null;
BeforeRet: do {
var binding_56595 = lookup_56332(spry_56591, key_56592.module);
if (!((binding_56595 === null))) {
var module_56605 = binding_56595.val;
if (!((module_56605 === null))) {
result_56594 = makebinding_52605(module_56605, newevalword_53041(key_56592.word), val_56593);
break BeforeRet;
}

}

} while (false); 
return result_56594;
}
function makebindinginmap_56565(spry_56567, key_56568, val_56569) {

var Tmp6;
var Tmp7;
var result_56570 = null;
BeforeRet: do {
L1: do {
var activation_56571 = null;
var HEX3Atmp_56581 = null;
HEX3Atmp_56581 = spry_56567.currentactivation;
var activation_56585 = HEX3Atmp_56581;
L2: do {
L3: while (true) {
if (!!((activation_56585 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(!(isObj(activation_56585.m_type, NTI55648)))) break L5;
if (isObj(activation_56585.m_type, NTI55646)) {
Tmp6 = activation_56585.body.parent;
}
else {
Tmp6 = activation_56585.parent;
}

activation_56585 = Tmp6;
}
} while(false);
activation_56571 = activation_56585;
if ((activation_56571.locals === null)) {
activation_56571.locals = newmap_52812();
}

result_56570 = makebinding_52605(activation_56571.locals, key_56568, val_56569);
break BeforeRet;
if (isObj(activation_56585.m_type, NTI55646)) {
Tmp7 = activation_56585.body.parent;
}
else {
Tmp7 = activation_56585.parent;
}

activation_56585 = Tmp7;
}
} while(false);
} while(false);
} while (false); 
return result_56570;
}
function makebindinginmap_56529(spry_56531, key_56532, val_56533) {

var Tmp6;
var Tmp7;
var result_56534 = null;
BeforeRet: do {
var inparent_56535 = false;
var fallback_56536 = null;
L1: do {
var activation_56537 = null;
var HEX3Atmp_56557 = null;
HEX3Atmp_56557 = spry_56531.currentactivation;
var activation_56561 = HEX3Atmp_56557;
L2: do {
L3: while (true) {
if (!!((activation_56561 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(!(isObj(activation_56561.m_type, NTI55648)))) break L5;
if (isObj(activation_56561.m_type, NTI55646)) {
Tmp6 = activation_56561.body.parent;
}
else {
Tmp6 = activation_56561.parent;
}

activation_56561 = Tmp6;
}
} while(false);
activation_56537 = activation_56561;
if (inparent_56535) {
fallback_56536 = activation_56537;
if (!((lookup_56314(activation_56537, key_56532) === null))) {
result_56534 = makebinding_52605(activation_56537.locals, newevalword_53041(key_56532.word), val_56533);
break BeforeRet;
}

}
else {
inparent_56535 = true;
}

if (isObj(activation_56561.m_type, NTI55646)) {
Tmp7 = activation_56561.body.parent;
}
else {
Tmp7 = activation_56561.parent;
}

activation_56561 = Tmp7;
}
} while(false);
} while(false);
if ((fallback_56536.locals === null)) {
fallback_56536.locals = newmap_52812();
}

result_56534 = makebinding_52605(fallback_56536.locals, newevalword_53041(key_56532.word), val_56533);
break BeforeRet;
} while (false); 
return result_56534;
}
function makebindinginmap_56500(spry_56502, key_56503, val_56504) {

var Tmp6;
var Tmp7;
var result_56505 = null;
BeforeRet: do {
L1: do {
var activation_56506 = null;
var HEX3Atmp_56516 = null;
HEX3Atmp_56516 = spry_56502.currentactivation;
var activation_56520 = HEX3Atmp_56516;
L2: do {
L3: while (true) {
if (!!((activation_56520 === null))) break L3;
L4: do {
L5: while (true) {
if (!!(!(isObj(activation_56520.m_type, NTI55648)))) break L5;
if (isObj(activation_56520.m_type, NTI55646)) {
Tmp6 = activation_56520.body.parent;
}
else {
Tmp6 = activation_56520.parent;
}

activation_56520 = Tmp6;
}
} while(false);
activation_56506 = activation_56520;
if ((activation_56506.locals === null)) {
activation_56506.locals = newmap_52812();
}

result_56505 = makebinding_52605(activation_56506.locals, key_56503, val_56504);
break BeforeRet;
if (isObj(activation_56520.m_type, NTI55646)) {
Tmp7 = activation_56520.body.parent;
}
else {
Tmp7 = activation_56520.parent;
}

activation_56520 = Tmp7;
}
} while(false);
} while(false);
} while (false); 
return result_56505;
}
function makebindinginmap_56525(spry_56502, key_56503, val_56504) {

var result_56528 = null;
BeforeRet: do {
if (isObj(key_56503.m_type, NTI51138)) {
result_56528 = makebindinginmap_56589(spry_56502, key_56503, val_56504);
break BeforeRet;
}
else {
if (isObj(key_56503.m_type, NTI51136)) {
result_56528 = makebindinginmap_56565(spry_56502, key_56503, val_56504);
break BeforeRet;
}
else {
if (isObj(key_56503.m_type, NTI51143)) {
result_56528 = makebindinginmap_56529(spry_56502, key_56503, val_56504);
break BeforeRet;
}
else {
if (isObj(key_56503.m_type, NTI51124)) {
result_56528 = makebindinginmap_56500(spry_56502, key_56503, val_56504);
break BeforeRet;
}
}}}
} while (false); 
return result_56528;
}
function ismethod_56743(self_56745, spry_56746) {

var result_56747 = false;
BeforeRet: do {
result_56747 = ismethod_56729(self_56745.val, spry_56746);
break BeforeRet;
} while (false); 
return result_56747;
}
function ismethod_56738(self_56740, spry_56741) {

var result_56742 = false;
result_56742 = true;
return result_56742;
}
function ismethod_56733(self_56735, spry_56736) {

var result_56737 = false;
result_56737 = true;
return result_56737;
}
function ismethod_56748(self_56750, spry_56751) {

var result_56752 = false;
BeforeRet: do {
var binding_56753 = lookup_56332(spry_56751, self_56750);
if ((binding_56753 === null)) {
result_56752 = false;
break BeforeRet;
}
else {
result_56752 = ismethod_56729(binding_56753.val, spry_56751);
break BeforeRet;
}

} while (false); 
return result_56752;
}
function ismethod_56723(self_56725, spry_56726) {

var result_56727 = false;
result_56727 = false;
return result_56727;
}
function ismethod_56729(self_56725, spry_56726) {

var result_56732 = false;
BeforeRet: do {
if (isObj(self_56725.m_type, NTI51224)) {
result_56732 = ismethod_56743(self_56725, spry_56726);
break BeforeRet;
}
else {
if (isObj(self_56725.m_type, NTI55633)) {
result_56732 = ismethod_56738(self_56725, spry_56726);
break BeforeRet;
}
else {
if (isObj(self_56725.m_type, NTI55627)) {
result_56732 = ismethod_56733(self_56725, spry_56726);
break BeforeRet;
}
else {
if (isObj(self_56725.m_type, NTI51136)) {
result_56732 = ismethod_56748(self_56725, spry_56726);
break BeforeRet;
}
else {
if (isObj(self_56725.m_type, NTI51124)) {
result_56732 = ismethod_56723(self_56725, spry_56726);
break BeforeRet;
}
}}}}
} while (false); 
return result_56732;
}
function caneval_56791(self_56793, spry_56794) {

var result_56795 = false;
result_56795 = true;
return result_56795;
}
function caneval_56786(self_56788, spry_56789) {

var result_56790 = false;
BeforeRet: do {
result_56790 = caneval_56768(self_56788.val, spry_56789);
break BeforeRet;
} while (false); 
return result_56790;
}
function caneval_56772(self_56774, spry_56775) {

var result_56776 = false;
BeforeRet: do {
var binding_56777 = lookup_56332(spry_56775, self_56774);
if ((binding_56777 === null)) {
result_56776 = false;
break BeforeRet;
}
else {
result_56776 = caneval_56768(binding_56777.val, spry_56775);
break BeforeRet;
}

} while (false); 
return result_56776;
}
function caneval_56796(self_56798, spry_56799) {

var result_56800 = false;
result_56800 = true;
return result_56800;
}
function caneval_56811(self_56813, spry_56814) {

var result_56815 = false;
result_56815 = true;
return result_56815;
}
function caneval_56806(self_56808, spry_56809) {

var result_56810 = false;
result_56810 = true;
return result_56810;
}
function caneval_56801(self_56803, spry_56804) {

var result_56805 = false;
result_56805 = true;
return result_56805;
}
function caneval_56816(self_56818, spry_56819) {

var result_56820 = false;
result_56820 = true;
return result_56820;
}
function caneval_56762(self_56764, spry_56765) {

var result_56766 = false;
result_56766 = false;
return result_56766;
}
function caneval_56768(self_56764, spry_56765) {

var result_56771 = false;
BeforeRet: do {
if (isObj(self_56764.m_type, NTI55629)) {
result_56771 = caneval_56791(self_56764, spry_56765);
break BeforeRet;
}
else {
if (isObj(self_56764.m_type, NTI51224)) {
result_56771 = caneval_56786(self_56764, spry_56765);
break BeforeRet;
}
else {
if (isObj(self_56764.m_type, NTI51136)) {
result_56771 = caneval_56772(self_56764, spry_56765);
break BeforeRet;
}
else {
if (isObj(self_56764.m_type, NTI55624)) {
result_56771 = caneval_56796(self_56764, spry_56765);
break BeforeRet;
}
else {
if (isObj(self_56764.m_type, NTI51191)) {
result_56771 = caneval_56811(self_56764, spry_56765);
break BeforeRet;
}
else {
if (isObj(self_56764.m_type, NTI51156)) {
result_56771 = caneval_56806(self_56764, spry_56765);
break BeforeRet;
}
else {
if (isObj(self_56764.m_type, NTI51145)) {
result_56771 = caneval_56801(self_56764, spry_56765);
break BeforeRet;
}
else {
if (isObj(self_56764.m_type, NTI51193)) {
result_56771 = caneval_56816(self_56764, spry_56765);
break BeforeRet;
}
else {
if (isObj(self_56764.m_type, NTI51124)) {
result_56771 = caneval_56762(self_56764, spry_56765);
break BeforeRet;
}
}}}}}}}}
} while (false); 
return result_56771;
}
function dump_70032(self_70034) {

rawEcho(makeNimstrLit("FUNKACTIVATION"));
rawEcho(HEX24_51604(self_70034.body));
if ((self_70034.pos < len_55818(self_70034))) {
rawEcho((makeNimstrLit("POS(").slice(0,-1)).concat(cstrToNimstr((self_70034.pos)+"").slice(0,-1),makeNimstrLit("): ").slice(0,-1),HEX24_51604(HEX5BHEX5D_55788(self_70034.body, self_70034.pos))));
}

rawEcho(HEX24_51604(self_70034.locals));
}
function dump_70023(self_70025) {

rawEcho(makeNimstrLit("CURLYACTIVATION"));
rawEcho(HEX24_51604(self_70025.body));
if ((self_70025.pos < len_55818(self_70025))) {
rawEcho((makeNimstrLit("POS(").slice(0,-1)).concat(cstrToNimstr((self_70025.pos)+"").slice(0,-1),makeNimstrLit("): ").slice(0,-1),HEX24_51604(HEX5BHEX5D_55788(self_70025.body, self_70025.pos))));
}

}
function dump_70014(self_70016) {

rawEcho(makeNimstrLit("PARENACTIVATION"));
rawEcho(HEX24_51604(self_70016.body));
if ((self_70016.pos < len_55818(self_70016))) {
rawEcho((makeNimstrLit("POS(").slice(0,-1)).concat(cstrToNimstr((self_70016.pos)+"").slice(0,-1),makeNimstrLit("): ").slice(0,-1),HEX24_51604(HEX5BHEX5D_55788(self_70016.body, self_70016.pos))));
}

}
function dump_70043(self_70045) {

rawEcho(makeNimstrLit("BLOKACTIVATION"));
rawEcho(HEX24_51604(self_70045.body));
if ((self_70045.pos < len_55818(self_70045))) {
rawEcho((makeNimstrLit("POS(").slice(0,-1)).concat(cstrToNimstr((self_70045.pos)+"").slice(0,-1),makeNimstrLit("): ").slice(0,-1),HEX24_51604(HEX5BHEX5D_55788(self_70045.body, self_70045.pos))));
}

rawEcho(HEX24_51604(self_70045.locals));
}
function dump_70002(self_70004) {

rawEcho(makeNimstrLit("ACTIVATION"));
rawEcho(HEX24_51604(self_70004.body));
if ((self_70004.pos < len_55818(self_70004))) {
rawEcho((makeNimstrLit("POS(").slice(0,-1)).concat(cstrToNimstr((self_70004.pos)+"").slice(0,-1),makeNimstrLit("): ").slice(0,-1),HEX24_51604(HEX5BHEX5D_55788(self_70004.body, self_70004.pos))));
}

}
function dump_70012(self_70004) {

if (isObj(self_70004.m_type, NTI55646)) {
dump_70032(self_70004);
}
else {
if (isObj(self_70004.m_type, NTI55650)) {
dump_70023(self_70004);
}
else {
if (isObj(self_70004.m_type, NTI55648)) {
dump_70014(self_70004);
}
else {
if (isObj(self_70004.m_type, NTI55643)) {
dump_70043(self_70004);
}
else {
if (isObj(self_70004.m_type, NTI55635)) {
dump_70002(self_70004);
}
}}}}
}
function typename_73071(self_73073) {

var result_73074 = null;
result_73074 = nimCopy(null, makeNimstrLit("litword"), NTI138);
return result_73074;
}
function typename_73067(self_73069) {

var result_73070 = null;
result_73070 = nimCopy(null, makeNimstrLit("getouterword"), NTI138);
return result_73070;
}
function typename_73087(self_73089) {

var result_73090 = null;
result_73090 = nimCopy(null, makeNimstrLit("paren"), NTI138);
return result_73090;
}
function typename_73083(self_73085) {

var result_73086 = null;
result_73086 = nimCopy(null, makeNimstrLit("block"), NTI138);
return result_73086;
}
function typename_73063(self_73065) {

var result_73066 = null;
result_73066 = nimCopy(null, makeNimstrLit("getselfword"), NTI138);
return result_73066;
}
function typename_73059(self_73061) {

var result_73062 = null;
result_73062 = nimCopy(null, makeNimstrLit("getmoduleword"), NTI138);
return result_73062;
}
function typename_73055(self_73057) {

var result_73058 = null;
result_73058 = nimCopy(null, makeNimstrLit("getword"), NTI138);
return result_73058;
}
function typename_73051(self_73053) {

var result_73054 = null;
result_73054 = nimCopy(null, makeNimstrLit("evalouterword"), NTI138);
return result_73054;
}
function typename_73099(self_73101) {

var result_73102 = null;
result_73102 = nimCopy(null, makeNimstrLit("binding"), NTI138);
return result_73102;
}
function typename_73079(self_73081) {

var result_73082 = null;
result_73082 = nimCopy(null, makeNimstrLit("getargword"), NTI138);
return result_73082;
}
function typename_73075(self_73077) {

var result_73078 = null;
result_73078 = nimCopy(null, makeNimstrLit("evalargword"), NTI138);
return result_73078;
}
function typename_73015(self_73017) {

var result_73018 = null;
result_73018 = nimCopy(null, makeNimstrLit("float"), NTI138);
return result_73018;
}
function typename_73011(self_73013) {

var result_73014 = null;
result_73014 = nimCopy(null, makeNimstrLit("int"), NTI138);
return result_73014;
}
function typename_73095(self_73097) {

var result_73098 = null;
result_73098 = nimCopy(null, makeNimstrLit("map"), NTI138);
return result_73098;
}
function typename_73091(self_73093) {

var result_73094 = null;
result_73094 = nimCopy(null, makeNimstrLit("curly"), NTI138);
return result_73094;
}
function typename_73031(self_73033) {

var result_73034 = null;
result_73034 = nimCopy(null, makeNimstrLit("novalue"), NTI138);
return result_73034;
}
function typename_73027(self_73029) {

var result_73030 = null;
result_73030 = nimCopy(null, makeNimstrLit("boolean"), NTI138);
return result_73030;
}
function typename_73023(self_73025) {

var result_73026 = null;
result_73026 = nimCopy(null, makeNimstrLit("boolean"), NTI138);
return result_73026;
}
function typename_73019(self_73021) {

var result_73022 = null;
result_73022 = nimCopy(null, makeNimstrLit("string"), NTI138);
return result_73022;
}
function typename_73047(self_73049) {

var result_73050 = null;
result_73050 = nimCopy(null, makeNimstrLit("evalselfword"), NTI138);
return result_73050;
}
function typename_73043(self_73045) {

var result_73046 = null;
result_73046 = nimCopy(null, makeNimstrLit("evalmoduleword"), NTI138);
return result_73046;
}
function typename_73039(self_73041) {

var result_73042 = null;
result_73042 = nimCopy(null, makeNimstrLit("evalword"), NTI138);
return result_73042;
}
function typename_73035(self_73037) {

var result_73038 = null;
result_73038 = nimCopy(null, makeNimstrLit("undefined"), NTI138);
return result_73038;
}
function typename_73002(self_73004) {

var result_73005 = null;
raiseruntimeexception_51330(makeNimstrLit("Nodes need to implement typeName"));
return result_73005;
}
function typename_73007(self_73004) {

var result_73010 = null;
BeforeRet: do {
if (isObj(self_73004.m_type, NTI51134)) {
result_73010 = typename_73071(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51154)) {
result_73010 = typename_73067(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51191)) {
result_73010 = typename_73087(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51195)) {
result_73010 = typename_73083(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51152)) {
result_73010 = typename_73063(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51149)) {
result_73010 = typename_73059(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51147)) {
result_73010 = typename_73055(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51143)) {
result_73010 = typename_73051(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51224)) {
result_73010 = typename_73099(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51156)) {
result_73010 = typename_73079(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51145)) {
result_73010 = typename_73075(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51169)) {
result_73010 = typename_73015(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51166)) {
result_73010 = typename_73011(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51198)) {
result_73010 = typename_73095(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51193)) {
result_73010 = typename_73091(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51183)) {
result_73010 = typename_73031(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51179)) {
result_73010 = typename_73027(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51177)) {
result_73010 = typename_73023(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51172)) {
result_73010 = typename_73019(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51141)) {
result_73010 = typename_73047(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51138)) {
result_73010 = typename_73043(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51136)) {
result_73010 = typename_73039(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51181)) {
result_73010 = typename_73035(self_73004);
break BeforeRet;
}
else {
if (isObj(self_73004.m_type, NTI51124)) {
result_73010 = typename_73002(self_73004);
break BeforeRet;
}
}}}}}}}}}}}}}}}}}}}}}}}
} while (false); 
return result_73010;
}
